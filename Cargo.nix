# This file was @generated by cargo2nix 0.11.0.
# It is not intended to be manually edited.

args@{
  release ? true,
  rootFeatures ? [
    "roc_ident/default"
    "roc_region/default"
    "roc_collections/default"
    "roc_exhaustive/default"
    "roc_module/default"
    "roc_error_macros/default"
    "roc_parse/default"
    "roc_test_utils/default"
    "roc_can/default"
    "roc_problem/default"
    "roc_types/default"
    "roc_debug_flags/default"
    "ven_ena/default"
    "roc_builtins/default"
    "roc_target/default"
    "roc_constrain/default"
    "roc_unify/default"
    "roc_solve/default"
    "roc_load/default"
    "roc_load_internal/default"
    "roc_mono/default"
    "ven_pretty/default"
    "roc_reporting/default"
    "roc_fmt/default"
    "roc_alias_analysis/default"
    "morphic_lib/default"
    "test_mono/default"
    "roc_gen_llvm/default"
    "inkwell/default"
    "roc_gen_dev/default"
    "roc_gen_wasm/default"
    "roc_build/default"
    "wasi_libc_sys/default"
    "arena-pool/default"
    "test_gen/default"
    "ven_graph/default"
    "roc-bindgen/default"
    "roc_editor/default"
    "roc_ast/default"
    "roc_code_markup/default"
    "roc_utils/default"
    "roc_cli/default"
    "roc_docs/default"
    "roc_highlight/default"
    "roc_linker/default"
    "roc_repl_cli/default"
    "roc_repl_eval/default"
    "repl_test/default"
    "roc_repl_wasm/default"
    "roc_docs_cli/default"
  ],
  rustPackages,
  buildRustPackages,
  hostPlatform,
  hostPlatformCpu ? null,
  hostPlatformFeatures ? [],
  target ? null,
  codegenOpts ? null,
  profileOpts ? null,
  mkRustCrate,
  rustLib,
  lib,
  workspaceSrc,
}:
let
  workspaceSrc = if args.workspaceSrc == null then ./. else args.workspaceSrc;
in let
  inherit (rustLib) fetchCratesIo fetchCrateLocal fetchCrateGit fetchCrateAlternativeRegistry expandFeatures decideProfile genDrvsByProfile;
  profilesByName = {
    bench = builtins.fromTOML "codegen-units = 1\nlto = \"thin\"\n";
    release = builtins.fromTOML "codegen-units = 1\nlto = \"thin\"\n";
  };
  rootFeatures' = expandFeatures rootFeatures;
  overridableMkRustCrate = f:
    let
      drvs = genDrvsByProfile profilesByName ({ profile, profileName }: mkRustCrate ({ inherit release profile hostPlatformCpu hostPlatformFeatures target profileOpts codegenOpts; } // (f profileName)));
    in { compileMode ? null, profileName ? decideProfile compileMode release }:
      let drv = drvs.${profileName}; in if compileMode == null then drv else drv.override { inherit compileMode; };
in
{
  cargo2nixVersion = "0.11.0";
  workspace = {
    roc_ident = rustPackages.unknown.roc_ident."0.1.0";
    roc_region = rustPackages.unknown.roc_region."0.1.0";
    roc_collections = rustPackages.unknown.roc_collections."0.1.0";
    roc_exhaustive = rustPackages.unknown.roc_exhaustive."0.1.0";
    roc_module = rustPackages.unknown.roc_module."0.1.0";
    roc_error_macros = rustPackages.unknown.roc_error_macros."0.1.0";
    roc_parse = rustPackages.unknown.roc_parse."0.1.0";
    roc_test_utils = rustPackages.unknown.roc_test_utils."0.1.0";
    roc_can = rustPackages.unknown.roc_can."0.1.0";
    roc_problem = rustPackages.unknown.roc_problem."0.1.0";
    roc_types = rustPackages.unknown.roc_types."0.1.0";
    roc_debug_flags = rustPackages.unknown.roc_debug_flags."0.1.0";
    ven_ena = rustPackages.unknown.ven_ena."0.13.1";
    roc_builtins = rustPackages.unknown.roc_builtins."0.1.0";
    roc_target = rustPackages.unknown.roc_target."0.1.0";
    roc_constrain = rustPackages.unknown.roc_constrain."0.1.0";
    roc_unify = rustPackages.unknown.roc_unify."0.1.0";
    roc_solve = rustPackages.unknown.roc_solve."0.1.0";
    roc_load = rustPackages.unknown.roc_load."0.1.0";
    roc_load_internal = rustPackages.unknown.roc_load_internal."0.1.0";
    roc_mono = rustPackages.unknown.roc_mono."0.1.0";
    ven_pretty = rustPackages.unknown.ven_pretty."0.9.1-alpha.0";
    roc_reporting = rustPackages.unknown.roc_reporting."0.1.0";
    roc_fmt = rustPackages.unknown.roc_fmt."0.1.0";
    roc_alias_analysis = rustPackages.unknown.roc_alias_analysis."0.1.0";
    morphic_lib = rustPackages.unknown.morphic_lib."0.1.0";
    test_mono = rustPackages.unknown.test_mono."0.1.0";
    roc_gen_llvm = rustPackages.unknown.roc_gen_llvm."0.1.0";
    inkwell = rustPackages.unknown.inkwell."0.1.0";
    roc_gen_dev = rustPackages.unknown.roc_gen_dev."0.1.0";
    roc_gen_wasm = rustPackages.unknown.roc_gen_wasm."0.1.0";
    roc_build = rustPackages.unknown.roc_build."0.1.0";
    wasi_libc_sys = rustPackages.unknown.wasi_libc_sys."0.1.0";
    arena-pool = rustPackages.unknown.arena-pool."0.1.0";
    test_gen = rustPackages.unknown.test_gen."0.1.0";
    ven_graph = rustPackages.unknown.ven_graph."2.0.5-pre";
    roc-bindgen = rustPackages.unknown.roc-bindgen."0.1.0";
    roc_editor = rustPackages.unknown.roc_editor."0.1.0";
    roc_ast = rustPackages.unknown.roc_ast."0.1.0";
    roc_code_markup = rustPackages.unknown.roc_code_markup."0.1.0";
    roc_utils = rustPackages.unknown.roc_utils."0.1.0";
    roc_cli = rustPackages.unknown.roc_cli."0.1.0";
    roc_docs = rustPackages.unknown.roc_docs."0.1.0";
    roc_highlight = rustPackages.unknown.roc_highlight."0.1.0";
    roc_linker = rustPackages.unknown.roc_linker."0.1.0";
    roc_repl_cli = rustPackages.unknown.roc_repl_cli."0.1.0";
    roc_repl_eval = rustPackages.unknown.roc_repl_eval."0.1.0";
    repl_test = rustPackages.unknown.repl_test."0.1.0";
    roc_repl_wasm = rustPackages.unknown.roc_repl_wasm."0.1.0";
    roc_docs_cli = rustPackages.unknown.roc_docs_cli."0.1.0";
  };
  "registry+https://github.com/rust-lang/crates.io-index".ab_glyph."0.2.15" = overridableMkRustCrate (profileName: rec {
    name = "ab_glyph";
    version = "0.2.15";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "24606928a235e73cdef55a0c909719cadd72fce573e5713d58cb2952d8f5794c"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      ab_glyph_rasterizer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ab_glyph_rasterizer."0.1.5" { inherit profileName; };
      owned_ttf_parser = rustPackages."registry+https://github.com/rust-lang/crates.io-index".owned_ttf_parser."0.15.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ab_glyph_rasterizer."0.1.5" = overridableMkRustCrate (profileName: rec {
    name = "ab_glyph_rasterizer";
    version = "0.1.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a13739d7177fbd22bb0ed28badfff9f372f8bef46c863db4e1c6248f6b223b6e"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".addr2line."0.17.0" = overridableMkRustCrate (profileName: rec {
    name = "addr2line";
    version = "0.17.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b9ecd88a8c8378ca913a680cd98f0f13ac67383d35993f86c90a70e3f137816b"; };
    dependencies = {
      gimli = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gimli."0.26.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".adler."1.0.2" = overridableMkRustCrate (profileName: rec {
    name = "adler";
    version = "1.0.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f26201604c87b1e01bd3d98f8d5d9a8fcbb815e8cedb41ffccbeb4bf593a35fe"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ahash."0.7.6" = overridableMkRustCrate (profileName: rec {
    name = "ahash";
    version = "0.7.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fcb51a0695d8f838b1ee009b3fbf66bda078cd64590202a864a8f3e8c4315c47"; };
    dependencies = {
      ${ if hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "android" || hostPlatform.parsed.kernel.name == "windows" || hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios" || hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "openbsd" || hostPlatform.parsed.kernel.name == "netbsd" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "solaris" || hostPlatform.parsed.kernel.name == "illumos" || hostPlatform.parsed.kernel.name == "fuchsia" || hostPlatform.parsed.kernel.name == "redox" || hostPlatform.parsed.kernel.name == "cloudabi" || hostPlatform.parsed.kernel.name == "haiku" || hostPlatform.parsed.kernel.name == "vxworks" || hostPlatform.parsed.kernel.name == "emscripten" || hostPlatform.parsed.kernel.name == "wasi" then "getrandom" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.2.6" { inherit profileName; };
      ${ if !((hostPlatform.parsed.cpu.name == "armv6l" || hostPlatform.parsed.cpu.name == "armv7l") && hostPlatform.parsed.kernel.name == "none") then "once_cell" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.10.0" { inherit profileName; };
    };
    buildDependencies = {
      version_check = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.4" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".aho-corasick."0.7.18" = overridableMkRustCrate (profileName: rec {
    name = "aho-corasick";
    version = "0.7.18";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1e37cfd5e7657ada45f742d6e99ca5788580b5c529dc78faf11ece6dc702656f"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      memchr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.5.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".alsa."0.6.0" = overridableMkRustCrate (profileName: rec {
    name = "alsa";
    version = "0.6.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5915f52fe2cf65e83924d037b6c5290b7cee097c6b5c8700746e6168a343fd6b"; };
    dependencies = {
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "alsa_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".alsa-sys."0.3.1" { inherit profileName; };
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "bitflags" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.125" { inherit profileName; };
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "nix" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nix."0.23.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".alsa-sys."0.3.1" = overridableMkRustCrate (profileName: rec {
    name = "alsa-sys";
    version = "0.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "db8fee663d06c4e303404ef5f40488a53e062f89ba8bfed81f42325aafad1527"; };
    dependencies = {
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.125" { inherit profileName; };
    };
    buildDependencies = {
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "pkg_config" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".pkg-config."0.3.25" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".andrew."0.3.1" = overridableMkRustCrate (profileName: rec {
    name = "andrew";
    version = "0.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8c4afb09dd642feec8408e33f92f3ffc4052946f6b20f32fb99c1f58cd4fa7cf"; };
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      rusttype = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rusttype."0.9.2" { inherit profileName; };
      walkdir = rustPackages."registry+https://github.com/rust-lang/crates.io-index".walkdir."2.3.2" { inherit profileName; };
      xdg = rustPackages."registry+https://github.com/rust-lang/crates.io-index".xdg."2.4.1" { inherit profileName; };
      xml = rustPackages."registry+https://github.com/rust-lang/crates.io-index".xml-rs."0.8.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ansi_term."0.12.1" = overridableMkRustCrate (profileName: rec {
    name = "ansi_term";
    version = "0.12.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d52a9bb7ec0cf484c551830a7ce27bd20d67eac647e1befb56b0be4ee39a55d2"; };
    dependencies = {
      ${ if hostPlatform.parsed.kernel.name == "windows" then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".approx."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "approx";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3f2a05fd1bd10b2527e20a2cd32d8873d115b8b39fe219ee25f42a8aca6ba278"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.15" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".approx."0.5.1" = overridableMkRustCrate (profileName: rec {
    name = "approx";
    version = "0.5.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "cab112f0a86d568ea0e627cc1d6be74a1e9cd55214684db5561995f6dad897c6"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.15" { inherit profileName; };
    };
  });
  
  "unknown".arena-pool."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "arena-pool";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/arena_pool");
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.5.2" = overridableMkRustCrate (profileName: rec {
    name = "arrayvec";
    version = "0.5.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "23b62fc65de8e4e7f52534fb52b0f3ed04746ae267519eef2a83941e8085068b"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.7.2" = overridableMkRustCrate (profileName: rec {
    name = "arrayvec";
    version = "0.7.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8da52d66c7071e2e3fa2a1e5c6d088fec47b593032b254f5e980de8ea54454d6"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ash."0.33.3+1.2.191" = overridableMkRustCrate (profileName: rec {
    name = "ash";
    version = "0.33.3+1.2.191";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "cc4f1d82f164f838ae413296d1131aa6fa79b917d25bebaa7033d25620c09219"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "libloading" ]
    ];
    dependencies = {
      libloading = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libloading."0.7.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".atty."0.2.14" = overridableMkRustCrate (profileName: rec {
    name = "atty";
    version = "0.2.14";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d9b39be18770d11421cdb1b9947a45dd3f37e93092cbf377614828a319d5fee8"; };
    dependencies = {
      ${ if hostPlatform.parsed.kernel.name == "hermit" then "hermit_abi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hermit-abi."0.1.19" { inherit profileName; };
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.125" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" = overridableMkRustCrate (profileName: rec {
    name = "autocfg";
    version = "1.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d468802bab17cbc0cc575e9b053f41e72aa36bfa6b7f55e3529ffa43161b97fa"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".backtrace."0.3.65" = overridableMkRustCrate (profileName: rec {
    name = "backtrace";
    version = "0.3.65";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "11a17d453482a265fd5f8479f2a3f405566e6ca627837aaddb85af8b1ab8ef61"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      addr2line = rustPackages."registry+https://github.com/rust-lang/crates.io-index".addr2line."0.17.0" { inherit profileName; };
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.125" { inherit profileName; };
      miniz_oxide = rustPackages."registry+https://github.com/rust-lang/crates.io-index".miniz_oxide."0.5.1" { inherit profileName; };
      object = rustPackages."registry+https://github.com/rust-lang/crates.io-index".object."0.28.3" { inherit profileName; };
      rustc_demangle = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-demangle."0.1.21" { inherit profileName; };
    };
    buildDependencies = {
      cc = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.73" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".base-x."0.2.10" = overridableMkRustCrate (profileName: rec {
    name = "base-x";
    version = "0.2.10";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "dc19a4937b4fbd3fe3379793130e42060d10627a360f2127802b10b87e7baf74"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bincode."1.3.3" = overridableMkRustCrate (profileName: rec {
    name = "bincode";
    version = "1.3.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b1f45e9417d87227c7a56d22e471c6206462cba514c7590c09aff4cf6d1ddcad"; };
    dependencies = {
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.137" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bindgen."0.59.2" = overridableMkRustCrate (profileName: rec {
    name = "bindgen";
    version = "0.59.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2bd2a9a458e8f4304c52c43ebb0cfbd520289f8379a52e329a38afda99bf8eb8"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "runtime")
    ];
    dependencies = {
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "bitflags" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "cexpr" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cexpr."0.6.0" { inherit profileName; };
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "clang_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".clang-sys."1.3.1" { inherit profileName; };
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "lazy_static" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "lazycell" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazycell."1.3.0" { inherit profileName; };
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "peeking_take_while" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".peeking_take_while."0.1.2" { inherit profileName; };
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "proc_macro2" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.38" { inherit profileName; };
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "quote" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.18" { inherit profileName; };
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "regex" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.5.5" { inherit profileName; };
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "rustc_hash" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-hash."1.1.0" { inherit profileName; };
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "shlex" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".shlex."1.1.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bit-set."0.5.2" = overridableMkRustCrate (profileName: rec {
    name = "bit-set";
    version = "0.5.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6e11e16035ea35e4e5997b393eacbf6f63983188f7a2ad25bfb13465f5ad59de"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      bit_vec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bit-vec."0.6.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bit-vec."0.6.3" = overridableMkRustCrate (profileName: rec {
    name = "bit-vec";
    version = "0.6.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "349f9b6a179ed607305526ca489b34ad0a41aed5f7980fa90eb03160b69598fb"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" = overridableMkRustCrate (profileName: rec {
    name = "bitflags";
    version = "1.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bitmaps."2.1.0" = overridableMkRustCrate (profileName: rec {
    name = "bitmaps";
    version = "2.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "031043d04099746d8db04daf1fa424b2bc8bd69d92b25962dcde24da39ab64a2"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      typenum = rustPackages."registry+https://github.com/rust-lang/crates.io-index".typenum."1.15.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bitvec."0.22.3" = overridableMkRustCrate (profileName: rec {
    name = "bitvec";
    version = "0.22.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5237f00a8c86130a0cc317830e558b966dd7850d48a953d998c813f01a41b527"; };
    dependencies = {
      funty = rustPackages."registry+https://github.com/rust-lang/crates.io-index".funty."1.2.0" { inherit profileName; };
      radium = rustPackages."registry+https://github.com/rust-lang/crates.io-index".radium."0.6.2" { inherit profileName; };
      tap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tap."1.0.1" { inherit profileName; };
      wyz = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wyz."0.4.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bitvec."1.0.0" = overridableMkRustCrate (profileName: rec {
    name = "bitvec";
    version = "1.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1489fcb93a5bb47da0462ca93ad252ad6af2145cce58d10d46a83931ba9f016b"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "atomic" ]
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      funty = rustPackages."registry+https://github.com/rust-lang/crates.io-index".funty."2.0.0" { inherit profileName; };
      radium = rustPackages."registry+https://github.com/rust-lang/crates.io-index".radium."0.7.0" { inherit profileName; };
      tap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tap."1.0.1" { inherit profileName; };
      wyz = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wyz."0.5.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".block."0.1.6" = overridableMkRustCrate (profileName: rec {
    name = "block";
    version = "0.1.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0d8c1fef690941d3e7788d328517591fecc684c084084702d6ff1641e993699a"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".block-buffer."0.7.3" = overridableMkRustCrate (profileName: rec {
    name = "block-buffer";
    version = "0.7.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c0940dc441f31689269e10ac70eb1002a3a1d3ad1390e030043662eb7fe4688b"; };
    dependencies = {
      block_padding = rustPackages."registry+https://github.com/rust-lang/crates.io-index".block-padding."0.1.5" { inherit profileName; };
      byte_tools = rustPackages."registry+https://github.com/rust-lang/crates.io-index".byte-tools."0.3.1" { inherit profileName; };
      byteorder = rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.4.3" { inherit profileName; };
      generic_array = rustPackages."registry+https://github.com/rust-lang/crates.io-index".generic-array."0.12.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".block-buffer."0.9.0" = overridableMkRustCrate (profileName: rec {
    name = "block-buffer";
    version = "0.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4152116fd6e9dadb291ae18fc1ec3575ed6d84c29642d97890f4b4a3417297e4"; };
    dependencies = {
      generic_array = rustPackages."registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.5" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".block-padding."0.1.5" = overridableMkRustCrate (profileName: rec {
    name = "block-padding";
    version = "0.1.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fa79dedbb091f449f1f39e53edf88d5dbe95f895dae6135a8d7b881fb5af73f5"; };
    dependencies = {
      byte_tools = rustPackages."registry+https://github.com/rust-lang/crates.io-index".byte-tools."0.3.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bstr."0.2.17" = overridableMkRustCrate (profileName: rec {
    name = "bstr";
    version = "0.2.17";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ba3569f383e8f1598449f1a423e72e99569137b47740b1da11ef19af3d5c3223"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "lazy_static" ]
      [ "regex-automata" ]
      [ "serde" ]
      [ "serde1" ]
      [ "serde1-nostd" ]
      [ "std" ]
      [ "unicode" ]
    ];
    dependencies = {
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      memchr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.5.0" { inherit profileName; };
      regex_automata = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex-automata."0.1.10" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.137" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bumpalo."3.9.1" = overridableMkRustCrate (profileName: rec {
    name = "bumpalo";
    version = "3.9.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a4a45a46ab1f2412e53d3a0ade76ffad2025804294569aae387231a0cd6e0899"; };
    features = builtins.concatLists [
      [ "collections" ]
      [ "default" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".byte-tools."0.3.1" = overridableMkRustCrate (profileName: rec {
    name = "byte-tools";
    version = "0.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e3b5ca7a04898ad4bcd41c90c5285445ff5b791899bb1b0abdd2a2aa791211d7"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bytecheck."0.6.8" = overridableMkRustCrate (profileName: rec {
    name = "bytecheck";
    version = "0.6.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3a31f923c2db9513e4298b72df143e6e655a759b3d6a0966df18f81223fff54f"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      bytecheck_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".bytecheck_derive."0.6.8" { profileName = "__noProfile"; };
      ptr_meta = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ptr_meta."0.1.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bytecheck_derive."0.6.8" = overridableMkRustCrate (profileName: rec {
    name = "bytecheck_derive";
    version = "0.6.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "edb17c862a905d912174daa27ae002326fff56dc8b8ada50a0a5f0976cb174f0"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.38" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.18" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.92" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bytemuck."1.9.1" = overridableMkRustCrate (profileName: rec {
    name = "bytemuck";
    version = "1.9.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "cdead85bdec19c194affaeeb670c0e41fe23de31459efd1c174d049269cf02cc"; };
    features = builtins.concatLists [
      [ "bytemuck_derive" ]
      [ "derive" ]
    ];
    dependencies = {
      bytemuck_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".bytemuck_derive."1.1.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bytemuck_derive."1.1.0" = overridableMkRustCrate (profileName: rec {
    name = "bytemuck_derive";
    version = "1.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "562e382481975bc61d11275ac5e62a19abd00b0547d99516a415336f183dcd0e"; };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.38" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.18" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.92" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".byteorder."1.4.3" = overridableMkRustCrate (profileName: rec {
    name = "byteorder";
    version = "1.4.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "14c189c53d098945499cdfa7ecc63567cf3886b3332b312a5b4585d8d3a6a610"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bytes."1.1.0" = overridableMkRustCrate (profileName: rec {
    name = "bytes";
    version = "1.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c4872d67bab6358e59559027aa3b9157c53d9358c51423c17554809a8858e0f8"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "default")
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "std")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".calloop."0.6.5" = overridableMkRustCrate (profileName: rec {
    name = "calloop";
    version = "0.6.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0b036167e76041694579972c28cf4877b4f92da222560ddb49008937b6a6727c"; };
    dependencies = {
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.17" { inherit profileName; };
      nix = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nix."0.18.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cast."0.2.7" = overridableMkRustCrate (profileName: rec {
    name = "cast";
    version = "0.2.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4c24dab4283a142afa2fdca129b80ad2c6284e073930f964c3a1293c225ee39a"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    buildDependencies = {
      rustc_version = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc_version."0.4.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cc."1.0.73" = overridableMkRustCrate (profileName: rec {
    name = "cc";
    version = "1.0.73";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2fff2a6927b3bb87f9595d67196a70493f627687a71d87a0d692242c33f58c11"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "jobserver")
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "parallel")
    ];
    dependencies = {
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "jobserver" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jobserver."0.1.24" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cesu8."1.1.0" = overridableMkRustCrate (profileName: rec {
    name = "cesu8";
    version = "1.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6d43a04d8753f35258c91f8ec639f792891f748a1edbd759cf1dcea3382ad83c"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cexpr."0.6.0" = overridableMkRustCrate (profileName: rec {
    name = "cexpr";
    version = "0.6.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6fac387a98bb7c37292057cffc56d62ecb629900026402633ae9160df93a8766"; };
    dependencies = {
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "nom" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nom."7.1.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cfg-if."0.1.10" = overridableMkRustCrate (profileName: rec {
    name = "cfg-if";
    version = "0.1.10";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4785bdd1c96b2a846b2bd7cc02e86b6b3dbf14e7e53446c4f54c92a361040822"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" = overridableMkRustCrate (profileName: rec {
    name = "cfg-if";
    version = "1.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cfg_aliases."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "cfg_aliases";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fd16c4719339c4530435d38e511904438d07cce7950afa3718a84ac36c10e89e"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cgmath."0.18.0" = overridableMkRustCrate (profileName: rec {
    name = "cgmath";
    version = "0.18.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1a98d30140e3296250832bbaaff83b27dcd6fa3cc70fb6f1f3e5c9c0023b5317"; };
    dependencies = {
      approx = rustPackages."registry+https://github.com/rust-lang/crates.io-index".approx."0.4.0" { inherit profileName; };
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.15" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".clang-sys."1.3.1" = overridableMkRustCrate (profileName: rec {
    name = "clang-sys";
    version = "1.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4cc00842eed744b858222c4c9faf7243aafc6d33f92f96935263ef4d8a41ce21"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "clang_3_5")
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "clang_3_6")
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "clang_3_7")
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "clang_3_8")
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "clang_3_9")
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "clang_4_0")
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "clang_5_0")
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "clang_6_0")
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "libloading")
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "runtime")
    ];
    dependencies = {
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "glob" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".glob."0.3.0" { inherit profileName; };
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.125" { inherit profileName; };
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "libloading" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libloading."0.7.3" { inherit profileName; };
    };
    buildDependencies = {
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "glob" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".glob."0.3.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".clap."2.34.0" = overridableMkRustCrate (profileName: rec {
    name = "clap";
    version = "2.34.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a0610544180c38b88101fecf2dd634b174a62eef6946f84dfc6a7127512b381c"; };
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      textwrap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".textwrap."0.11.0" { inherit profileName; };
      unicode_width = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-width."0.1.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".clap."3.1.17" = overridableMkRustCrate (profileName: rec {
    name = "clap";
    version = "3.1.17";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "47582c09be7c8b32c0ab3a6181825ababb713fde6fff20fc573a3870dd45c6a0"; };
    features = builtins.concatLists [
      [ "atty" ]
      [ "clap_derive" ]
      [ "color" ]
      [ "derive" ]
      [ "lazy_static" ]
      [ "std" ]
      [ "strsim" ]
      [ "suggestions" ]
      [ "termcolor" ]
    ];
    dependencies = {
      atty = rustPackages."registry+https://github.com/rust-lang/crates.io-index".atty."0.2.14" { inherit profileName; };
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      clap_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".clap_derive."3.1.7" { profileName = "__noProfile"; };
      clap_lex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".clap_lex."0.2.0" { inherit profileName; };
      indexmap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."1.8.1" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      strsim = rustPackages."registry+https://github.com/rust-lang/crates.io-index".strsim."0.10.0" { inherit profileName; };
      termcolor = rustPackages."registry+https://github.com/rust-lang/crates.io-index".termcolor."1.1.3" { inherit profileName; };
      textwrap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".textwrap."0.15.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".clap_derive."3.1.7" = overridableMkRustCrate (profileName: rec {
    name = "clap_derive";
    version = "3.1.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a3aab4734e083b809aaf5794e14e756d1c798d2c69c7f7de7a09a2f5214993c1"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      heck = rustPackages."registry+https://github.com/rust-lang/crates.io-index".heck."0.4.0" { inherit profileName; };
      proc_macro_error = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro-error."1.0.4" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.38" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.18" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.92" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".clap_lex."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "clap_lex";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a37c35f1112dad5e6e0b1adaff798507497a18fceeb30cceb3bae7d1427b9213"; };
    dependencies = {
      os_str_bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".os_str_bytes."6.0.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".claxon."0.4.3" = overridableMkRustCrate (profileName: rec {
    name = "claxon";
    version = "0.4.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4bfbf56724aa9eca8afa4fcfadeb479e722935bb2a0900c2d37e0cc477af0688"; };
  });
  
  "unknown".cli_utils."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "cli_utils";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/cli_utils");
    dependencies = {
      bumpalo = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bumpalo."3.9.1" { inherit profileName; };
      const_format = rustPackages."registry+https://github.com/rust-lang/crates.io-index".const_format."0.2.23" { inherit profileName; };
      criterion = rustPackages."git+https://github.com/Anton-4/criterion.rs".criterion."0.3.5" { inherit profileName; };
      ${ if hostPlatform.isUnix then "rlimit" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rlimit."0.6.2" { inherit profileName; };
      roc_cli = rustPackages."unknown".roc_cli."0.1.0" { inherit profileName; };
      roc_collections = rustPackages."unknown".roc_collections."0.1.0" { inherit profileName; };
      roc_load = rustPackages."unknown".roc_load."0.1.0" { inherit profileName; };
      roc_module = rustPackages."unknown".roc_module."0.1.0" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.137" { inherit profileName; };
      serde_xml_rs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde-xml-rs."0.5.1" { inherit profileName; };
      strip_ansi_escapes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".strip-ansi-escapes."0.1.1" { inherit profileName; };
      tempfile = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tempfile."3.3.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".clipboard-win."3.1.1" = overridableMkRustCrate (profileName: rec {
    name = "clipboard-win";
    version = "3.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9fdf5e01086b6be750428ba4a40619f847eb2e95756eee84b18e06e5f0b50342"; };
    dependencies = {
      lazy_bytes_cast = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy-bytes-cast."5.0.1" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".clipboard-win."4.4.1" = overridableMkRustCrate (profileName: rec {
    name = "clipboard-win";
    version = "4.4.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2f3e1238132dc01f081e1cbb9dace14e5ef4c3a51ee244bd982275fb514605db"; };
    dependencies = {
      ${ if hostPlatform.isWindows then "error_code" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".error-code."2.3.1" { inherit profileName; };
      ${ if hostPlatform.isWindows then "str_buf" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".str-buf."1.0.5" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cocoa."0.24.0" = overridableMkRustCrate (profileName: rec {
    name = "cocoa";
    version = "0.24.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6f63902e9223530efb4e26ccd0cf55ec30d592d3b42e21a28defc42a9586e832"; };
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      block = rustPackages."registry+https://github.com/rust-lang/crates.io-index".block."0.1.6" { inherit profileName; };
      cocoa_foundation = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cocoa-foundation."0.1.0" { inherit profileName; };
      core_foundation = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation."0.9.3" { inherit profileName; };
      core_graphics = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-graphics."0.22.3" { inherit profileName; };
      foreign_types = rustPackages."registry+https://github.com/rust-lang/crates.io-index".foreign-types."0.3.2" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.125" { inherit profileName; };
      objc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc."0.2.7" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cocoa-foundation."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "cocoa-foundation";
    version = "0.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7ade49b65d560ca58c403a479bb396592b155c0185eada742ee323d1d68d6318"; };
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      block = rustPackages."registry+https://github.com/rust-lang/crates.io-index".block."0.1.6" { inherit profileName; };
      core_foundation = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation."0.9.3" { inherit profileName; };
      core_graphics_types = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-graphics-types."0.1.1" { inherit profileName; };
      foreign_types = rustPackages."registry+https://github.com/rust-lang/crates.io-index".foreign-types."0.3.2" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.125" { inherit profileName; };
      objc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc."0.2.7" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".codespan-reporting."0.11.1" = overridableMkRustCrate (profileName: rec {
    name = "codespan-reporting";
    version = "0.11.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3538270d33cc669650c4b093848450d380def10c331d38c768e34cac80576e6e"; };
    dependencies = {
      termcolor = rustPackages."registry+https://github.com/rust-lang/crates.io-index".termcolor."1.1.3" { inherit profileName; };
      unicode_width = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-width."0.1.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".colored."2.0.0" = overridableMkRustCrate (profileName: rec {
    name = "colored";
    version = "2.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b3616f750b84d8f0de8a58bda93e08e2a81ad3f523089b05f1dffecab48c6cbd"; };
    dependencies = {
      atty = rustPackages."registry+https://github.com/rust-lang/crates.io-index".atty."0.2.14" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".combine."4.6.4" = overridableMkRustCrate (profileName: rec {
    name = "combine";
    version = "4.6.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2a604e93b79d1808327a6fca85a6f2d69de66461e7620f5a4cbf5fb4d1d7c948"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "alloc")
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "bytes")
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "default")
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "bytes" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.1.0" { inherit profileName; };
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "memchr" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.5.0" { inherit profileName; };
    };
  });
  
  "git+https://github.com/rust-cli/confy".confy."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "confy";
    version = "0.4.0";
    registry = "git+https://github.com/rust-cli/confy";
    src = fetchCrateGit {
      url = https://github.com/rust-cli/confy;
      name = "confy";
      version = "0.4.0";
      rev = "642822413139ce38a96b916190e8c7fd5b88e814";};
    features = builtins.concatLists [
      [ "serde_yaml" ]
      [ "yaml_conf" ]
    ];
    dependencies = {
      directories_next = rustPackages."registry+https://github.com/rust-lang/crates.io-index".directories-next."2.0.0" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.137" { inherit profileName; };
      serde_yaml = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_yaml."0.8.24" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.31" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".console_error_panic_hook."0.1.7" = overridableMkRustCrate (profileName: rec {
    name = "console_error_panic_hook";
    version = "0.1.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a06aeb73f470f66dcdbf7223caeebb85984942f22f1adb2a088cf9668146bbbc"; };
    dependencies = {
      ${ if rootFeatures' ? "roc_repl_wasm/console_error_panic_hook" then "cfg_if" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      ${ if rootFeatures' ? "roc_repl_wasm/console_error_panic_hook" then "wasm_bindgen" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.80" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".const_fn."0.4.9" = overridableMkRustCrate (profileName: rec {
    name = "const_fn";
    version = "0.4.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fbdcdcb6d86f71c5e97409ad45898af11cbc995b4ee8112d59095a28d376c935"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".const_format."0.2.23" = overridableMkRustCrate (profileName: rec {
    name = "const_format";
    version = "0.2.23";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0936ffe6d0c8d6a51b3b0a73b2acbe925d786f346cf45bfddc8341d79fb7dc8a"; };
    features = builtins.concatLists [
      [ "const_generics" ]
      [ "default" ]
    ];
    dependencies = {
      const_format_proc_macros = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".const_format_proc_macros."0.2.22" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".const_format_proc_macros."0.2.22" = overridableMkRustCrate (profileName: rec {
    name = "const_format_proc_macros";
    version = "0.2.22";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ef196d5d972878a48da7decb7686eded338b4858fbabeed513d63a7c98b2b82d"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.38" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.18" { inherit profileName; };
      unicode_xid = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-xid."0.2.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".copyless."0.1.5" = overridableMkRustCrate (profileName: rec {
    name = "copyless";
    version = "0.1.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a2df960f5d869b2dd8532793fde43eb5427cceb126c929747a26823ab0eeb536"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".copypasta."0.7.1" = overridableMkRustCrate (profileName: rec {
    name = "copypasta";
    version = "0.7.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4423d79fed83ebd9ab81ec21fa97144300a961782158287dc9bf7eddac37ff0b"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "smithay-clipboard" ]
      [ "wayland" ]
      [ "x11" ]
      [ "x11-clipboard" ]
    ];
    dependencies = {
      ${ if hostPlatform.isWindows then "clipboard_win" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".clipboard-win."3.1.1" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "darwin" then "objc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc."0.2.7" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "darwin" then "objc_foundation" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc-foundation."0.1.1" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "darwin" then "objc_id" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc_id."0.1.1" { inherit profileName; };
      ${ if hostPlatform.isUnix && !(hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "android" || hostPlatform.parsed.kernel.name == "ios" || hostPlatform.parsed.kernel.name == "emscripten") then "smithay_clipboard" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smithay-clipboard."0.6.5" { inherit profileName; };
      ${ if hostPlatform.isUnix && !(hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "android" || hostPlatform.parsed.kernel.name == "ios" || hostPlatform.parsed.kernel.name == "emscripten") then "x11_clipboard" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".x11-clipboard."0.5.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".core-foundation."0.7.0" = overridableMkRustCrate (profileName: rec {
    name = "core-foundation";
    version = "0.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "57d24c7a13c43e870e37c1556b74555437870a04514f7685f5b354e090567171"; };
    dependencies = {
      core_foundation_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.7.0" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.125" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".core-foundation."0.9.3" = overridableMkRustCrate (profileName: rec {
    name = "core-foundation";
    version = "0.9.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "194a7a9e6de53fa55116934067c844d9d749312f75c6f6d0980e8c252f8c2146"; };
    dependencies = {
      core_foundation_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.8.3" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.125" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.7.0" = overridableMkRustCrate (profileName: rec {
    name = "core-foundation-sys";
    version = "0.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b3a71ab494c0b5b860bdc8407ae08978052417070c2ced38573a9157ad75b8ac"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.8.3" = overridableMkRustCrate (profileName: rec {
    name = "core-foundation-sys";
    version = "0.8.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5827cebf4670468b8772dd191856768aedcb1b0278a04f989f7766351917b9dc"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".core-graphics."0.19.2" = overridableMkRustCrate (profileName: rec {
    name = "core-graphics";
    version = "0.19.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b3889374e6ea6ab25dba90bb5d96202f61108058361f6dc72e8b03e6f8bbe923"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      core_foundation = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation."0.7.0" { inherit profileName; };
      foreign_types = rustPackages."registry+https://github.com/rust-lang/crates.io-index".foreign-types."0.3.2" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.125" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".core-graphics."0.22.3" = overridableMkRustCrate (profileName: rec {
    name = "core-graphics";
    version = "0.22.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2581bbab3b8ffc6fcbd550bf46c355135d16e9ff2a6ea032ad6b9bf1d7efe4fb"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      core_foundation = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation."0.9.3" { inherit profileName; };
      core_graphics_types = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-graphics-types."0.1.1" { inherit profileName; };
      foreign_types = rustPackages."registry+https://github.com/rust-lang/crates.io-index".foreign-types."0.3.2" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.125" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".core-graphics-types."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "core-graphics-types";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3a68b68b3446082644c91ac778bf50cd4104bfb002b5a6a7c44cca5a2c70788b"; };
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      core_foundation = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation."0.9.3" { inherit profileName; };
      foreign_types = rustPackages."registry+https://github.com/rust-lang/crates.io-index".foreign-types."0.3.2" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.125" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".core-video-sys."0.1.4" = overridableMkRustCrate (profileName: rec {
    name = "core-video-sys";
    version = "0.1.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "34ecad23610ad9757664d644e369246edde1803fcb43ed72876565098a5d3828"; };
    features = builtins.concatLists [
      [ "core-graphics" ]
      [ "display_link" ]
      [ "opengl" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."0.1.10" { inherit profileName; };
      core_foundation_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.7.0" { inherit profileName; };
      core_graphics = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-graphics."0.19.2" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.125" { inherit profileName; };
      objc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc."0.2.7" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".coreaudio-rs."0.10.0" = overridableMkRustCrate (profileName: rec {
    name = "coreaudio-rs";
    version = "0.10.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "11894b20ebfe1ff903cbdc52259693389eea03b94918a2def2c30c3bf227ad88"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "audio_toolbox")
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "audio_unit")
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "core_audio")
    ];
    dependencies = {
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "bitflags" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "coreaudio_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".coreaudio-sys."0.2.10" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".coreaudio-sys."0.2.10" = overridableMkRustCrate (profileName: rec {
    name = "coreaudio-sys";
    version = "0.2.10";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3dff444d80630d7073077d38d40b4501fd518bd2b922c2a55edcc8b0f7be57e6"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "audio_toolbox")
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "audio_unit")
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "core_audio")
    ];
    buildDependencies = {
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "bindgen" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".bindgen."0.59.2" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cpal."0.13.5" = overridableMkRustCrate (profileName: rec {
    name = "cpal";
    version = "0.13.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "74117836a5124f3629e4b474eed03e479abaf98988b4bb317e29f08cfe0e4116"; };
    dependencies = {
      ${ if (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") && (hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "freebsd") then "alsa" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".alsa."0.6.0" { inherit profileName; };
      ${ if (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") && (hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios") then "core_foundation_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.8.3" { inherit profileName; };
      ${ if (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") && (hostPlatform.parsed.kernel.name == "ios" || hostPlatform.parsed.kernel.name == "darwin") then "coreaudio" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".coreaudio-rs."0.10.0" { inherit profileName; };
      ${ if (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") && hostPlatform.parsed.kernel.name == "android" then "jni" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jni."0.19.0" { inherit profileName; };
      ${ if (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") && hostPlatform.parsed.cpu.name == "wasm32" && hostPlatform.parsed.kernel.name == "unknown" then "js_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.57" { inherit profileName; };
      ${ if (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") && hostPlatform.parsed.kernel.name == "windows" then "lazy_static" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      ${ if (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") && (hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "freebsd") then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.125" { inherit profileName; };
      ${ if (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") && (hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios") then "mach" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".mach."0.3.2" { inherit profileName; };
      ${ if (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") && hostPlatform.parsed.kernel.name == "android" then "ndk" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk."0.6.0" { inherit profileName; };
      ${ if (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") && hostPlatform.parsed.kernel.name == "android" then "ndk_glue" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk-glue."0.6.2" { inherit profileName; };
      ${ if (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") && (hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "freebsd") then "nix" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nix."0.23.1" { inherit profileName; };
      ${ if (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") && hostPlatform.parsed.kernel.name == "android" then "oboe" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".oboe."0.4.6" { inherit profileName; };
      ${ if (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") && (hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "windows") then "parking_lot" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
      ${ if (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") && hostPlatform.parsed.kernel.name == "emscripten" then "stdweb" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".stdweb."0.1.3" { inherit profileName; };
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "thiserror" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.31" { inherit profileName; };
      ${ if (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") && hostPlatform.parsed.cpu.name == "wasm32" && hostPlatform.parsed.kernel.name == "unknown" then "web_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.57" { inherit profileName; };
      ${ if (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") && hostPlatform.parsed.kernel.name == "windows" then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cpufeatures."0.2.2" = overridableMkRustCrate (profileName: rec {
    name = "cpufeatures";
    version = "0.2.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "59a6001667ab124aebae2a495118e11d30984c3a653e99d86d58971708cf5e4b"; };
    dependencies = {
      ${ if hostPlatform.config == "aarch64-apple-darwin" || hostPlatform.config == "aarch64-linux-android" || hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.kernel.name == "linux" then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.125" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cranelift-bforest."0.76.0" = overridableMkRustCrate (profileName: rec {
    name = "cranelift-bforest";
    version = "0.76.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7e6bea67967505247f54fa2c85cf4f6e0e31c4e5692c9b70e4ae58e339067333"; };
    dependencies = {
      cranelift_entity = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cranelift-entity."0.76.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cranelift-codegen."0.76.0" = overridableMkRustCrate (profileName: rec {
    name = "cranelift-codegen";
    version = "0.76.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "48194035d2752bdd5bdae429e3ab88676e95f52a2b1355a5d4e809f9e39b1d74"; };
    features = builtins.concatLists [
      [ "arm64" ]
      [ "gimli" ]
      [ "std" ]
      [ "unwind" ]
      [ "x86" ]
    ];
    dependencies = {
      cranelift_bforest = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cranelift-bforest."0.76.0" { inherit profileName; };
      cranelift_codegen_shared = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cranelift-codegen-shared."0.76.0" { inherit profileName; };
      cranelift_entity = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cranelift-entity."0.76.0" { inherit profileName; };
      gimli = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gimli."0.25.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.17" { inherit profileName; };
      regalloc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regalloc."0.0.31" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.8.0" { inherit profileName; };
      target_lexicon = rustPackages."registry+https://github.com/rust-lang/crates.io-index".target-lexicon."0.12.3" { inherit profileName; };
    };
    buildDependencies = {
      cranelift_codegen_meta = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cranelift-codegen-meta."0.76.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cranelift-codegen-meta."0.76.0" = overridableMkRustCrate (profileName: rec {
    name = "cranelift-codegen-meta";
    version = "0.76.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "976efb22fcab4f2cd6bd4e9913764616a54d895c1a23530128d04e03633c555f"; };
    dependencies = {
      cranelift_codegen_shared = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cranelift-codegen-shared."0.76.0" { inherit profileName; };
      cranelift_entity = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cranelift-entity."0.76.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cranelift-codegen-shared."0.76.0" = overridableMkRustCrate (profileName: rec {
    name = "cranelift-codegen-shared";
    version = "0.76.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9dabb5fe66e04d4652e434195b45ae65b5c8172d520247b8f66d8df42b2b45dc"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cranelift-entity."0.76.0" = overridableMkRustCrate (profileName: rec {
    name = "cranelift-entity";
    version = "0.76.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3329733e4d4b8e91c809efcaa4faee80bf66f20164e3dd16d707346bd3494799"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cranelift-frontend."0.76.0" = overridableMkRustCrate (profileName: rec {
    name = "cranelift-frontend";
    version = "0.76.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "279afcc0d3e651b773f94837c3d581177b348c8d69e928104b2e9fccb226f921"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      cranelift_codegen = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cranelift-codegen."0.76.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.17" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.8.0" { inherit profileName; };
      target_lexicon = rustPackages."registry+https://github.com/rust-lang/crates.io-index".target-lexicon."0.12.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crc32fast."1.3.2" = overridableMkRustCrate (profileName: rec {
    name = "crc32fast";
    version = "1.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b540bd8bc810d3885c6ea91e2018302f68baba2129ab3e88f32389ee9370880d"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".criterion."0.3.5" = overridableMkRustCrate (profileName: rec {
    name = "criterion";
    version = "0.3.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1604dafd25fba2fe2d5895a9da139f8dc9b319a5fe5354ca137cbbce4e178d10"; };
    features = builtins.concatLists [
      [ "cargo_bench_support" ]
      [ "default" ]
      [ "html_reports" ]
    ];
    dependencies = {
      atty = rustPackages."registry+https://github.com/rust-lang/crates.io-index".atty."0.2.14" { inherit profileName; };
      cast = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cast."0.2.7" { inherit profileName; };
      clap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".clap."2.34.0" { inherit profileName; };
      criterion_plot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".criterion-plot."0.4.4" { inherit profileName; };
      csv = rustPackages."registry+https://github.com/rust-lang/crates.io-index".csv."1.1.6" { inherit profileName; };
      itertools = rustPackages."registry+https://github.com/rust-lang/crates.io-index".itertools."0.10.3" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.15" { inherit profileName; };
      oorandom = rustPackages."registry+https://github.com/rust-lang/crates.io-index".oorandom."11.1.3" { inherit profileName; };
      plotters = rustPackages."registry+https://github.com/rust-lang/crates.io-index".plotters."0.3.1" { inherit profileName; };
      rayon = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rayon."1.5.2" { inherit profileName; };
      regex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.5.5" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.137" { inherit profileName; };
      serde_cbor = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_cbor."0.11.2" { inherit profileName; };
      serde_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_derive."1.0.137" { profileName = "__noProfile"; };
      serde_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.81" { inherit profileName; };
      tinytemplate = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tinytemplate."1.2.1" { inherit profileName; };
      walkdir = rustPackages."registry+https://github.com/rust-lang/crates.io-index".walkdir."2.3.2" { inherit profileName; };
    };
  });
  
  "git+https://github.com/Anton-4/criterion.rs".criterion."0.3.5" = overridableMkRustCrate (profileName: rec {
    name = "criterion";
    version = "0.3.5";
    registry = "git+https://github.com/Anton-4/criterion.rs";
    src = fetchCrateGit {
      url = https://github.com/Anton-4/criterion.rs;
      name = "criterion";
      version = "0.3.5";
      rev = "3e46ad2b234e36928fb5234d36cf53b5837cbb87";};
    features = builtins.concatLists [
      [ "cargo_bench_support" ]
      [ "default" ]
    ];
    dependencies = {
      atty = rustPackages."registry+https://github.com/rust-lang/crates.io-index".atty."0.2.14" { inherit profileName; };
      cast = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cast."0.2.7" { inherit profileName; };
      clap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".clap."2.34.0" { inherit profileName; };
      criterion_plot = rustPackages."git+https://github.com/Anton-4/criterion.rs".criterion-plot."0.4.3" { inherit profileName; };
      csv = rustPackages."registry+https://github.com/rust-lang/crates.io-index".csv."1.1.6" { inherit profileName; };
      itertools = rustPackages."registry+https://github.com/rust-lang/crates.io-index".itertools."0.10.3" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.15" { inherit profileName; };
      oorandom = rustPackages."registry+https://github.com/rust-lang/crates.io-index".oorandom."11.1.3" { inherit profileName; };
      plotters = rustPackages."git+https://github.com/Anton-4/plotters".plotters."0.3.1" { inherit profileName; };
      rayon = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rayon."1.5.2" { inherit profileName; };
      regex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.5.5" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.137" { inherit profileName; };
      serde_cbor = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_cbor."0.11.2" { inherit profileName; };
      serde_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_derive."1.0.137" { profileName = "__noProfile"; };
      serde_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.81" { inherit profileName; };
      tinytemplate = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tinytemplate."1.2.1" { inherit profileName; };
      walkdir = rustPackages."registry+https://github.com/rust-lang/crates.io-index".walkdir."2.3.2" { inherit profileName; };
    };
  });
  
  "git+https://github.com/Anton-4/criterion.rs".criterion-plot."0.4.3" = overridableMkRustCrate (profileName: rec {
    name = "criterion-plot";
    version = "0.4.3";
    registry = "git+https://github.com/Anton-4/criterion.rs";
    src = fetchCrateGit {
      url = https://github.com/Anton-4/criterion.rs;
      name = "criterion-plot";
      version = "0.4.3";
      rev = "3e46ad2b234e36928fb5234d36cf53b5837cbb87";};
    dependencies = {
      cast = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cast."0.2.7" { inherit profileName; };
      itertools = rustPackages."registry+https://github.com/rust-lang/crates.io-index".itertools."0.9.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".criterion-plot."0.4.4" = overridableMkRustCrate (profileName: rec {
    name = "criterion-plot";
    version = "0.4.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d00996de9f2f7559f7f4dc286073197f83e92256a59ed395f9aac01fe717da57"; };
    dependencies = {
      cast = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cast."0.2.7" { inherit profileName; };
      itertools = rustPackages."registry+https://github.com/rust-lang/crates.io-index".itertools."0.10.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crossbeam."0.8.1" = overridableMkRustCrate (profileName: rec {
    name = "crossbeam";
    version = "0.8.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4ae5588f6b3c3cb05239e90bd110f257254aecd01e4635400391aeae07497845"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "crossbeam-channel" ]
      [ "crossbeam-deque" ]
      [ "crossbeam-epoch" ]
      [ "crossbeam-queue" ]
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      crossbeam_channel = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-channel."0.5.4" { inherit profileName; };
      crossbeam_deque = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-deque."0.8.1" { inherit profileName; };
      crossbeam_epoch = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-epoch."0.9.8" { inherit profileName; };
      crossbeam_queue = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-queue."0.3.5" { inherit profileName; };
      crossbeam_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.8" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crossbeam-channel."0.5.4" = overridableMkRustCrate (profileName: rec {
    name = "crossbeam-channel";
    version = "0.5.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5aaa7bd5fb665c6864b5f963dd9097905c54125909c7aa94c9e18507cdbe6c53"; };
    features = builtins.concatLists [
      [ "crossbeam-utils" ]
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      crossbeam_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.8" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crossbeam-deque."0.8.1" = overridableMkRustCrate (profileName: rec {
    name = "crossbeam-deque";
    version = "0.8.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6455c0ca19f0d2fbf751b908d5c55c1f5cbc65e03c4225427254b46890bdde1e"; };
    features = builtins.concatLists [
      [ "crossbeam-epoch" ]
      [ "crossbeam-utils" ]
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      crossbeam_epoch = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-epoch."0.9.8" { inherit profileName; };
      crossbeam_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.8" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crossbeam-epoch."0.9.8" = overridableMkRustCrate (profileName: rec {
    name = "crossbeam-epoch";
    version = "0.9.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1145cf131a2c6ba0615079ab6a638f7e1973ac9c2634fcbeaaad6114246efe8c"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "lazy_static" ]
      [ "std" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      crossbeam_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.8" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      memoffset = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memoffset."0.6.5" { inherit profileName; };
      scopeguard = rustPackages."registry+https://github.com/rust-lang/crates.io-index".scopeguard."1.1.0" { inherit profileName; };
    };
    buildDependencies = {
      autocfg = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crossbeam-queue."0.3.5" = overridableMkRustCrate (profileName: rec {
    name = "crossbeam-queue";
    version = "0.3.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1f25d8400f4a7a5778f0e4e52384a48cbd9b5c495d110786187fc750075277a2"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      crossbeam_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.8" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.8" = overridableMkRustCrate (profileName: rec {
    name = "crossbeam-utils";
    version = "0.8.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0bf124c720b7686e3c2663cf54062ab0f68a88af2fb6a030e87e30bf721fcb38"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "lazy_static" ]
      [ "std" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".csv."1.1.6" = overridableMkRustCrate (profileName: rec {
    name = "csv";
    version = "1.1.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "22813a6dc45b335f9bade10bf7271dc477e81113e89eb251a0bc2a8a81c536e1"; };
    dependencies = {
      bstr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bstr."0.2.17" { inherit profileName; };
      csv_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".csv-core."0.1.10" { inherit profileName; };
      itoa = rustPackages."registry+https://github.com/rust-lang/crates.io-index".itoa."0.4.8" { inherit profileName; };
      ryu = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ryu."1.0.9" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.137" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".csv-core."0.1.10" = overridableMkRustCrate (profileName: rec {
    name = "csv-core";
    version = "0.1.10";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2b2466559f260f48ad25fe6317b3c8dac77b5bdb5763ac7d9d6103530663bc90"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      memchr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.5.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ctor."0.1.22" = overridableMkRustCrate (profileName: rec {
    name = "ctor";
    version = "0.1.22";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f877be4f7c9f246b183111634f75baa039715e3f46ce860677d3b19a69fb229c"; };
    dependencies = {
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.18" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.92" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cty."0.2.2" = overridableMkRustCrate (profileName: rec {
    name = "cty";
    version = "0.2.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b365fabc795046672053e29c954733ec3b05e4be654ab130fe8f1f94d7051f35"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".d3d12."0.4.1" = overridableMkRustCrate (profileName: rec {
    name = "d3d12";
    version = "0.4.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2daefd788d1e96e0a9d66dee4b828b883509bc3ea9ce30665f04c3246372690c"; };
    features = builtins.concatLists [
      [ "libloading" ]
    ];
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      libloading = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libloading."0.7.3" { inherit profileName; };
      winapi = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".darling."0.10.2" = overridableMkRustCrate (profileName: rec {
    name = "darling";
    version = "0.10.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0d706e75d87e35569db781a9b5e2416cff1236a47ed380831f959382ccd5f858"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "suggestions" ]
    ];
    dependencies = {
      darling_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".darling_core."0.10.2" { inherit profileName; };
      darling_macro = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".darling_macro."0.10.2" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".darling."0.13.4" = overridableMkRustCrate (profileName: rec {
    name = "darling";
    version = "0.13.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a01d95850c592940db9b8194bc39f4bc0e89dee5c4265e4b1807c34a9aba453c"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "default")
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "suggestions")
    ];
    dependencies = {
      darling_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".darling_core."0.13.4" { inherit profileName; };
      darling_macro = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".darling_macro."0.13.4" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".darling_core."0.10.2" = overridableMkRustCrate (profileName: rec {
    name = "darling_core";
    version = "0.10.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f0c960ae2da4de88a91b2d920c2a7233b400bc33cb28453a2987822d8392519b"; };
    features = builtins.concatLists [
      [ "strsim" ]
      [ "suggestions" ]
    ];
    dependencies = {
      fnv = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" { inherit profileName; };
      ident_case = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ident_case."1.0.1" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.38" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.18" { inherit profileName; };
      strsim = rustPackages."registry+https://github.com/rust-lang/crates.io-index".strsim."0.9.3" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.92" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".darling_core."0.13.4" = overridableMkRustCrate (profileName: rec {
    name = "darling_core";
    version = "0.13.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "859d65a907b6852c9361e3185c862aae7fafd2887876799fa55f5f99dc40d610"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "strsim")
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "suggestions")
    ];
    dependencies = {
      fnv = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" { inherit profileName; };
      ident_case = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ident_case."1.0.1" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.38" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.18" { inherit profileName; };
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "strsim" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".strsim."0.10.0" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.92" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".darling_macro."0.10.2" = overridableMkRustCrate (profileName: rec {
    name = "darling_macro";
    version = "0.10.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d9b5a2f4ac4969822c62224815d069952656cadc7084fdca9751e6d959189b72"; };
    dependencies = {
      darling_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".darling_core."0.10.2" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.18" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.92" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".darling_macro."0.13.4" = overridableMkRustCrate (profileName: rec {
    name = "darling_macro";
    version = "0.13.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9c972679f83bdf9c42bd905396b6c3588a843a17f0f16dfcfa3e2c5d57441835"; };
    dependencies = {
      darling_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".darling_core."0.13.4" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.18" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.92" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".diff."0.1.12" = overridableMkRustCrate (profileName: rec {
    name = "diff";
    version = "0.1.12";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0e25ea47919b1560c4e3b7fe0aaab9becf5b84a10325ddf7db0f0ba5e1026499"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".digest."0.8.1" = overridableMkRustCrate (profileName: rec {
    name = "digest";
    version = "0.8.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f3d0c8c8752312f9713efd397ff63acb9f85585afbf179282e720e7704954dd5"; };
    dependencies = {
      generic_array = rustPackages."registry+https://github.com/rust-lang/crates.io-index".generic-array."0.12.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".digest."0.9.0" = overridableMkRustCrate (profileName: rec {
    name = "digest";
    version = "0.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d3dd60d1080a57a05ab032377049e0591415d2b31afd7028356dbf3cc6dcb066"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "std" ]
    ];
    dependencies = {
      generic_array = rustPackages."registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.5" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".directories-next."2.0.0" = overridableMkRustCrate (profileName: rec {
    name = "directories-next";
    version = "2.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "339ee130d97a610ea5a5872d2bbb130fdf68884ff09d3028b81bec8a1ac23bbc"; };
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      dirs_sys_next = rustPackages."registry+https://github.com/rust-lang/crates.io-index".dirs-sys-next."0.1.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".dirs."4.0.0" = overridableMkRustCrate (profileName: rec {
    name = "dirs";
    version = "4.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ca3aa72a6f96ea37bbc5aa912f6788242832f75369bdfdadcb0e38423f100059"; };
    dependencies = {
      dirs_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".dirs-sys."0.3.7" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".dirs-next."2.0.0" = overridableMkRustCrate (profileName: rec {
    name = "dirs-next";
    version = "2.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b98cf8ebf19c3d1b223e151f99a4f9f0690dca41414773390fc824184ac833e1"; };
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      dirs_sys_next = rustPackages."registry+https://github.com/rust-lang/crates.io-index".dirs-sys-next."0.1.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".dirs-sys."0.3.7" = overridableMkRustCrate (profileName: rec {
    name = "dirs-sys";
    version = "0.3.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1b1d1d91c932ef41c0f2663aa8b0ca0342d444d842c06914aa0a7e352d0bada6"; };
    dependencies = {
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.125" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "redox" then "redox_users" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".redox_users."0.4.3" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".dirs-sys-next."0.1.2" = overridableMkRustCrate (profileName: rec {
    name = "dirs-sys-next";
    version = "0.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4ebda144c4fe02d1f7ea1a7d9641b6fc6b580adcfa024ae48797ecdeb6825b4d"; };
    dependencies = {
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.125" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "redox" then "redox_users" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".redox_users."0.4.3" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".discard."1.0.4" = overridableMkRustCrate (profileName: rec {
    name = "discard";
    version = "1.0.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "212d0f5754cb6769937f4501cc0e67f4f4483c8d2c3e1e922ee9edbe4ab4c7c0"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".dispatch."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "dispatch";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bd0c93bb4b0c6d9b77f4435b0ae98c24d17f1c45b2ff844c6151a07256ca923b"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".distance."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "distance";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6d9d8664cf849d7d0f3114a3a387d2f5e4303176d746d5a951aaddc66dfe9240"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".dlib."0.4.2" = overridableMkRustCrate (profileName: rec {
    name = "dlib";
    version = "0.4.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b11f15d1e3268f140f68d390637d5e76d849782d971ae7063e0da69fe9709a76"; };
    dependencies = {
      libloading = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libloading."0.6.7" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".dlib."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "dlib";
    version = "0.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ac1b7517328c04c2aa68422fc60a41b92208182142ed04a25879c26c8f878794"; };
    dependencies = {
      libloading = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libloading."0.7.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".doc-comment."0.3.3" = overridableMkRustCrate (profileName: rec {
    name = "doc-comment";
    version = "0.3.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fea41bba32d969b513997752735605054bc0dfa92b4c56bf1189f2e174be7a10"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".downcast-rs."1.2.0" = overridableMkRustCrate (profileName: rec {
    name = "downcast-rs";
    version = "1.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9ea835d29036a4087793836fa931b08837ad5e957da9e23886b29586fb9b6650"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".dunce."1.0.2" = overridableMkRustCrate (profileName: rec {
    name = "dunce";
    version = "1.0.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "453440c271cf5577fd2a40e4942540cb7d0d2f85e27c8d07dd0023c925a67541"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".dynasm."1.2.3" = overridableMkRustCrate (profileName: rec {
    name = "dynasm";
    version = "1.2.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "add9a102807b524ec050363f09e06f1504214b0e1c7797f64261c891022dce8b"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      byteorder = rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.4.3" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      proc_macro_error = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro-error."1.0.4" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.38" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.18" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.92" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".dynasmrt."1.2.3" = overridableMkRustCrate (profileName: rec {
    name = "dynasmrt";
    version = "1.2.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "64fba5a42bd76a17cad4bfa00de168ee1cbfa06a5e8ce992ae880218c05641a9"; };
    dependencies = {
      byteorder = rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.4.3" { inherit profileName; };
      dynasm = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".dynasm."1.2.3" { profileName = "__noProfile"; };
      memmap2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memmap2."0.5.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".either."1.6.1" = overridableMkRustCrate (profileName: rec {
    name = "either";
    version = "1.6.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e78d4f1cc4ae33bbfc157ed5d5a5ef3bc29227303d595861deb238fcec4e9457"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "use_std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".encode_unicode."0.3.6" = overridableMkRustCrate (profileName: rec {
    name = "encode_unicode";
    version = "0.3.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a357d28ed41a50f9c765dbfe56cbc04a64e53e5fc58ba79fbc34c10ef3df831f"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".endian-type."0.1.2" = overridableMkRustCrate (profileName: rec {
    name = "endian-type";
    version = "0.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c34f04666d835ff5d62e058c3995147c06f42fe86ff053337632bca83e42702d"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".enum-iterator."0.7.0" = overridableMkRustCrate (profileName: rec {
    name = "enum-iterator";
    version = "0.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4eeac5c5edb79e4e39fe8439ef35207780a11f69c52cbe424ce3dfad4cb78de6"; };
    dependencies = {
      enum_iterator_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".enum-iterator-derive."0.7.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".enum-iterator-derive."0.7.0" = overridableMkRustCrate (profileName: rec {
    name = "enum-iterator-derive";
    version = "0.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c134c37760b27a871ba422106eedbb8247da973a09e82558bf26d619c882b159"; };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.38" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.18" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.92" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".enumset."1.0.11" = overridableMkRustCrate (profileName: rec {
    name = "enumset";
    version = "1.0.11";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4799cdb24d48f1f8a7a98d06b7fde65a85a2d1e42b25a889f5406aa1fbefe074"; };
    dependencies = {
      enumset_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".enumset_derive."0.6.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".enumset_derive."0.6.0" = overridableMkRustCrate (profileName: rec {
    name = "enumset_derive";
    version = "0.6.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ea83a3fbdc1d999ccfbcbee717eab36f8edf2d71693a23ce0d7cca19e085304c"; };
    dependencies = {
      darling = rustPackages."registry+https://github.com/rust-lang/crates.io-index".darling."0.13.4" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.38" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.18" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.92" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".env_logger."0.8.4" = overridableMkRustCrate (profileName: rec {
    name = "env_logger";
    version = "0.8.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a19187fea3ac7e84da7dacf48de0c45d63c6a76f9490dae389aead16c243fce3"; };
    features = builtins.concatLists [
      [ "regex" ]
    ];
    dependencies = {
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.17" { inherit profileName; };
      regex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.5.5" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".env_logger."0.9.0" = overridableMkRustCrate (profileName: rec {
    name = "env_logger";
    version = "0.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0b2cf0344971ee6c64c31be0d530793fba457d322dfec2810c453d0ef228f9c3"; };
    features = builtins.concatLists [
      [ "atty" ]
      [ "default" ]
      [ "humantime" ]
      [ "regex" ]
      [ "termcolor" ]
    ];
    dependencies = {
      atty = rustPackages."registry+https://github.com/rust-lang/crates.io-index".atty."0.2.14" { inherit profileName; };
      humantime = rustPackages."registry+https://github.com/rust-lang/crates.io-index".humantime."2.1.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.17" { inherit profileName; };
      regex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.5.5" { inherit profileName; };
      termcolor = rustPackages."registry+https://github.com/rust-lang/crates.io-index".termcolor."1.1.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".errno."0.2.8" = overridableMkRustCrate (profileName: rec {
    name = "errno";
    version = "0.2.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f639046355ee4f37944e44f60642c6f3a7efa3cf6b78c78a0d989a8ce6c396a1"; };
    dependencies = {
      ${ if hostPlatform.parsed.kernel.name == "dragonfly" then "errno_dragonfly" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".errno-dragonfly."0.1.2" { inherit profileName; };
      ${ if hostPlatform.isUnix || hostPlatform.parsed.kernel.name == "hermit" || hostPlatform.parsed.kernel.name == "wasi" then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.125" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".errno-dragonfly."0.1.2" = overridableMkRustCrate (profileName: rec {
    name = "errno-dragonfly";
    version = "0.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "aa68f1b12764fab894d2755d2518754e71b4fd80ecfb822714a1206c2aab39bf"; };
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.125" { inherit profileName; };
    };
    buildDependencies = {
      cc = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.73" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".error-code."2.3.1" = overridableMkRustCrate (profileName: rec {
    name = "error-code";
    version = "2.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "64f18991e7bf11e7ffee451b5318b5c1a73c52d0d0ada6e5a3017c8c1ced6a21"; };
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.125" { inherit profileName; };
      str_buf = rustPackages."registry+https://github.com/rust-lang/crates.io-index".str-buf."1.0.5" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fake-simd."0.1.2" = overridableMkRustCrate (profileName: rec {
    name = "fake-simd";
    version = "0.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e88a8acf291dafb59c2d96e8f59828f3838bb1a70398823ade51a84de6a6deed"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fallible-iterator."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "fallible-iterator";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4443176a9f2c162692bd3d352d745ef9413eec5782a80d8fd6f8a1ac692a07f7"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fastrand."1.7.0" = overridableMkRustCrate (profileName: rec {
    name = "fastrand";
    version = "1.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c3fcf0cee53519c866c09b5de1f6c56ff9d647101f81c1964fa632e148896cdf"; };
    dependencies = {
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "instant" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".instant."0.1.12" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fd-lock."3.0.5" = overridableMkRustCrate (profileName: rec {
    name = "fd-lock";
    version = "3.0.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "46e245f4c8ec30c6415c56cb132c07e69e74f1942f6b4a4061da748b49f486ca"; };
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      ${ if hostPlatform.isUnix then "rustix" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustix."0.34.6" { inherit profileName; };
      ${ if hostPlatform.isWindows then "windows_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.30.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".find-crate."0.6.3" = overridableMkRustCrate (profileName: rec {
    name = "find-crate";
    version = "0.6.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "59a98bbaacea1c0eb6a0876280051b892eb73594fd90cf3b20e9c817029c57d2"; };
    dependencies = {
      toml = rustPackages."registry+https://github.com/rust-lang/crates.io-index".toml."0.5.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".flate2."1.0.23" = overridableMkRustCrate (profileName: rec {
    name = "flate2";
    version = "1.0.23";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b39522e96686d38f4bc984b9198e3a0613264abaebaff2c5c918bfa6b6da09af"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "miniz_oxide" ]
      [ "rust_backend" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      crc32fast = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crc32fast."1.3.2" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.125" { inherit profileName; };
      miniz_oxide = rustPackages."registry+https://github.com/rust-lang/crates.io-index".miniz_oxide."0.5.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" = overridableMkRustCrate (profileName: rec {
    name = "fnv";
    version = "1.0.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3f9eec918d3f24069decb9af1554cad7c880e2da24a9afd88aca000531ab82c1"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".foreign-types."0.3.2" = overridableMkRustCrate (profileName: rec {
    name = "foreign-types";
    version = "0.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f6f339eb8adc052cd2ca78910fda869aefa38d22d5cb648e6485e4d3fc06f3b1"; };
    dependencies = {
      foreign_types_shared = rustPackages."registry+https://github.com/rust-lang/crates.io-index".foreign-types-shared."0.1.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".foreign-types-shared."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "foreign-types-shared";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "00b0228411908ca8685dba7fc2cdd70ec9990a6e753e89b6ac91a84c40fbaf4b"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fs_extra."1.2.0" = overridableMkRustCrate (profileName: rec {
    name = "fs_extra";
    version = "1.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2022715d62ab30faffd124d40b76f4134a550a87792276512b18d63272333394"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".funty."1.2.0" = overridableMkRustCrate (profileName: rec {
    name = "funty";
    version = "1.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1847abb9cb65d566acd5942e94aea9c8f547ad02c98e1649326fc0e8910b8b1e"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".funty."2.0.0" = overridableMkRustCrate (profileName: rec {
    name = "funty";
    version = "2.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e6d5a32815ae3f33302d95fdcb2ce17862f8c65363dcfd29360480ba1001fc9c"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" = overridableMkRustCrate (profileName: rec {
    name = "futures";
    version = "0.3.21";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f73fe65f54d1e12b726f517d3e2135ca3125a437b6d998caf1962961f7172d9e"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "async-await" ]
      [ "default" ]
      [ "executor" ]
      [ "futures-executor" ]
      [ "std" ]
    ];
    dependencies = {
      futures_channel = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-channel."0.3.21" { inherit profileName; };
      futures_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.21" { inherit profileName; };
      futures_executor = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-executor."0.3.21" { inherit profileName; };
      futures_io = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-io."0.3.21" { inherit profileName; };
      futures_sink = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-sink."0.3.21" { inherit profileName; };
      futures_task = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-task."0.3.21" { inherit profileName; };
      futures_util = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.21" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-channel."0.3.21" = overridableMkRustCrate (profileName: rec {
    name = "futures-channel";
    version = "0.3.21";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c3083ce4b914124575708913bca19bfe887522d6e2e6d0952943f5eac4a74010"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "futures-sink" ]
      [ "sink" ]
      [ "std" ]
    ];
    dependencies = {
      futures_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.21" { inherit profileName; };
      futures_sink = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-sink."0.3.21" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.21" = overridableMkRustCrate (profileName: rec {
    name = "futures-core";
    version = "0.3.21";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0c09fd04b7e4073ac7156a9539b57a484a8ea920f79c7c675d05d289ab6110d3"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-executor."0.3.21" = overridableMkRustCrate (profileName: rec {
    name = "futures-executor";
    version = "0.3.21";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9420b90cfa29e327d0429f19be13e7ddb68fa1cccb09d65e5706b8c7a749b8a6"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      futures_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.21" { inherit profileName; };
      futures_task = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-task."0.3.21" { inherit profileName; };
      futures_util = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.21" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-io."0.3.21" = overridableMkRustCrate (profileName: rec {
    name = "futures-io";
    version = "0.3.21";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fc4045962a5a5e935ee2fdedaa4e08284547402885ab326734432bed5d12966b"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-macro."0.3.21" = overridableMkRustCrate (profileName: rec {
    name = "futures-macro";
    version = "0.3.21";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "33c1e13800337f4d4d7a316bf45a567dbcb6ffe087f16424852d97e97a91f512"; };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.38" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.18" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.92" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-sink."0.3.21" = overridableMkRustCrate (profileName: rec {
    name = "futures-sink";
    version = "0.3.21";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "21163e139fa306126e6eedaf49ecdb4588f939600f0b1e770f4205ee4b7fa868"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-task."0.3.21" = overridableMkRustCrate (profileName: rec {
    name = "futures-task";
    version = "0.3.21";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "57c66a976bf5909d801bbef33416c41372779507e7a6b3a5e25e4749c58f776a"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.21" = overridableMkRustCrate (profileName: rec {
    name = "futures-util";
    version = "0.3.21";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d8b7abd5d659d9b90c8cba917f6ec750a74e2dc23902ef9cd4cc8c8b22e6036a"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "async-await" ]
      [ "async-await-macro" ]
      [ "channel" ]
      [ "futures-channel" ]
      [ "futures-io" ]
      [ "futures-macro" ]
      [ "futures-sink" ]
      [ "io" ]
      [ "memchr" ]
      [ "sink" ]
      [ "slab" ]
      [ "std" ]
    ];
    dependencies = {
      futures_channel = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-channel."0.3.21" { inherit profileName; };
      futures_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.21" { inherit profileName; };
      futures_io = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-io."0.3.21" { inherit profileName; };
      futures_macro = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-macro."0.3.21" { profileName = "__noProfile"; };
      futures_sink = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-sink."0.3.21" { inherit profileName; };
      futures_task = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-task."0.3.21" { inherit profileName; };
      memchr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.5.0" { inherit profileName; };
      pin_project_lite = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.9" { inherit profileName; };
      pin_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-utils."0.1.0" { inherit profileName; };
      slab = rustPackages."registry+https://github.com/rust-lang/crates.io-index".slab."0.4.6" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fxhash."0.2.1" = overridableMkRustCrate (profileName: rec {
    name = "fxhash";
    version = "0.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c31b6d751ae2c7f11320402d34e41349dd1016f8d5d45e48c4312bc8625af50c"; };
    dependencies = {
      byteorder = rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.4.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".generational-arena."0.2.8" = overridableMkRustCrate (profileName: rec {
    name = "generational-arena";
    version = "0.2.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8e1d3b771574f62d0548cee0ad9057857e9fc25d7a3335f140c84f6acd0bf601"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."0.1.10" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".generic-array."0.12.4" = overridableMkRustCrate (profileName: rec {
    name = "generic-array";
    version = "0.12.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ffdf9f34f1447443d37393cc6c2b8313aebddcd96906caf34e54c68d8e57d7bd"; };
    dependencies = {
      typenum = rustPackages."registry+https://github.com/rust-lang/crates.io-index".typenum."1.15.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.5" = overridableMkRustCrate (profileName: rec {
    name = "generic-array";
    version = "0.14.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fd48d33ec7f05fbfa152300fdad764757cbded343c1aa1cff2fbaf4134851803"; };
    dependencies = {
      typenum = rustPackages."registry+https://github.com/rust-lang/crates.io-index".typenum."1.15.0" { inherit profileName; };
    };
    buildDependencies = {
      version_check = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.4" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".getrandom."0.2.6" = overridableMkRustCrate (profileName: rec {
    name = "getrandom";
    version = "0.2.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9be70c98951c83b8d2f8f60d7065fa6d5146873094452a1008da8c2f1e4205ad"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.125" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "wasi" then "wasi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasi."0.10.2+wasi-snapshot-preview1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gimli."0.25.0" = overridableMkRustCrate (profileName: rec {
    name = "gimli";
    version = "0.25.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f0a01e0497841a3b2db4f8afa483cce65f7e96a3498bd6c541734792aeac8fe7"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "endian-reader" ]
      [ "fallible-iterator" ]
      [ "indexmap" ]
      [ "read" ]
      [ "stable_deref_trait" ]
      [ "std" ]
      [ "write" ]
    ];
    dependencies = {
      fallible_iterator = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fallible-iterator."0.2.0" { inherit profileName; };
      indexmap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."1.8.1" { inherit profileName; };
      stable_deref_trait = rustPackages."registry+https://github.com/rust-lang/crates.io-index".stable_deref_trait."1.2.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gimli."0.26.1" = overridableMkRustCrate (profileName: rec {
    name = "gimli";
    version = "0.26.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "78cc372d058dcf6d5ecd98510e7fbc9e5aec4d21de70f65fea8fecebcd881bd4"; };
    features = builtins.concatLists [
      [ "read" ]
      [ "read-core" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".glob."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "glob";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9b919933a397b79c37e33b77bb2aa3dc8eb6e165ad809e58ff75bc7db2e34574"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".glow."0.11.2" = overridableMkRustCrate (profileName: rec {
    name = "glow";
    version = "0.11.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d8bd5877156a19b8ac83a29b2306fe20537429d318f3ff0a1a2119f8d9c61919"; };
    dependencies = {
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "js_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.57" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "slotmap" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".slotmap."1.0.6" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "wasm_bindgen" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.80" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "web_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.57" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".glyph_brush."0.7.4" = overridableMkRustCrate (profileName: rec {
    name = "glyph_brush";
    version = "0.7.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a69c65dd1f1fbb6209aa00f78636e436ad0a55b7d8e5de886d00720dcad9c6e2"; };
    dependencies = {
      glyph_brush_draw_cache = rustPackages."registry+https://github.com/rust-lang/crates.io-index".glyph_brush_draw_cache."0.1.5" { inherit profileName; };
      glyph_brush_layout = rustPackages."registry+https://github.com/rust-lang/crates.io-index".glyph_brush_layout."0.2.3" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.17" { inherit profileName; };
      ordered_float = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ordered-float."3.0.0" { inherit profileName; };
      rustc_hash = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-hash."1.1.0" { inherit profileName; };
      twox_hash = rustPackages."registry+https://github.com/rust-lang/crates.io-index".twox-hash."1.6.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".glyph_brush_draw_cache."0.1.5" = overridableMkRustCrate (profileName: rec {
    name = "glyph_brush_draw_cache";
    version = "0.1.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6010675390f6889e09a21e2c8b575b3ee25667ea8237a8d59423f73cb8c28610"; };
    dependencies = {
      ab_glyph = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ab_glyph."0.2.15" { inherit profileName; };
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "crossbeam_channel" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-channel."0.5.4" { inherit profileName; };
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "crossbeam_deque" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-deque."0.8.1" { inherit profileName; };
      linked_hash_map = rustPackages."registry+https://github.com/rust-lang/crates.io-index".linked-hash-map."0.5.4" { inherit profileName; };
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "rayon" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rayon."1.5.2" { inherit profileName; };
      rustc_hash = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-hash."1.1.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".glyph_brush_layout."0.2.3" = overridableMkRustCrate (profileName: rec {
    name = "glyph_brush_layout";
    version = "0.2.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "cc32c2334f00ca5ac3695c5009ae35da21da8c62d255b5b96d56e2597a637a38"; };
    dependencies = {
      ab_glyph = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ab_glyph."0.2.15" { inherit profileName; };
      approx = rustPackages."registry+https://github.com/rust-lang/crates.io-index".approx."0.5.1" { inherit profileName; };
      xi_unicode = rustPackages."registry+https://github.com/rust-lang/crates.io-index".xi-unicode."0.3.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gpu-alloc."0.5.3" = overridableMkRustCrate (profileName: rec {
    name = "gpu-alloc";
    version = "0.5.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7fc59e5f710e310e76e6707f86c561dd646f69a8876da9131703b2f717de818d"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      gpu_alloc_types = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gpu-alloc-types."0.2.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gpu-alloc-types."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "gpu-alloc-types";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "54804d0d6bc9d7f26db4eaec1ad10def69b599315f487d32c334a80d1efe67a5"; };
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gpu-descriptor."0.2.2" = overridableMkRustCrate (profileName: rec {
    name = "gpu-descriptor";
    version = "0.2.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a538f217be4d405ff4719a283ca68323cc2384003eca5baaa87501e821c81dda"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      gpu_descriptor_types = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gpu-descriptor-types."0.1.1" { inherit profileName; };
      hashbrown = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.11.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gpu-descriptor-types."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "gpu-descriptor-types";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "363e3677e55ad168fef68cf9de3a4a310b53124c5e784c53a1d70e92d23f2126"; };
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".half."1.8.2" = overridableMkRustCrate (profileName: rec {
    name = "half";
    version = "1.8.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "eabb4a44450da02c90444cf74558da904edde8fb4e9035a9a6a4e15445af0bd7"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.11.2" = overridableMkRustCrate (profileName: rec {
    name = "hashbrown";
    version = "0.11.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ab5ef0d4909ef3724cc8cce6ccc8572c5c817592e9285f5464f8e86f8bd3726e"; };
    features = builtins.concatLists [
      [ "ahash" ]
      [ "bumpalo" ]
      [ "default" ]
      [ "inline-more" ]
      [ "raw" ]
    ];
    dependencies = {
      ahash = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ahash."0.7.6" { inherit profileName; };
      bumpalo = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bumpalo."3.9.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.12.1" = overridableMkRustCrate (profileName: rec {
    name = "hashbrown";
    version = "0.12.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "db0d4cf898abf0081f964436dc980e96670a0f36863e4b83aaacdb65c9d7ccc3"; };
    features = builtins.concatLists [
      [ "ahash" ]
      [ "default" ]
      [ "inline-more" ]
    ];
    dependencies = {
      ahash = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ahash."0.7.6" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".heck."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "heck";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2540771e65fc8cb83cd6e8a237f70c319bd5c29f78ed1084ba5d50eeac86f7f9"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hermit-abi."0.1.19" = overridableMkRustCrate (profileName: rec {
    name = "hermit-abi";
    version = "0.1.19";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "62b467343b94ba476dcb2500d242dadbb39557df889310ac77c5d99100aaac33"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.125" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hexf-parse."0.2.1" = overridableMkRustCrate (profileName: rec {
    name = "hexf-parse";
    version = "0.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "dfa686283ad6dd069f105e5ab091b04c62850d3e4cf5d67debad1933f55023df"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hound."3.4.0" = overridableMkRustCrate (profileName: rec {
    name = "hound";
    version = "3.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8a164bb2ceaeff4f42542bdb847c41517c78a60f5649671b2a07312b6e117549"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".humantime."2.1.0" = overridableMkRustCrate (profileName: rec {
    name = "humantime";
    version = "2.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9a3a5bfb195931eeb336b2a7b4d761daec841b97f947d34394601737a7bba5e4"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".iced-x86."1.17.0" = overridableMkRustCrate (profileName: rec {
    name = "iced-x86";
    version = "1.17.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "158f5204401d08f91d19176112146d75e99b3cf745092e268fa7be33e09adcec"; };
    features = builtins.concatLists [
      [ "decoder" ]
      [ "encoder" ]
      [ "instr_info" ]
      [ "lazy_static" ]
      [ "op_code_info" ]
      [ "std" ]
    ];
    dependencies = {
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      static_assertions = rustPackages."registry+https://github.com/rust-lang/crates.io-index".static_assertions."1.1.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ident_case."1.0.1" = overridableMkRustCrate (profileName: rec {
    name = "ident_case";
    version = "1.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b9e0384b61958566e926dc50660321d12159025e767c18e043daf26b70104c39"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".im."15.1.0" = overridableMkRustCrate (profileName: rec {
    name = "im";
    version = "15.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d0acd33ff0285af998aaf9b57342af478078f53492322fafc47450e09397e0e9"; };
    dependencies = {
      bitmaps = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitmaps."2.1.0" { inherit profileName; };
      rand_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.3" { inherit profileName; };
      rand_xoshiro = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_xoshiro."0.6.0" { inherit profileName; };
      sized_chunks = rustPackages."registry+https://github.com/rust-lang/crates.io-index".sized-chunks."0.6.5" { inherit profileName; };
      typenum = rustPackages."registry+https://github.com/rust-lang/crates.io-index".typenum."1.15.0" { inherit profileName; };
    };
    buildDependencies = {
      version_check = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.4" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".im-rc."15.1.0" = overridableMkRustCrate (profileName: rec {
    name = "im-rc";
    version = "15.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "af1955a75fa080c677d3972822ec4bad316169ab1cfc6c257a942c2265dbe5fe"; };
    dependencies = {
      bitmaps = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitmaps."2.1.0" { inherit profileName; };
      rand_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.3" { inherit profileName; };
      rand_xoshiro = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_xoshiro."0.6.0" { inherit profileName; };
      sized_chunks = rustPackages."registry+https://github.com/rust-lang/crates.io-index".sized-chunks."0.6.5" { inherit profileName; };
      typenum = rustPackages."registry+https://github.com/rust-lang/crates.io-index".typenum."1.15.0" { inherit profileName; };
    };
    buildDependencies = {
      version_check = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.4" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".indexmap."1.8.1" = overridableMkRustCrate (profileName: rec {
    name = "indexmap";
    version = "1.8.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0f647032dfaa1f8b6dc29bd3edb7bbef4861b8b8007ebb118d6db284fd59f6ee"; };
    features = builtins.concatLists [
      [ "serde" ]
      [ "serde-1" ]
      [ "std" ]
    ];
    dependencies = {
      hashbrown = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.11.2" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.137" { inherit profileName; };
    };
    buildDependencies = {
      autocfg = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".indoc."1.0.6" = overridableMkRustCrate (profileName: rec {
    name = "indoc";
    version = "1.0.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "05a0bd019339e5d968b37855180087b7b9d512c5046fbd244cf8c95687927d6e"; };
  });
  
  "unknown".inkwell."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "inkwell";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/vendor/inkwell");
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "inkwell/target-aarch64") "target-aarch64")
      (lib.optional (rootFeatures' ? "inkwell/target-arm") "target-arm")
      (lib.optional (rootFeatures' ? "inkwell/target-webassembly") "target-webassembly")
    ];
    dependencies = {
      inkwell = rustPackages."git+https://github.com/rtfeldman/inkwell".inkwell."0.1.0" { inherit profileName; };
    };
  });
  
  "git+https://github.com/rtfeldman/inkwell".inkwell."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "inkwell";
    version = "0.1.0";
    registry = "git+https://github.com/rtfeldman/inkwell";
    src = fetchCrateGit {
      url = https://github.com/rtfeldman/inkwell;
      name = "inkwell";
      version = "0.1.0";
      rev = "accd406858a40ca2a1463ff77d79f3c5e4c96f4e";
      ref = "master";};
    features = builtins.concatLists [
      [ "default" ]
      [ "llvm-sys-130" ]
      [ "llvm13-0" ]
      [ "target-aarch64" ]
      [ "target-all" ]
      [ "target-amdgpu" ]
      [ "target-arm" ]
      [ "target-bpf" ]
      [ "target-hexagon" ]
      [ "target-lanai" ]
      [ "target-mips" ]
      [ "target-msp430" ]
      [ "target-nvptx" ]
      [ "target-powerpc" ]
      [ "target-riscv" ]
      [ "target-sparc" ]
      [ "target-systemz" ]
      [ "target-webassembly" ]
      [ "target-x86" ]
      [ "target-xcore" ]
    ];
    dependencies = {
      either = rustPackages."registry+https://github.com/rust-lang/crates.io-index".either."1.6.1" { inherit profileName; };
      inkwell_internals = buildRustPackages."git+https://github.com/rtfeldman/inkwell".inkwell_internals."0.5.0" { profileName = "__noProfile"; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.125" { inherit profileName; };
      llvm_sys_130 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".llvm-sys."130.0.3" { inherit profileName; };
      once_cell = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.10.0" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.0" { inherit profileName; };
    };
  });
  
  "git+https://github.com/rtfeldman/inkwell".inkwell_internals."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "inkwell_internals";
    version = "0.5.0";
    registry = "git+https://github.com/rtfeldman/inkwell";
    src = fetchCrateGit {
      url = https://github.com/rtfeldman/inkwell;
      name = "inkwell_internals";
      version = "0.5.0";
      rev = "accd406858a40ca2a1463ff77d79f3c5e4c96f4e";
      ref = "master";};
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.38" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.18" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.92" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".inplace_it."0.3.3" = overridableMkRustCrate (profileName: rec {
    name = "inplace_it";
    version = "0.3.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "90953f308a79fe6d62a4643e51f848fbfddcd05975a38e69fdf4ab86a7baf7ca"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".instant."0.1.12" = overridableMkRustCrate (profileName: rec {
    name = "instant";
    version = "0.1.12";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7a5bbe824c507c5da5956355e86a746d82e0e1464f65d862cc5e71da70e94b2c"; };
    features = builtins.concatLists [
      [ "js-sys" ]
      [ "wasm-bindgen" ]
      [ "wasm-bindgen_rs" ]
      [ "web-sys" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      ${ if hostPlatform.config == "asmjs-unknown-emscripten" || hostPlatform.config == "wasm32-unknown-emscripten" || hostPlatform.config == "wasm32-unknown-unknown" then "js_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.57" { inherit profileName; };
      ${ if hostPlatform.config == "asmjs-unknown-emscripten" || hostPlatform.config == "wasm32-unknown-emscripten" || hostPlatform.config == "wasm32-unknown-unknown" then "wasm_bindgen_rs" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.80" { inherit profileName; };
      ${ if hostPlatform.config == "asmjs-unknown-emscripten" || hostPlatform.config == "wasm32-unknown-emscripten" || hostPlatform.config == "wasm32-unknown-unknown" then "web_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.57" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".io-lifetimes."0.6.1" = overridableMkRustCrate (profileName: rec {
    name = "io-lifetimes";
    version = "0.6.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9448015e586b611e5d322f6703812bbca2f1e709d5773ecd38ddb4e3bb649504"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".itertools."0.9.0" = overridableMkRustCrate (profileName: rec {
    name = "itertools";
    version = "0.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "284f18f85651fe11e8a991b2adb42cb078325c996ed026d994719efcfca1d54b"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "use_std" ]
    ];
    dependencies = {
      either = rustPackages."registry+https://github.com/rust-lang/crates.io-index".either."1.6.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".itertools."0.10.3" = overridableMkRustCrate (profileName: rec {
    name = "itertools";
    version = "0.10.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a9a9d19fa1e79b6215ff29b9d6880b706147f16e9b1dbb1e4e5947b5b02bc5e3"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "use_alloc" ]
      [ "use_std" ]
    ];
    dependencies = {
      either = rustPackages."registry+https://github.com/rust-lang/crates.io-index".either."1.6.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".itoa."0.4.8" = overridableMkRustCrate (profileName: rec {
    name = "itoa";
    version = "0.4.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b71991ff56294aa922b450139ee08b3bfc70982c6b2c7562771375cf73542dd4"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".itoa."1.0.1" = overridableMkRustCrate (profileName: rec {
    name = "itoa";
    version = "1.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1aab8fc367588b89dcee83ab0fd66b72b50b72fa1904d7095045ace2b0c81c35"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".jni."0.19.0" = overridableMkRustCrate (profileName: rec {
    name = "jni";
    version = "0.19.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c6df18c2e3db7e453d3c6ac5b3e9d5182664d28788126d39b91f2d1e22b017ec"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "default")
    ];
    dependencies = {
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "cesu8" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cesu8."1.1.0" { inherit profileName; };
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "combine" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".combine."4.6.4" { inherit profileName; };
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "jni_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jni-sys."0.3.0" { inherit profileName; };
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "log" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.17" { inherit profileName; };
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "thiserror" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.31" { inherit profileName; };
    };
    buildDependencies = {
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "walkdir" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".walkdir."2.3.2" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".jni-sys."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "jni-sys";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8eaf4bc02d17cbdd7ff4c7438cafcdf7fb9a4613313ad11b4f8fefe7d3fa0130"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".jobserver."0.1.24" = overridableMkRustCrate (profileName: rec {
    name = "jobserver";
    version = "0.1.24";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "af25a77299a7f711a01975c35a6a424eb6862092cc2d6c72c4ed6cbc56dfc1fa"; };
    dependencies = {
      ${ if (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") && hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.125" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.57" = overridableMkRustCrate (profileName: rec {
    name = "js-sys";
    version = "0.3.57";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "671a26f820db17c2a2750743f1dd03bafd15b98c9f30c7c2628c024c05d73397"; };
    dependencies = {
      wasm_bindgen = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.80" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".khronos-egl."4.1.0" = overridableMkRustCrate (profileName: rec {
    name = "khronos-egl";
    version = "4.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8c2352bd1d0bceb871cb9d40f24360c8133c11d7486b68b5381c1dd1a32015e3"; };
    features = builtins.concatLists [
      [ "1_0" ]
      [ "1_1" ]
      [ "1_2" ]
      [ "1_3" ]
      [ "1_4" ]
      [ "1_5" ]
      [ "default" ]
      [ "dynamic" ]
      [ "libloading" ]
    ];
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.125" { inherit profileName; };
      libloading = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libloading."0.7.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".lazy-bytes-cast."5.0.1" = overridableMkRustCrate (profileName: rec {
    name = "lazy-bytes-cast";
    version = "5.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "10257499f089cd156ad82d0a9cd57d9501fa2c989068992a97eb3c27836f206b"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" = overridableMkRustCrate (profileName: rec {
    name = "lazy_static";
    version = "1.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".lazycell."1.3.0" = overridableMkRustCrate (profileName: rec {
    name = "lazycell";
    version = "1.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "830d08ce1d1d941e6b30645f1a0eb5643013d835ce3779a5fc208261dbe10f55"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".leb128."0.2.5" = overridableMkRustCrate (profileName: rec {
    name = "leb128";
    version = "0.2.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "884e2677b40cc8c339eaefcb701c32ef1fd2493d71118dc0ca4b6a736c93bd67"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".lewton."0.10.2" = overridableMkRustCrate (profileName: rec {
    name = "lewton";
    version = "0.10.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "777b48df9aaab155475a83a7df3070395ea1ac6902f5cd062b8f2b028075c030"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "default")
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "ogg")
    ];
    dependencies = {
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "byteorder" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.4.3" { inherit profileName; };
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "ogg" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ogg."0.8.0" { inherit profileName; };
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "tinyvec" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tinyvec."1.6.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libc."0.2.125" = overridableMkRustCrate (profileName: rec {
    name = "libc";
    version = "0.2.125";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5916d2ae698f6de9bfb891ad7a8d65c09d232dc58cc4ac433c7da3b2fd84bc2b"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "extra_traits" ]
      [ "std" ]
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "use_std")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libloading."0.6.7" = overridableMkRustCrate (profileName: rec {
    name = "libloading";
    version = "0.6.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "351a32417a12d5f7e82c368a66781e307834dae04c6ce0cd4456d52989229883"; };
    dependencies = {
      ${ if hostPlatform.isUnix then "cfg_if" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libloading."0.7.3" = overridableMkRustCrate (profileName: rec {
    name = "libloading";
    version = "0.7.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "efbc0f03f9a775e9f6aed295c6a1ba2253c5757a9e03d55c6caa46a681abcddd"; };
    dependencies = {
      ${ if hostPlatform.isUnix then "cfg_if" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libmimalloc-sys."0.1.25" = overridableMkRustCrate (profileName: rec {
    name = "libmimalloc-sys";
    version = "0.1.25";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "11ca136052550448f55df7898c6dbe651c6b574fe38a0d9ea687a9f8088a2e2c"; };
    buildDependencies = {
      cc = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.73" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".linked-hash-map."0.5.4" = overridableMkRustCrate (profileName: rec {
    name = "linked-hash-map";
    version = "0.5.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7fb9b38af92608140b86b693604b9ffcc5824240a484d1ecd4795bacb2fe88f3"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".linux-raw-sys."0.0.46" = overridableMkRustCrate (profileName: rec {
    name = "linux-raw-sys";
    version = "0.0.46";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d4d2456c373231a208ad294c33dc5bff30051eafd954cd4caae83a712b12854d"; };
    features = builtins.concatLists [
      [ "errno" ]
      [ "general" ]
      [ "ioctl" ]
      [ "no_std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".llvm-sys."130.0.3" = overridableMkRustCrate (profileName: rec {
    name = "llvm-sys";
    version = "130.0.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "95eb03b4f7ae21f48ef7c565a3e3aa22c50616aea64645fb1fd7f6f56b51c274"; };
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.125" { inherit profileName; };
    };
    buildDependencies = {
      cc = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.73" { profileName = "__noProfile"; };
      lazy_static = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { profileName = "__noProfile"; };
      regex = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.5.5" { profileName = "__noProfile"; };
      semver = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".semver."0.11.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".lock_api."0.4.7" = overridableMkRustCrate (profileName: rec {
    name = "lock_api";
    version = "0.4.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "327fa5b6a6940e4699ec49a9beae1ea4845c6bab9314e4f84ac68742139d8c53"; };
    dependencies = {
      scopeguard = rustPackages."registry+https://github.com/rust-lang/crates.io-index".scopeguard."1.1.0" { inherit profileName; };
    };
    buildDependencies = {
      autocfg = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".log."0.4.17" = overridableMkRustCrate (profileName: rec {
    name = "log";
    version = "0.4.17";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "abb12e687cfb44aa40f41fc3978ef76448f9b6038cad6aef4259d3c095a2382e"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".loupe."0.1.3" = overridableMkRustCrate (profileName: rec {
    name = "loupe";
    version = "0.1.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9b6a72dfa44fe15b5e76b94307eeb2ff995a8c5b283b55008940c02e0c5b634d"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "derive" ]
      [ "enable-indexmap" ]
      [ "indexmap" ]
      [ "loupe-derive" ]
    ];
    dependencies = {
      indexmap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."1.8.1" { inherit profileName; };
      loupe_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".loupe-derive."0.1.3" { profileName = "__noProfile"; };
      rustversion = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".rustversion."1.0.6" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".loupe-derive."0.1.3" = overridableMkRustCrate (profileName: rec {
    name = "loupe-derive";
    version = "0.1.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c0fbfc88337168279f2e9ae06e157cfed4efd3316e14dc96ed074d4f2e6c5952"; };
    dependencies = {
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.18" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.92" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".mach."0.3.2" = overridableMkRustCrate (profileName: rec {
    name = "mach";
    version = "0.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b823e83b2affd8f40a9ee8c29dbc56404c1e34cd2710921f2801e2cf29527afa"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      ${ if hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios" then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.125" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".malloc_buf."0.0.6" = overridableMkRustCrate (profileName: rec {
    name = "malloc_buf";
    version = "0.0.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "62bb907fe88d54d8d9ce32a3cceab4218ed2f6b7d35617cafe9adf84e43919cb"; };
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.125" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".maplit."1.0.2" = overridableMkRustCrate (profileName: rec {
    name = "maplit";
    version = "1.0.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3e2e65a1a2e43cfcb47a895c4c8b10d1f4a61097f9f254f183aee60cad9c651d"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".memchr."2.5.0" = overridableMkRustCrate (profileName: rec {
    name = "memchr";
    version = "2.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2dffe52ecf27772e601905b7522cb4ef790d2cc203488bbd0e2fe85fcb74566d"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "use_std")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".memmap2."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "memmap2";
    version = "0.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d9b70ca2a6103ac8b665dc150b142ef0e4e89df640c9e6cf295d189c3caebe5a"; };
    dependencies = {
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.125" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".memmap2."0.3.1" = overridableMkRustCrate (profileName: rec {
    name = "memmap2";
    version = "0.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "00b6c2ebff6180198788f5db08d7ce3bc1d0b617176678831a7510825973e357"; };
    dependencies = {
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.125" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".memmap2."0.5.3" = overridableMkRustCrate (profileName: rec {
    name = "memmap2";
    version = "0.5.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "057a3db23999c867821a7a59feb06a578fcb03685e983dff90daf9e7d24ac08f"; };
    dependencies = {
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.125" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".memoffset."0.6.5" = overridableMkRustCrate (profileName: rec {
    name = "memoffset";
    version = "0.6.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5aa361d4faea93603064a027415f07bd8e1d5c88c9fbf68bf56a285428fd79ce"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    buildDependencies = {
      autocfg = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".metal."0.23.1" = overridableMkRustCrate (profileName: rec {
    name = "metal";
    version = "0.23.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e0514f491f4cc03632ab399ee01e2c1c1b12d3e1cf2d667c1ff5f87d6dcd2084"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      block = rustPackages."registry+https://github.com/rust-lang/crates.io-index".block."0.1.6" { inherit profileName; };
      core_graphics_types = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-graphics-types."0.1.1" { inherit profileName; };
      foreign_types = rustPackages."registry+https://github.com/rust-lang/crates.io-index".foreign-types."0.3.2" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.17" { inherit profileName; };
      objc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc."0.2.7" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".mimalloc."0.1.29" = overridableMkRustCrate (profileName: rec {
    name = "mimalloc";
    version = "0.1.29";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2f64ad83c969af2e732e907564deb0d0ed393cec4af80776f77dd77a1a427698"; };
    dependencies = {
      libmimalloc_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libmimalloc-sys."0.1.25" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".minimal-lexical."0.2.1" = overridableMkRustCrate (profileName: rec {
    name = "minimal-lexical";
    version = "0.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "68354c5c6bd36d73ff3feceb05efa59b6acb7626617f4962be322a825e61f79a"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".minimp3."0.5.1" = overridableMkRustCrate (profileName: rec {
    name = "minimp3";
    version = "0.5.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "985438f75febf74c392071a975a29641b420dd84431135a6e6db721de4b74372"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "default")
    ];
    dependencies = {
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "minimp3_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".minimp3-sys."0.3.2" { inherit profileName; };
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "slice_deque" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".slice-deque."0.3.0" { inherit profileName; };
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "thiserror" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.31" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".minimp3-sys."0.3.2" = overridableMkRustCrate (profileName: rec {
    name = "minimp3-sys";
    version = "0.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e21c73734c69dc95696c9ed8926a2b393171d98b3f5f5935686a26a487ab9b90"; };
    buildDependencies = {
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "cc" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.73" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".miniz_oxide."0.5.1" = overridableMkRustCrate (profileName: rec {
    name = "miniz_oxide";
    version = "0.5.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d2b29bd4bc3f33391105ebee3589c19197c4271e3e5a9ec9bfe8127eeff8f082"; };
    dependencies = {
      adler = rustPackages."registry+https://github.com/rust-lang/crates.io-index".adler."1.0.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".mio."0.7.14" = overridableMkRustCrate (profileName: rec {
    name = "mio";
    version = "0.7.14";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8067b404fe97c70829f082dec8bcf4f71225d7eaea1d8645349cb76fa06205cc"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "net" ]
      [ "os-ext" ]
      [ "os-poll" ]
      [ "tcp" ]
    ];
    dependencies = {
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.125" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.17" { inherit profileName; };
      ${ if hostPlatform.isWindows then "miow" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".miow."0.3.7" { inherit profileName; };
      ${ if hostPlatform.isWindows then "ntapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ntapi."0.3.7" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".mio-misc."1.2.2" = overridableMkRustCrate (profileName: rec {
    name = "mio-misc";
    version = "1.2.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b47412f3a52115b936ff2a229b803498c7b4d332adeb87c2f1498c9da54c398c"; };
    dependencies = {
      crossbeam = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam."0.8.1" { inherit profileName; };
      crossbeam_queue = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-queue."0.3.5" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.17" { inherit profileName; };
      mio = rustPackages."registry+https://github.com/rust-lang/crates.io-index".mio."0.7.14" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".miow."0.3.7" = overridableMkRustCrate (profileName: rec {
    name = "miow";
    version = "0.3.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b9f1c5b025cda876f66ef43a113f91ebc9f4ccef34843000e0adf6ebbab84e21"; };
    dependencies = {
      winapi = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".more-asserts."0.2.2" = overridableMkRustCrate (profileName: rec {
    name = "more-asserts";
    version = "0.2.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7843ec2de400bcbc6a6328c958dc38e5359da6e93e72e37bc5246bf1ae776389"; };
  });
  
  "unknown".morphic_lib."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "morphic_lib";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/vendor/morphic_lib");
    dependencies = {
      sha2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.9.9" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.8.0" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.31" { inherit profileName; };
      typed_arena = rustPackages."registry+https://github.com/rust-lang/crates.io-index".typed-arena."2.0.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".naga."0.7.3" = overridableMkRustCrate (profileName: rec {
    name = "naga";
    version = "0.7.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "806f448a7ce662ca79ef5484ef8f451a9b7c51b8166c95f5a667228b3825a6ca"; };
    features = builtins.concatLists [
      [ "codespan-reporting" ]
      [ "default" ]
      [ "glsl-out" ]
      [ "hexf-parse" ]
      [ "hlsl-out" ]
      [ "msl-out" ]
      [ "spirv" ]
      [ "spv-out" ]
      [ "validate" ]
      [ "wgsl-in" ]
    ];
    dependencies = {
      bit_set = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bit-set."0.5.2" { inherit profileName; };
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      codespan_reporting = rustPackages."registry+https://github.com/rust-lang/crates.io-index".codespan-reporting."0.11.1" { inherit profileName; };
      fxhash = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fxhash."0.2.1" { inherit profileName; };
      hexf_parse = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hexf-parse."0.2.1" { inherit profileName; };
      indexmap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."1.8.1" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.17" { inherit profileName; };
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.15" { inherit profileName; };
      spirv = rustPackages."registry+https://github.com/rust-lang/crates.io-index".spirv."0.2.0+1.5.4" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.31" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ndk."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "ndk";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8794322172319b972f528bf90c6b467be0079f1fa82780ffb431088e741a73ab"; };
    dependencies = {
      jni_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jni-sys."0.3.0" { inherit profileName; };
      ffi = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk-sys."0.2.2" { inherit profileName; };
      num_enum = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num_enum."0.5.7" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.31" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ndk."0.6.0" = overridableMkRustCrate (profileName: rec {
    name = "ndk";
    version = "0.6.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2032c77e030ddee34a6787a64166008da93f6a352b629261d0fee232b8742dd4"; };
    dependencies = {
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "bitflags" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "jni_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jni-sys."0.3.0" { inherit profileName; };
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "ffi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk-sys."0.3.0" { inherit profileName; };
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "num_enum" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num_enum."0.5.7" { inherit profileName; };
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "thiserror" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.31" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ndk-context."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "ndk-context";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "27b02d87554356db9e9a873add8782d4ea6e3e58ea071a9adb9a2e8ddb884a8b"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ndk-glue."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "ndk-glue";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c5caf0c24d51ac1c905c27d4eda4fa0635bbe0de596b8f79235e0b17a4d29385"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.125" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.17" { inherit profileName; };
      ndk = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk."0.3.0" { inherit profileName; };
      ndk_macro = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk-macro."0.2.0" { profileName = "__noProfile"; };
      ndk_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk-sys."0.2.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ndk-glue."0.6.2" = overridableMkRustCrate (profileName: rec {
    name = "ndk-glue";
    version = "0.6.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0d0c4a7b83860226e6b4183edac21851f05d5a51756e97a1144b7f5a6b63e65f"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "default")
    ];
    dependencies = {
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "lazy_static" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.125" { inherit profileName; };
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "log" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.17" { inherit profileName; };
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "ndk" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk."0.6.0" { inherit profileName; };
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "ndk_context" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk-context."0.1.1" { inherit profileName; };
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "ndk_macro" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk-macro."0.3.0" { profileName = "__noProfile"; };
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "ndk_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk-sys."0.3.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ndk-macro."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "ndk-macro";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "05d1c6307dc424d0f65b9b06e94f88248e6305726b14729fd67a5e47b2dc481d"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      darling = rustPackages."registry+https://github.com/rust-lang/crates.io-index".darling."0.10.2" { inherit profileName; };
      proc_macro_crate = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro-crate."0.1.5" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.38" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.18" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.92" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ndk-macro."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "ndk-macro";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0df7ac00c4672f9d5aece54ee3347520b7e20f158656c7db2e6de01902eb7a6c"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "default")
    ];
    dependencies = {
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "darling" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".darling."0.13.4" { inherit profileName; };
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "proc_macro_crate" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro-crate."1.1.3" { inherit profileName; };
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "proc_macro2" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.38" { inherit profileName; };
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "quote" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.18" { inherit profileName; };
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "syn" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.92" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ndk-sys."0.2.2" = overridableMkRustCrate (profileName: rec {
    name = "ndk-sys";
    version = "0.2.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e1bcdd74c20ad5d95aacd60ef9ba40fdf77f767051040541df557b7a9b2a2121"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ndk-sys."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "ndk-sys";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6e5a6ae77c8ee183dcbbba6150e2e6b9f3f4196a7666c02a715a95692ec1fa97"; };
    dependencies = {
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "jni_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jni-sys."0.3.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".nibble_vec."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "nibble_vec";
    version = "0.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "77a5d83df9f36fe23f0c3648c6bbb8b0298bb5f1939c8f2704431371f4b84d43"; };
    dependencies = {
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.8.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".nix."0.18.0" = overridableMkRustCrate (profileName: rec {
    name = "nix";
    version = "0.18.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "83450fe6a6142ddd95fb064b746083fc4ef1705fe81f64a64e1d4b39f54a1055"; };
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."0.1.10" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.125" { inherit profileName; };
    };
    buildDependencies = {
      ${ if hostPlatform.parsed.kernel.name == "dragonfly" then "cc" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.73" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".nix."0.20.0" = overridableMkRustCrate (profileName: rec {
    name = "nix";
    version = "0.20.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fa9b4819da1bc61c0ea48b63b7bc8604064dd43013e7cc325df098d49cd7c18a"; };
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.125" { inherit profileName; };
    };
    buildDependencies = {
      ${ if hostPlatform.parsed.kernel.name == "dragonfly" then "cc" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.73" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".nix."0.22.3" = overridableMkRustCrate (profileName: rec {
    name = "nix";
    version = "0.22.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e4916f159ed8e5de0082076562152a76b7a1f64a01fd9d1e0fea002c37624faf"; };
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.125" { inherit profileName; };
      ${ if !(hostPlatform.parsed.kernel.name == "redox") then "memoffset" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memoffset."0.6.5" { inherit profileName; };
    };
    buildDependencies = {
      ${ if hostPlatform.parsed.kernel.name == "dragonfly" then "cc" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.73" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".nix."0.23.1" = overridableMkRustCrate (profileName: rec {
    name = "nix";
    version = "0.23.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9f866317acbd3a240710c63f065ffb1e4fd466259045ccb504130b7f668f35c6"; };
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.125" { inherit profileName; };
      ${ if !(hostPlatform.parsed.kernel.name == "redox") then "memoffset" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memoffset."0.6.5" { inherit profileName; };
    };
    buildDependencies = {
      ${ if hostPlatform.parsed.kernel.name == "dragonfly" then "cc" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.73" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".nom."7.1.1" = overridableMkRustCrate (profileName: rec {
    name = "nom";
    version = "7.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a8903e5a29a317527874d0402f867152a3d21c908bb0b933e416c65e301d4c36"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      memchr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.5.0" { inherit profileName; };
      minimal_lexical = rustPackages."registry+https://github.com/rust-lang/crates.io-index".minimal-lexical."0.2.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".nonempty."0.7.0" = overridableMkRustCrate (profileName: rec {
    name = "nonempty";
    version = "0.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e9e591e719385e6ebaeb5ce5d3887f7d5676fceca6411d1925ccc95745f3d6f7"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ntapi."0.3.7" = overridableMkRustCrate (profileName: rec {
    name = "ntapi";
    version = "0.3.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c28774a7fd2fbb4f0babd8237ce554b73af68021b5f695a3cebd6c59bac0980f"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "user" ]
    ];
    dependencies = {
      winapi = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num-derive."0.3.3" = overridableMkRustCrate (profileName: rec {
    name = "num-derive";
    version = "0.3.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "876a53fff98e03a936a674b29568b0e605f06b29372c2489ff4de23f1949743d"; };
    dependencies = {
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "proc_macro2" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.38" { inherit profileName; };
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "quote" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.18" { inherit profileName; };
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "syn" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.92" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.15" = overridableMkRustCrate (profileName: rec {
    name = "num-traits";
    version = "0.2.15";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "578ede34cf02f8924ab9447f50c28075b4d3e5b269972345e7e0372b38c6cdcd"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    buildDependencies = {
      autocfg = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num_cpus."1.13.1" = overridableMkRustCrate (profileName: rec {
    name = "num_cpus";
    version = "1.13.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "19e64526ebdee182341572e50e9ad03965aa510cd94427a4549448f285e957a1"; };
    dependencies = {
      ${ if (hostPlatform.parsed.cpu.name == "x86_64" || hostPlatform.parsed.cpu.name == "aarch64") && hostPlatform.parsed.kernel.name == "hermit" then "hermit_abi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hermit-abi."0.1.19" { inherit profileName; };
      ${ if !hostPlatform.isWindows then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.125" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num_enum."0.5.7" = overridableMkRustCrate (profileName: rec {
    name = "num_enum";
    version = "0.5.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "cf5395665662ef45796a4ff5486c5d41d29e0c09640af4c5f17fd94ee2c119c9"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      num_enum_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".num_enum_derive."0.5.7" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num_enum_derive."0.5.7" = overridableMkRustCrate (profileName: rec {
    name = "num_enum_derive";
    version = "0.5.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3b0498641e53dd6ac1a4f22547548caa6864cc4933784319cd1775271c5a46ce"; };
    features = builtins.concatLists [
      [ "proc-macro-crate" ]
      [ "std" ]
    ];
    dependencies = {
      proc_macro_crate = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro-crate."1.1.3" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.38" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.18" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.92" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".objc."0.2.7" = overridableMkRustCrate (profileName: rec {
    name = "objc";
    version = "0.2.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "915b1b472bc21c53464d6c8461c9d3af805ba1ef837e1cac254428f4a77177b1"; };
    features = builtins.concatLists [
      [ "objc_exception" ]
    ];
    dependencies = {
      malloc_buf = rustPackages."registry+https://github.com/rust-lang/crates.io-index".malloc_buf."0.0.6" { inherit profileName; };
      objc_exception = rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc_exception."0.1.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".objc-foundation."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "objc-foundation";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1add1b659e36c9607c7aab864a76c7a4c2760cd0cd2e120f3fb8b952c7e22bf9"; };
    dependencies = {
      block = rustPackages."registry+https://github.com/rust-lang/crates.io-index".block."0.1.6" { inherit profileName; };
      objc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc."0.2.7" { inherit profileName; };
      objc_id = rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc_id."0.1.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".objc_exception."0.1.2" = overridableMkRustCrate (profileName: rec {
    name = "objc_exception";
    version = "0.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ad970fb455818ad6cba4c122ad012fae53ae8b4795f86378bce65e4f6bab2ca4"; };
    buildDependencies = {
      cc = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.73" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".objc_id."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "objc_id";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c92d4ddb4bd7b50d730c215ff871754d0da6b2178849f8a2a2ab69712d0c073b"; };
    dependencies = {
      objc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc."0.2.7" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".object."0.26.2" = overridableMkRustCrate (profileName: rec {
    name = "object";
    version = "0.26.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "39f37e50073ccad23b6d09bcb5b263f4e76d3bb6038e4a3c08e52162ffa8abc2"; };
    features = builtins.concatLists [
      [ "archive" ]
      [ "coff" ]
      [ "compression" ]
      [ "crc32fast" ]
      [ "default" ]
      [ "elf" ]
      [ "flate2" ]
      [ "indexmap" ]
      [ "macho" ]
      [ "pe" ]
      [ "read" ]
      [ "read_core" ]
      [ "std" ]
      [ "unaligned" ]
      [ "write" ]
      [ "write_core" ]
    ];
    dependencies = {
      crc32fast = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crc32fast."1.3.2" { inherit profileName; };
      flate2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".flate2."1.0.23" { inherit profileName; };
      indexmap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."1.8.1" { inherit profileName; };
      memchr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.5.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".object."0.28.3" = overridableMkRustCrate (profileName: rec {
    name = "object";
    version = "0.28.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "40bec70ba014595f99f7aa110b84331ffe1ee9aece7fe6f387cc7e3ecda4d456"; };
    features = builtins.concatLists [
      [ "archive" ]
      [ "coff" ]
      [ "crc32fast" ]
      [ "elf" ]
      [ "hashbrown" ]
      [ "indexmap" ]
      [ "macho" ]
      [ "pe" ]
      [ "read_core" ]
      [ "std" ]
      [ "unaligned" ]
      [ "write" ]
      [ "write_core" ]
      [ "write_std" ]
    ];
    dependencies = {
      crc32fast = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crc32fast."1.3.2" { inherit profileName; };
      hashbrown = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.11.2" { inherit profileName; };
      indexmap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."1.8.1" { inherit profileName; };
      memchr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.5.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".oboe."0.4.6" = overridableMkRustCrate (profileName: rec {
    name = "oboe";
    version = "0.4.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "27f63c358b4fa0fbcfefd7c8be5cfc39c08ce2389f5325687e7762a48d30a5c1"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "java-interface")
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "jni")
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "ndk")
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "ndk-context")
    ];
    dependencies = {
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "jni" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jni."0.19.0" { inherit profileName; };
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "ndk" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk."0.6.0" { inherit profileName; };
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "ndk_context" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk-context."0.1.1" { inherit profileName; };
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "num_derive" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".num-derive."0.3.3" { profileName = "__noProfile"; };
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "num_traits" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.15" { inherit profileName; };
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "oboe_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".oboe-sys."0.4.5" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".oboe-sys."0.4.5" = overridableMkRustCrate (profileName: rec {
    name = "oboe-sys";
    version = "0.4.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3370abb7372ed744232c12954d920d1a40f1c4686de9e79e800021ef492294bd"; };
    buildDependencies = {
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "cc" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.73" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ogg."0.8.0" = overridableMkRustCrate (profileName: rec {
    name = "ogg";
    version = "0.8.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6951b4e8bf21c8193da321bcce9c9dd2e13c858fe078bf9054a288b419ae5d6e"; };
    dependencies = {
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "byteorder" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.4.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".once_cell."1.10.0" = overridableMkRustCrate (profileName: rec {
    name = "once_cell";
    version = "1.10.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "87f3e037eac156d1775da914196f0f37741a274155e34a0b7e427c35d2a2ecb9"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "race" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".oorandom."11.1.3" = overridableMkRustCrate (profileName: rec {
    name = "oorandom";
    version = "11.1.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0ab1bc2a289d34bd04a330323ac98a1b4bc82c9d9fcb1e66b63caa84da26b575"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".opaque-debug."0.2.3" = overridableMkRustCrate (profileName: rec {
    name = "opaque-debug";
    version = "0.2.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2839e79665f131bdb5782e51f2c6c9599c133c6098982a54c794358bf432529c"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".opaque-debug."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "opaque-debug";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "624a8340c38c1b80fd549087862da4ba43e08858af025b236e509b6649fc13d5"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ordered-float."3.0.0" = overridableMkRustCrate (profileName: rec {
    name = "ordered-float";
    version = "3.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "96bcbab4bfea7a59c2c0fe47211a1ac4e3e96bea6eb446d704f310bc5c732ae2"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.15" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".os_str_bytes."6.0.0" = overridableMkRustCrate (profileName: rec {
    name = "os_str_bytes";
    version = "6.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8e22443d1643a904602595ba1cd8f7d896afe56d26712531c5ff73a15b2fbf64"; };
    features = builtins.concatLists [
      [ "raw_os_str" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".output_vt100."0.1.3" = overridableMkRustCrate (profileName: rec {
    name = "output_vt100";
    version = "0.1.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "628223faebab4e3e40667ee0b2336d34a5b960ff60ea743ddfdbcf7770bcfb66"; };
    dependencies = {
      winapi = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".owned_ttf_parser."0.6.0" = overridableMkRustCrate (profileName: rec {
    name = "owned_ttf_parser";
    version = "0.6.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9f923fb806c46266c02ab4a5b239735c144bdeda724a50ed058e5226f594cde3"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      ttf_parser = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ttf-parser."0.6.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".owned_ttf_parser."0.15.0" = overridableMkRustCrate (profileName: rec {
    name = "owned_ttf_parser";
    version = "0.15.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4fb1e509cfe7a12db2a90bfa057dfcdbc55a347f5da677c506b53dd099cfec9d"; };
    features = builtins.concatLists [
      [ "apple-layout" ]
      [ "default" ]
      [ "glyph-names" ]
      [ "opentype-layout" ]
      [ "std" ]
      [ "variable-fonts" ]
    ];
    dependencies = {
      ttf_parser = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ttf-parser."0.15.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".packed_struct."0.10.0" = overridableMkRustCrate (profileName: rec {
    name = "packed_struct";
    version = "0.10.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9c48e482b9a59ad6c2cdb06f7725e7bd33fe3525baaf4699fde7bfea6a5b77b1"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "serde" ]
      [ "std" ]
    ];
    dependencies = {
      bitvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitvec."0.22.3" { inherit profileName; };
      packed_struct_codegen = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".packed_struct_codegen."0.10.0" { profileName = "__noProfile"; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.137" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".packed_struct_codegen."0.10.0" = overridableMkRustCrate (profileName: rec {
    name = "packed_struct_codegen";
    version = "0.10.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "56e3692b867ec1d48ccb441e951637a2cc3130d0912c0059e48319e1c83e44bc"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.38" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.18" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.92" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".page_size."0.4.2" = overridableMkRustCrate (profileName: rec {
    name = "page_size";
    version = "0.4.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "eebde548fbbf1ea81a99b128872779c437752fb99f217c45245e1a61dcd9edcd"; };
    dependencies = {
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.125" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".palette."0.6.0" = overridableMkRustCrate (profileName: rec {
    name = "palette";
    version = "0.6.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f9735f7e1e51a3f740bacd5dc2724b61a7806f23597a8736e679f38ee3435d18"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "named" ]
      [ "named_from_str" ]
      [ "named_gradients" ]
      [ "phf" ]
      [ "std" ]
    ];
    dependencies = {
      approx = rustPackages."registry+https://github.com/rust-lang/crates.io-index".approx."0.5.1" { inherit profileName; };
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.15" { inherit profileName; };
      palette_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".palette_derive."0.6.0" { profileName = "__noProfile"; };
      phf = rustPackages."registry+https://github.com/rust-lang/crates.io-index".phf."0.9.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".palette_derive."0.6.0" = overridableMkRustCrate (profileName: rec {
    name = "palette_derive";
    version = "0.6.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7799c3053ea8a6d8a1193c7ba42f534e7863cf52e378a7f90406f4a645d33bad"; };
    dependencies = {
      find_crate = rustPackages."registry+https://github.com/rust-lang/crates.io-index".find-crate."0.6.3" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.38" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.18" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.92" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" = overridableMkRustCrate (profileName: rec {
    name = "parking_lot";
    version = "0.11.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7d17b78036a60663b797adeaee46f5c9dfebb86948d1255007a1d6be0271ff99"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "wasm-bindgen" ]
    ];
    dependencies = {
      instant = rustPackages."registry+https://github.com/rust-lang/crates.io-index".instant."0.1.12" { inherit profileName; };
      lock_api = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lock_api."0.4.7" { inherit profileName; };
      parking_lot_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot_core."0.8.5" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.0" = overridableMkRustCrate (profileName: rec {
    name = "parking_lot";
    version = "0.12.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "87f5ec2493a61ac0506c0f4199f99070cbe83857b0337006a30f3e6719b8ef58"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      lock_api = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lock_api."0.4.7" { inherit profileName; };
      parking_lot_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot_core."0.9.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".parking_lot_core."0.8.5" = overridableMkRustCrate (profileName: rec {
    name = "parking_lot_core";
    version = "0.8.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d76e8e1493bcac0d2766c42737f34458f1c8c50c0d23bcb24ea953affb273216"; };
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      instant = rustPackages."registry+https://github.com/rust-lang/crates.io-index".instant."0.1.12" { inherit profileName; };
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.125" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "redox" then "syscall" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".redox_syscall."0.2.13" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.8.0" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".parking_lot_core."0.9.3" = overridableMkRustCrate (profileName: rec {
    name = "parking_lot_core";
    version = "0.9.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "09a279cbf25cb0757810394fbc1e359949b59e348145c643a939a525692e6929"; };
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.125" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "redox" then "syscall" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".redox_syscall."0.2.13" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.8.0" { inherit profileName; };
      ${ if hostPlatform.isWindows then "windows_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.36.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".peeking_take_while."0.1.2" = overridableMkRustCrate (profileName: rec {
    name = "peeking_take_while";
    version = "0.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "19b17cddbe7ec3f8bc800887bab5e717348c95ea2ca0b1bf0837fb964dc67099"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".peg."0.8.0" = overridableMkRustCrate (profileName: rec {
    name = "peg";
    version = "0.8.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "af728fe826811af3b38c37e93de6d104485953ea373d656eebae53d6987fcd2c"; };
    dependencies = {
      peg_macros = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".peg-macros."0.8.0" { profileName = "__noProfile"; };
      peg_runtime = rustPackages."registry+https://github.com/rust-lang/crates.io-index".peg-runtime."0.8.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".peg-macros."0.8.0" = overridableMkRustCrate (profileName: rec {
    name = "peg-macros";
    version = "0.8.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4536be147b770b824895cbad934fccce8e49f14b4c4946eaa46a6e4a12fcdc16"; };
    dependencies = {
      peg_runtime = rustPackages."registry+https://github.com/rust-lang/crates.io-index".peg-runtime."0.8.0" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.38" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.18" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".peg-runtime."0.8.0" = overridableMkRustCrate (profileName: rec {
    name = "peg-runtime";
    version = "0.8.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f9b0efd3ba03c3a409d44d60425f279ec442bcf0b9e63ff4e410da31c8b0f69f"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.1.0" = overridableMkRustCrate (profileName: rec {
    name = "percent-encoding";
    version = "2.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d4fd5641d01c8f18a23da7b6fe29298ff4b55afcccdf78973b24cf3175fee32e"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pest."2.1.3" = overridableMkRustCrate (profileName: rec {
    name = "pest";
    version = "2.1.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "10f4872ae94d7b90ae48754df22fd42ad52ce740b8f370b03da4835417403e53"; };
    dependencies = {
      ucd_trie = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ucd-trie."0.1.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pest_derive."2.1.0" = overridableMkRustCrate (profileName: rec {
    name = "pest_derive";
    version = "2.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "833d1ae558dc601e9a60366421196a8d94bc0ac980476d0b67e1d0988d72b2d0"; };
    dependencies = {
      pest = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pest."2.1.3" { inherit profileName; };
      pest_generator = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pest_generator."2.1.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pest_generator."2.1.3" = overridableMkRustCrate (profileName: rec {
    name = "pest_generator";
    version = "2.1.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "99b8db626e31e5b81787b9783425769681b347011cc59471e33ea46d2ea0cf55"; };
    dependencies = {
      pest = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pest."2.1.3" { inherit profileName; };
      pest_meta = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pest_meta."2.1.3" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.38" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.18" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.92" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pest_meta."2.1.3" = overridableMkRustCrate (profileName: rec {
    name = "pest_meta";
    version = "2.1.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "54be6e404f5317079812fc8f9f5279de376d8856929e21c184ecf6bbd692a11d"; };
    dependencies = {
      maplit = rustPackages."registry+https://github.com/rust-lang/crates.io-index".maplit."1.0.2" { inherit profileName; };
      pest = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pest."2.1.3" { inherit profileName; };
    };
    buildDependencies = {
      sha1 = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".sha-1."0.8.2" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".phf."0.9.0" = overridableMkRustCrate (profileName: rec {
    name = "phf";
    version = "0.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b2ac8b67553a7ca9457ce0e526948cad581819238f4a9d1ea74545851fa24f37"; };
    features = builtins.concatLists [
      [ "macros" ]
      [ "phf_macros" ]
      [ "proc-macro-hack" ]
    ];
    dependencies = {
      phf_macros = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".phf_macros."0.9.0" { profileName = "__noProfile"; };
      phf_shared = rustPackages."registry+https://github.com/rust-lang/crates.io-index".phf_shared."0.9.0" { inherit profileName; };
      proc_macro_hack = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro-hack."0.5.19" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".phf_generator."0.9.1" = overridableMkRustCrate (profileName: rec {
    name = "phf_generator";
    version = "0.9.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d43f3220d96e0080cc9ea234978ccd80d904eafb17be31bb0f76daaea6493082"; };
    dependencies = {
      phf_shared = rustPackages."registry+https://github.com/rust-lang/crates.io-index".phf_shared."0.9.0" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".phf_macros."0.9.0" = overridableMkRustCrate (profileName: rec {
    name = "phf_macros";
    version = "0.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b706f5936eb50ed880ae3009395b43ed19db5bff2ebd459c95e7bf013a89ab86"; };
    dependencies = {
      phf_generator = rustPackages."registry+https://github.com/rust-lang/crates.io-index".phf_generator."0.9.1" { inherit profileName; };
      phf_shared = rustPackages."registry+https://github.com/rust-lang/crates.io-index".phf_shared."0.9.0" { inherit profileName; };
      proc_macro_hack = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro-hack."0.5.19" { profileName = "__noProfile"; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.38" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.18" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.92" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".phf_shared."0.9.0" = overridableMkRustCrate (profileName: rec {
    name = "phf_shared";
    version = "0.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a68318426de33640f02be62b4ae8eb1261be2efbc337b60c54d845bf4484e0d9"; };
    dependencies = {
      siphasher = rustPackages."registry+https://github.com/rust-lang/crates.io-index".siphasher."0.3.10" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.9" = overridableMkRustCrate (profileName: rec {
    name = "pin-project-lite";
    version = "0.2.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e0a7ae3ac2f1173085d398531c705756c94a4c56843785df85a60c1a0afac116"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pin-utils."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "pin-utils";
    version = "0.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8b870d8c151b6f2fb93e84a13146138f05d02ed11c7e7c54f8826aaaf7c9f184"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pkg-config."0.3.25" = overridableMkRustCrate (profileName: rec {
    name = "pkg-config";
    version = "0.3.25";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1df8c4ec4b0627e53bdf214615ad287367e482558cf84b109250b37464dc03ae"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".plotters."0.3.1" = overridableMkRustCrate (profileName: rec {
    name = "plotters";
    version = "0.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "32a3fd9ec30b9749ce28cd91f255d569591cdf937fe280c312143e3c4bad6f2a"; };
    features = builtins.concatLists [
      [ "area_series" ]
      [ "line_series" ]
      [ "plotters-svg" ]
      [ "svg_backend" ]
    ];
    dependencies = {
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.15" { inherit profileName; };
      plotters_backend = rustPackages."registry+https://github.com/rust-lang/crates.io-index".plotters-backend."0.3.2" { inherit profileName; };
      plotters_svg = rustPackages."registry+https://github.com/rust-lang/crates.io-index".plotters-svg."0.3.1" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "wasm_bindgen" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.80" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "web_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.57" { inherit profileName; };
    };
  });
  
  "git+https://github.com/Anton-4/plotters".plotters."0.3.1" = overridableMkRustCrate (profileName: rec {
    name = "plotters";
    version = "0.3.1";
    registry = "git+https://github.com/Anton-4/plotters";
    src = fetchCrateGit {
      url = https://github.com/Anton-4/plotters;
      name = "plotters";
      version = "0.3.1";
      rev = "d043988179b61db714ad60f678637ee145e363d3";};
    features = builtins.concatLists [
      [ "area_series" ]
      [ "line_series" ]
      [ "plotters-svg" ]
      [ "svg_backend" ]
    ];
    dependencies = {
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.15" { inherit profileName; };
      plotters_backend = rustPackages."registry+https://github.com/rust-lang/crates.io-index".plotters-backend."0.3.2" { inherit profileName; };
      plotters_svg = rustPackages."registry+https://github.com/rust-lang/crates.io-index".plotters-svg."0.3.1" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "wasm_bindgen" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.80" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "web_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.57" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".plotters-backend."0.3.2" = overridableMkRustCrate (profileName: rec {
    name = "plotters-backend";
    version = "0.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d88417318da0eaf0fdcdb51a0ee6c3bed624333bff8f946733049380be67ac1c"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".plotters-svg."0.3.1" = overridableMkRustCrate (profileName: rec {
    name = "plotters-svg";
    version = "0.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "521fa9638fa597e1dc53e9412a4f9cefb01187ee1f7413076f9e6749e2885ba9"; };
    dependencies = {
      plotters_backend = rustPackages."registry+https://github.com/rust-lang/crates.io-index".plotters-backend."0.3.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ppv-lite86."0.2.16" = overridableMkRustCrate (profileName: rec {
    name = "ppv-lite86";
    version = "0.2.16";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "eb9f9e6e233e5c4a35559a617bf40a4ec447db2e84c20b55a6f83167b7e57872"; };
    features = builtins.concatLists [
      [ "simd" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pretty_assertions."1.2.1" = overridableMkRustCrate (profileName: rec {
    name = "pretty_assertions";
    version = "1.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c89f989ac94207d048d92db058e4f6ec7342b0971fc58d1271ca148b799b3563"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      ansi_term = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ansi_term."0.12.1" { inherit profileName; };
      ${ if hostPlatform.isWindows then "ctor" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".ctor."0.1.22" { profileName = "__noProfile"; };
      diff = rustPackages."registry+https://github.com/rust-lang/crates.io-index".diff."0.1.12" { inherit profileName; };
      ${ if hostPlatform.isWindows then "output_vt100" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".output_vt100."0.1.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".proc-macro-crate."0.1.5" = overridableMkRustCrate (profileName: rec {
    name = "proc-macro-crate";
    version = "0.1.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1d6ea3c4595b96363c13943497db34af4460fb474a95c43f4446ad341b8c9785"; };
    dependencies = {
      toml = rustPackages."registry+https://github.com/rust-lang/crates.io-index".toml."0.5.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".proc-macro-crate."1.1.3" = overridableMkRustCrate (profileName: rec {
    name = "proc-macro-crate";
    version = "1.1.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e17d47ce914bf4de440332250b0edd23ce48c005f59fab39d3335866b114f11a"; };
    dependencies = {
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.31" { inherit profileName; };
      toml = rustPackages."registry+https://github.com/rust-lang/crates.io-index".toml."0.5.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".proc-macro-error."1.0.4" = overridableMkRustCrate (profileName: rec {
    name = "proc-macro-error";
    version = "1.0.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "da25490ff9892aab3fcf7c36f08cfb902dd3e71ca0f9f9517bea02a73a5ce38c"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "syn" ]
      [ "syn-error" ]
    ];
    dependencies = {
      proc_macro_error_attr = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro-error-attr."1.0.4" { profileName = "__noProfile"; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.38" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.18" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.92" { inherit profileName; };
    };
    buildDependencies = {
      version_check = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.4" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".proc-macro-error-attr."1.0.4" = overridableMkRustCrate (profileName: rec {
    name = "proc-macro-error-attr";
    version = "1.0.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a1be40180e52ecc98ad80b184934baf3d0d29f979574e439af5a55274b35f869"; };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.38" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.18" { inherit profileName; };
    };
    buildDependencies = {
      version_check = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.4" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".proc-macro-hack."0.5.19" = overridableMkRustCrate (profileName: rec {
    name = "proc-macro-hack";
    version = "0.5.19";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "dbf0c48bc1d91375ae5c3cd81e3722dff1abcf81a30960240640d223f59fe0e5"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.38" = overridableMkRustCrate (profileName: rec {
    name = "proc-macro2";
    version = "1.0.38";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9027b48e9d4c9175fa2218adf3557f91c1137021739951d4932f5f8268ac48aa"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "proc-macro" ]
    ];
    dependencies = {
      unicode_xid = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-xid."0.2.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".profiling."1.0.5" = overridableMkRustCrate (profileName: rec {
    name = "profiling";
    version = "1.0.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9145ac0af1d93c638c98c40cf7d25665f427b2a44ad0a99b1dccf3e2f25bb987"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ptr_meta."0.1.4" = overridableMkRustCrate (profileName: rec {
    name = "ptr_meta";
    version = "0.1.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0738ccf7ea06b608c10564b31debd4f5bc5e197fc8bfe088f68ae5ce81e7a4f1"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      ptr_meta_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".ptr_meta_derive."0.1.4" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ptr_meta_derive."0.1.4" = overridableMkRustCrate (profileName: rec {
    name = "ptr_meta_derive";
    version = "0.1.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "16b845dbfca988fa33db069c0e230574d15a3088f147a87b64c7589eb662c9ac"; };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.38" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.18" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.92" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pulldown-cmark."0.8.0" = overridableMkRustCrate (profileName: rec {
    name = "pulldown-cmark";
    version = "0.8.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ffade02495f22453cd593159ea2f59827aae7f53fa8323f756799b670881dcf8"; };
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      memchr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.5.0" { inherit profileName; };
      unicase = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicase."2.6.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".quick-xml."0.22.0" = overridableMkRustCrate (profileName: rec {
    name = "quick-xml";
    version = "0.22.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8533f14c8382aaad0d592c812ac3b826162128b65662331e1127b45c3d18536b"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      memchr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.5.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".quickcheck."1.0.3" = overridableMkRustCrate (profileName: rec {
    name = "quickcheck";
    version = "1.0.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "588f6378e4dd99458b60ec275b4477add41ce4fa9f64dcba6f15adccb19b50d6"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "env_logger" ]
      [ "log" ]
      [ "regex" ]
      [ "use_logging" ]
    ];
    dependencies = {
      env_logger = rustPackages."registry+https://github.com/rust-lang/crates.io-index".env_logger."0.8.4" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.17" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".quickcheck_macros."1.0.0" = overridableMkRustCrate (profileName: rec {
    name = "quickcheck_macros";
    version = "1.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b22a693222d716a9587786f37ac3f6b4faedb5b80c23914e7303ff5a1d8016e9"; };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.38" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.18" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.92" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".quote."1.0.18" = overridableMkRustCrate (profileName: rec {
    name = "quote";
    version = "1.0.18";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a1feb54ed693b93a84e14094943b84b7c4eae204c512b7ccb95ab0c66d278ad1"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "proc-macro" ]
    ];
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.38" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".radium."0.6.2" = overridableMkRustCrate (profileName: rec {
    name = "radium";
    version = "0.6.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "643f8f41a8ebc4c5dc4515c82bb8abd397b527fc20fd681b7c011c2aee5d44fb"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".radium."0.7.0" = overridableMkRustCrate (profileName: rec {
    name = "radium";
    version = "0.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "dc33ff2d4973d518d823d61aa239014831e521c75da58e3df4840d3f47749d09"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".radix_trie."0.2.1" = overridableMkRustCrate (profileName: rec {
    name = "radix_trie";
    version = "0.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c069c179fcdc6a2fe24d8d18305cf085fdbd4f922c041943e203685d6a1c58fd"; };
    dependencies = {
      endian_type = rustPackages."registry+https://github.com/rust-lang/crates.io-index".endian-type."0.1.2" { inherit profileName; };
      nibble_vec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nibble_vec."0.1.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" = overridableMkRustCrate (profileName: rec {
    name = "rand";
    version = "0.8.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "getrandom" ]
      [ "libc" ]
      [ "rand_chacha" ]
      [ "small_rng" ]
      [ "std" ]
      [ "std_rng" ]
    ];
    dependencies = {
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.125" { inherit profileName; };
      rand_chacha = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_chacha."0.3.1" { inherit profileName; };
      rand_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rand_chacha."0.3.1" = overridableMkRustCrate (profileName: rec {
    name = "rand_chacha";
    version = "0.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e6c10a63a0fa32252be49d21e7709d4d4baf8d231c2dbce1eaa8141b9b127d88"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      ppv_lite86 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ppv-lite86."0.2.16" { inherit profileName; };
      rand_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.3" = overridableMkRustCrate (profileName: rec {
    name = "rand_core";
    version = "0.6.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d34f1408f55294453790c48b2f1ebbb1c5b4b7563eb1f418bcfcfdbb06ebb4e7"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "getrandom" ]
      [ "std" ]
    ];
    dependencies = {
      getrandom = rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.2.6" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rand_xoshiro."0.6.0" = overridableMkRustCrate (profileName: rec {
    name = "rand_xoshiro";
    version = "0.6.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6f97cdb2a36ed4183de61b2f824cc45c9f1037f28afe0a322e9fff4c108b5aaa"; };
    dependencies = {
      rand_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".range-alloc."0.1.2" = overridableMkRustCrate (profileName: rec {
    name = "range-alloc";
    version = "0.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "63e935c45e09cc6dcf00d2f0b2d630a58f4095320223d47fc68918722f0538b6"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".raw-window-handle."0.3.4" = overridableMkRustCrate (profileName: rec {
    name = "raw-window-handle";
    version = "0.3.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e28f55143d0548dad60bb4fbdc835a3d7ac6acc3324506450c5fdd6e42903a76"; };
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.125" { inherit profileName; };
      new = rustPackages."registry+https://github.com/rust-lang/crates.io-index".raw-window-handle."0.4.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".raw-window-handle."0.4.3" = overridableMkRustCrate (profileName: rec {
    name = "raw-window-handle";
    version = "0.4.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b800beb9b6e7d2df1fe337c9e3d04e3af22a124460fb4c30fcc22c9117cefb41"; };
    dependencies = {
      cty = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cty."0.2.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rayon."1.5.2" = overridableMkRustCrate (profileName: rec {
    name = "rayon";
    version = "1.5.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fd249e82c21598a9a426a4e00dd7adc1d640b22445ec8545feef801d1a74c221"; };
    dependencies = {
      crossbeam_deque = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-deque."0.8.1" { inherit profileName; };
      either = rustPackages."registry+https://github.com/rust-lang/crates.io-index".either."1.6.1" { inherit profileName; };
      rayon_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rayon-core."1.9.2" { inherit profileName; };
    };
    buildDependencies = {
      autocfg = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rayon-core."1.9.2" = overridableMkRustCrate (profileName: rec {
    name = "rayon-core";
    version = "1.9.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9f51245e1e62e1f1629cbfec37b5793bbabcaeb90f30e94d2ba03564687353e4"; };
    dependencies = {
      crossbeam_channel = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-channel."0.5.4" { inherit profileName; };
      crossbeam_deque = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-deque."0.8.1" { inherit profileName; };
      crossbeam_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.8" { inherit profileName; };
      num_cpus = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num_cpus."1.13.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".redox_syscall."0.2.13" = overridableMkRustCrate (profileName: rec {
    name = "redox_syscall";
    version = "0.2.13";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "62f25bc4c7e55e0b0b7a1d43fb893f4fa1361d0abe38b9ce4f323c2adfe6ef42"; };
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".redox_users."0.4.3" = overridableMkRustCrate (profileName: rec {
    name = "redox_users";
    version = "0.4.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b033d837a7cf162d7993aded9304e30a83213c648b6e389db233191f891e5c2b"; };
    dependencies = {
      getrandom = rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.2.6" { inherit profileName; };
      syscall = rustPackages."registry+https://github.com/rust-lang/crates.io-index".redox_syscall."0.2.13" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.31" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".regalloc."0.0.31" = overridableMkRustCrate (profileName: rec {
    name = "regalloc";
    version = "0.0.31";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "571f7f397d61c4755285cd37853fe8e03271c243424a907415909379659381c5"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.17" { inherit profileName; };
      rustc_hash = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-hash."1.1.0" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.8.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".regex."1.5.5" = overridableMkRustCrate (profileName: rec {
    name = "regex";
    version = "1.5.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1a11647b6b25ff05a515cb92c365cec08801e83423a235b51e231e1808747286"; };
    features = builtins.concatLists [
      [ "aho-corasick" ]
      [ "default" ]
      [ "memchr" ]
      [ "perf" ]
      [ "perf-cache" ]
      [ "perf-dfa" ]
      [ "perf-inline" ]
      [ "perf-literal" ]
      [ "std" ]
      [ "unicode" ]
      [ "unicode-age" ]
      [ "unicode-bool" ]
      [ "unicode-case" ]
      [ "unicode-gencat" ]
      [ "unicode-perl" ]
      [ "unicode-script" ]
      [ "unicode-segment" ]
    ];
    dependencies = {
      aho_corasick = rustPackages."registry+https://github.com/rust-lang/crates.io-index".aho-corasick."0.7.18" { inherit profileName; };
      memchr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.5.0" { inherit profileName; };
      regex_syntax = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex-syntax."0.6.25" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".regex-automata."0.1.10" = overridableMkRustCrate (profileName: rec {
    name = "regex-automata";
    version = "0.1.10";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6c230d73fb8d8c1b9c0b3135c5142a8acee3a0558fb8db5cf1cb65f8d7862132"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".regex-syntax."0.6.25" = overridableMkRustCrate (profileName: rec {
    name = "regex-syntax";
    version = "0.6.25";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f497285884f3fcff424ffc933e56d7cbca511def0c9831a7f9b5f6153e3cc89b"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "unicode" ]
      [ "unicode-age" ]
      [ "unicode-bool" ]
      [ "unicode-case" ]
      [ "unicode-gencat" ]
      [ "unicode-perl" ]
      [ "unicode-script" ]
      [ "unicode-segment" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".region."3.0.0" = overridableMkRustCrate (profileName: rec {
    name = "region";
    version = "3.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "76e189c2369884dce920945e2ddf79b3dff49e071a167dd1817fa9c4c00d512e"; };
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.125" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios" then "mach" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".mach."0.3.2" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".remove_dir_all."0.5.3" = overridableMkRustCrate (profileName: rec {
    name = "remove_dir_all";
    version = "0.5.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3acd125665422973a33ac9d3dd2df85edad0f4ae9b00dafb1a05e43a9f5ef8e7"; };
    dependencies = {
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".remove_dir_all."0.7.0" = overridableMkRustCrate (profileName: rec {
    name = "remove_dir_all";
    version = "0.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "882f368737489ea543bc5c340e6f3d34a28c39980bd9a979e47322b26f60ac40"; };
    dependencies = {
      ${ if !hostPlatform.isWindows then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.125" { inherit profileName; };
      ${ if hostPlatform.isWindows then "log" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.17" { inherit profileName; };
      ${ if hostPlatform.isWindows then "num_cpus" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num_cpus."1.13.1" { inherit profileName; };
      ${ if hostPlatform.isWindows then "rayon" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rayon."1.5.2" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rend."0.3.6" = overridableMkRustCrate (profileName: rec {
    name = "rend";
    version = "0.3.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "79af64b4b6362ffba04eef3a4e10829718a4896dac19daa741851c86781edf95"; };
    features = builtins.concatLists [
      [ "bytecheck" ]
      [ "std" ]
    ];
    dependencies = {
      bytecheck = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytecheck."0.6.8" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".renderdoc-sys."0.7.1" = overridableMkRustCrate (profileName: rec {
    name = "renderdoc-sys";
    version = "0.7.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f1382d1f0a252c4bf97dc20d979a2fdd05b024acd7c2ed0f7595d7817666a157"; };
  });
  
  "unknown".repl_test."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "repl_test";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/repl_test");
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "repl_test/wasm") "wasm")
    ];
    dependencies = {
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
    };
    devDependencies = {
      indoc = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".indoc."1.0.6" { profileName = "__noProfile"; };
      roc_repl_cli = rustPackages."unknown".roc_repl_cli."0.1.0" { inherit profileName; };
      roc_test_utils = rustPackages."unknown".roc_test_utils."0.1.0" { inherit profileName; };
      strip_ansi_escapes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".strip-ansi-escapes."0.1.1" { inherit profileName; };
      ${ if !(hostPlatform.parsed.cpu.name == "x86_64") || hostPlatform.parsed.cpu.name == "x86_64" then "wasmer" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmer."2.2.1" { inherit profileName; };
      wasmer_wasi = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmer-wasi."2.2.1" { inherit profileName; };
    };
    buildDependencies = {
      roc_cli = buildRustPackages."unknown".roc_cli."0.1.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rkyv."0.7.38" = overridableMkRustCrate (profileName: rec {
    name = "rkyv";
    version = "0.7.38";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "517a3034eb2b1499714e9d1e49b2367ad567e07639b69776d35e259d9c27cca6"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "bytecheck" ]
      [ "default" ]
      [ "hashbrown" ]
      [ "rend" ]
      [ "size_32" ]
      [ "std" ]
    ];
    dependencies = {
      bytecheck = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytecheck."0.6.8" { inherit profileName; };
      hashbrown = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.12.1" { inherit profileName; };
      ptr_meta = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ptr_meta."0.1.4" { inherit profileName; };
      rend = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rend."0.3.6" { inherit profileName; };
      rkyv_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".rkyv_derive."0.7.38" { profileName = "__noProfile"; };
      seahash = rustPackages."registry+https://github.com/rust-lang/crates.io-index".seahash."4.1.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rkyv_derive."0.7.38" = overridableMkRustCrate (profileName: rec {
    name = "rkyv_derive";
    version = "0.7.38";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "505c209ee04111a006431abf39696e640838364d67a107c559ababaf6fd8c9dd"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.38" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.18" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.92" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rlimit."0.6.2" = overridableMkRustCrate (profileName: rec {
    name = "rlimit";
    version = "0.6.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "cc0bf25554376fd362f54332b8410a625c71f15445bca32ffdfdf4ec9ac91726"; };
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.125" { inherit profileName; };
    };
  });
  
  "unknown".roc-bindgen."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "roc-bindgen";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/bindgen");
    dependencies = {
      bumpalo = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bumpalo."3.9.1" { inherit profileName; };
      clap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".clap."3.1.17" { inherit profileName; };
      indoc = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".indoc."1.0.6" { profileName = "__noProfile"; };
      roc_builtins = rustPackages."unknown".roc_builtins."0.1.0" { inherit profileName; };
      roc_can = rustPackages."unknown".roc_can."0.1.0" { inherit profileName; };
      roc_collections = rustPackages."unknown".roc_collections."0.1.0" { inherit profileName; };
      roc_error_macros = rustPackages."unknown".roc_error_macros."0.1.0" { inherit profileName; };
      roc_load = rustPackages."unknown".roc_load."0.1.0" { inherit profileName; };
      roc_module = rustPackages."unknown".roc_module."0.1.0" { inherit profileName; };
      roc_mono = rustPackages."unknown".roc_mono."0.1.0" { inherit profileName; };
      roc_reporting = rustPackages."unknown".roc_reporting."0.1.0" { inherit profileName; };
      roc_std = rustPackages."unknown".roc_std."0.1.0" { inherit profileName; };
      roc_target = rustPackages."unknown".roc_target."0.1.0" { inherit profileName; };
      roc_types = rustPackages."unknown".roc_types."0.1.0" { inherit profileName; };
      target_lexicon = rustPackages."registry+https://github.com/rust-lang/crates.io-index".target-lexicon."0.12.3" { inherit profileName; };
      ven_graph = rustPackages."unknown".ven_graph."2.0.5-pre" { inherit profileName; };
    };
    devDependencies = {
      pretty_assertions = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pretty_assertions."1.2.1" { inherit profileName; };
      tempfile = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tempfile."3.3.0" { inherit profileName; };
    };
  });
  
  "unknown".roc_alias_analysis."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "roc_alias_analysis";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/alias_analysis");
    dependencies = {
      morphic_lib = rustPackages."unknown".morphic_lib."0.1.0" { inherit profileName; };
      roc_collections = rustPackages."unknown".roc_collections."0.1.0" { inherit profileName; };
      roc_debug_flags = rustPackages."unknown".roc_debug_flags."0.1.0" { inherit profileName; };
      roc_module = rustPackages."unknown".roc_module."0.1.0" { inherit profileName; };
      roc_mono = rustPackages."unknown".roc_mono."0.1.0" { inherit profileName; };
    };
  });
  
  "unknown".roc_ast."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "roc_ast";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/ast");
    dependencies = {
      arrayvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.7.2" { inherit profileName; };
      bumpalo = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bumpalo."3.9.1" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.125" { inherit profileName; };
      page_size = rustPackages."registry+https://github.com/rust-lang/crates.io-index".page_size."0.4.2" { inherit profileName; };
      roc_builtins = rustPackages."unknown".roc_builtins."0.1.0" { inherit profileName; };
      roc_can = rustPackages."unknown".roc_can."0.1.0" { inherit profileName; };
      roc_collections = rustPackages."unknown".roc_collections."0.1.0" { inherit profileName; };
      roc_error_macros = rustPackages."unknown".roc_error_macros."0.1.0" { inherit profileName; };
      roc_load = rustPackages."unknown".roc_load."0.1.0" { inherit profileName; };
      roc_module = rustPackages."unknown".roc_module."0.1.0" { inherit profileName; };
      roc_parse = rustPackages."unknown".roc_parse."0.1.0" { inherit profileName; };
      roc_problem = rustPackages."unknown".roc_problem."0.1.0" { inherit profileName; };
      roc_region = rustPackages."unknown".roc_region."0.1.0" { inherit profileName; };
      roc_reporting = rustPackages."unknown".roc_reporting."0.1.0" { inherit profileName; };
      roc_target = rustPackages."unknown".roc_target."0.1.0" { inherit profileName; };
      roc_types = rustPackages."unknown".roc_types."0.1.0" { inherit profileName; };
      roc_unify = rustPackages."unknown".roc_unify."0.1.0" { inherit profileName; };
      snafu = rustPackages."registry+https://github.com/rust-lang/crates.io-index".snafu."0.6.10" { inherit profileName; };
      ven_graph = rustPackages."unknown".ven_graph."2.0.5-pre" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
    devDependencies = {
      indoc = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".indoc."1.0.6" { profileName = "__noProfile"; };
    };
  });
  
  "unknown".roc_build."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "roc_build";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/build");
    features = builtins.concatLists [
      [ "target-aarch64" ]
      (lib.optional (rootFeatures' ? "roc_build/target-arm" || rootFeatures' ? "roc_cli/target-all" || rootFeatures' ? "roc_cli/target-arm" || rootFeatures' ? "roc_repl_cli/target-arm") "target-arm")
      [ "target-wasm32" ]
      (lib.optional (rootFeatures' ? "roc_build/target-x86" || rootFeatures' ? "roc_cli/i386-cli-run" || rootFeatures' ? "roc_cli/target-all" || rootFeatures' ? "roc_cli/target-x86" || rootFeatures' ? "roc_repl_cli/target-x86") "target-x86")
      [ "target-x86_64" ]
    ];
    dependencies = {
      bumpalo = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bumpalo."3.9.1" { inherit profileName; };
      inkwell = rustPackages."unknown".inkwell."0.1.0" { inherit profileName; };
      libloading = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libloading."0.7.3" { inherit profileName; };
      roc_builtins = rustPackages."unknown".roc_builtins."0.1.0" { inherit profileName; };
      roc_can = rustPackages."unknown".roc_can."0.1.0" { inherit profileName; };
      roc_collections = rustPackages."unknown".roc_collections."0.1.0" { inherit profileName; };
      roc_constrain = rustPackages."unknown".roc_constrain."0.1.0" { inherit profileName; };
      roc_error_macros = rustPackages."unknown".roc_error_macros."0.1.0" { inherit profileName; };
      roc_gen_dev = rustPackages."unknown".roc_gen_dev."0.1.0" { inherit profileName; };
      roc_gen_llvm = rustPackages."unknown".roc_gen_llvm."0.1.0" { inherit profileName; };
      roc_gen_wasm = rustPackages."unknown".roc_gen_wasm."0.1.0" { inherit profileName; };
      roc_load = rustPackages."unknown".roc_load."0.1.0" { inherit profileName; };
      roc_module = rustPackages."unknown".roc_module."0.1.0" { inherit profileName; };
      roc_mono = rustPackages."unknown".roc_mono."0.1.0" { inherit profileName; };
      roc_parse = rustPackages."unknown".roc_parse."0.1.0" { inherit profileName; };
      roc_problem = rustPackages."unknown".roc_problem."0.1.0" { inherit profileName; };
      roc_region = rustPackages."unknown".roc_region."0.1.0" { inherit profileName; };
      roc_reporting = rustPackages."unknown".roc_reporting."0.1.0" { inherit profileName; };
      roc_solve = rustPackages."unknown".roc_solve."0.1.0" { inherit profileName; };
      roc_std = rustPackages."unknown".roc_std."0.1.0" { inherit profileName; };
      roc_target = rustPackages."unknown".roc_target."0.1.0" { inherit profileName; };
      roc_types = rustPackages."unknown".roc_types."0.1.0" { inherit profileName; };
      roc_unify = rustPackages."unknown".roc_unify."0.1.0" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "darwin" then "serde_json" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.81" { inherit profileName; };
      target_lexicon = rustPackages."registry+https://github.com/rust-lang/crates.io-index".target-lexicon."0.12.3" { inherit profileName; };
      tempfile = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tempfile."3.3.0" { inherit profileName; };
      wasi_libc_sys = rustPackages."unknown".wasi_libc_sys."0.1.0" { inherit profileName; };
    };
  });
  
  "unknown".roc_builtins."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "roc_builtins";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/builtins");
    dependencies = {
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      roc_collections = rustPackages."unknown".roc_collections."0.1.0" { inherit profileName; };
      roc_module = rustPackages."unknown".roc_module."0.1.0" { inherit profileName; };
      roc_region = rustPackages."unknown".roc_region."0.1.0" { inherit profileName; };
      roc_target = rustPackages."unknown".roc_target."0.1.0" { inherit profileName; };
      roc_types = rustPackages."unknown".roc_types."0.1.0" { inherit profileName; };
    };
    buildDependencies = {
      dunce = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".dunce."1.0.2" { profileName = "__noProfile"; };
    };
  });
  
  "unknown".roc_can."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "roc_can";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/can");
    dependencies = {
      bitvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitvec."1.0.0" { inherit profileName; };
      bumpalo = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bumpalo."3.9.1" { inherit profileName; };
      roc_collections = rustPackages."unknown".roc_collections."0.1.0" { inherit profileName; };
      roc_error_macros = rustPackages."unknown".roc_error_macros."0.1.0" { inherit profileName; };
      roc_exhaustive = rustPackages."unknown".roc_exhaustive."0.1.0" { inherit profileName; };
      roc_module = rustPackages."unknown".roc_module."0.1.0" { inherit profileName; };
      roc_parse = rustPackages."unknown".roc_parse."0.1.0" { inherit profileName; };
      roc_problem = rustPackages."unknown".roc_problem."0.1.0" { inherit profileName; };
      roc_region = rustPackages."unknown".roc_region."0.1.0" { inherit profileName; };
      roc_types = rustPackages."unknown".roc_types."0.1.0" { inherit profileName; };
      static_assertions = rustPackages."registry+https://github.com/rust-lang/crates.io-index".static_assertions."1.1.0" { inherit profileName; };
    };
    devDependencies = {
      indoc = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".indoc."1.0.6" { profileName = "__noProfile"; };
      pretty_assertions = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pretty_assertions."1.2.1" { inherit profileName; };
    };
  });
  
  "unknown".roc_cli."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "roc_cli";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/cli");
    features = builtins.concatLists [
      [ "default" ]
      [ "editor" ]
      (lib.optional (rootFeatures' ? "roc_cli/i386-cli-run") "i386-cli-run")
      [ "roc_editor" ]
      [ "roc_repl_cli" ]
      (lib.optional (rootFeatures' ? "roc_cli/run-wasm32" || rootFeatures' ? "roc_cli/wasm32-cli-run") "run-wasm32")
      [ "target-aarch64" ]
      (lib.optional (rootFeatures' ? "roc_cli/target-all") "target-all")
      (lib.optional (rootFeatures' ? "roc_cli/target-all" || rootFeatures' ? "roc_cli/target-arm") "target-arm")
      [ "target-wasm32" ]
      (lib.optional (rootFeatures' ? "roc_cli/i386-cli-run" || rootFeatures' ? "roc_cli/target-all" || rootFeatures' ? "roc_cli/target-x86") "target-x86")
      [ "target-x86_64" ]
      (lib.optional (rootFeatures' ? "roc_cli/wasm32-cli-run") "wasm32-cli-run")
      (lib.optional (rootFeatures' ? "roc_cli/run-wasm32" || rootFeatures' ? "roc_cli/wasm32-cli-run" || rootFeatures' ? "roc_cli/wasmer") "wasmer")
      (lib.optional (rootFeatures' ? "roc_cli/run-wasm32" || rootFeatures' ? "roc_cli/wasm32-cli-run" || rootFeatures' ? "roc_cli/wasmer-wasi") "wasmer-wasi")
    ];
    dependencies = {
      bumpalo = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bumpalo."3.9.1" { inherit profileName; };
      clap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".clap."3.1.17" { inherit profileName; };
      const_format = rustPackages."registry+https://github.com/rust-lang/crates.io-index".const_format."0.2.23" { inherit profileName; };
      mimalloc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".mimalloc."0.1.29" { inherit profileName; };
      roc_build = rustPackages."unknown".roc_build."0.1.0" { inherit profileName; };
      roc_builtins = rustPackages."unknown".roc_builtins."0.1.0" { inherit profileName; };
      roc_can = rustPackages."unknown".roc_can."0.1.0" { inherit profileName; };
      roc_collections = rustPackages."unknown".roc_collections."0.1.0" { inherit profileName; };
      roc_docs = rustPackages."unknown".roc_docs."0.1.0" { inherit profileName; };
      roc_editor = rustPackages."unknown".roc_editor."0.1.0" { inherit profileName; };
      roc_error_macros = rustPackages."unknown".roc_error_macros."0.1.0" { inherit profileName; };
      roc_fmt = rustPackages."unknown".roc_fmt."0.1.0" { inherit profileName; };
      roc_linker = rustPackages."unknown".roc_linker."0.1.0" { inherit profileName; };
      roc_load = rustPackages."unknown".roc_load."0.1.0" { inherit profileName; };
      roc_module = rustPackages."unknown".roc_module."0.1.0" { inherit profileName; };
      roc_mono = rustPackages."unknown".roc_mono."0.1.0" { inherit profileName; };
      roc_parse = rustPackages."unknown".roc_parse."0.1.0" { inherit profileName; };
      roc_region = rustPackages."unknown".roc_region."0.1.0" { inherit profileName; };
      roc_repl_cli = rustPackages."unknown".roc_repl_cli."0.1.0" { inherit profileName; };
      roc_reporting = rustPackages."unknown".roc_reporting."0.1.0" { inherit profileName; };
      roc_target = rustPackages."unknown".roc_target."0.1.0" { inherit profileName; };
      target_lexicon = rustPackages."registry+https://github.com/rust-lang/crates.io-index".target-lexicon."0.12.3" { inherit profileName; };
      tempfile = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tempfile."3.3.0" { inherit profileName; };
      ${ if !(hostPlatform.parsed.cpu.name == "x86_64") || hostPlatform.parsed.cpu.name == "x86_64" then "wasmer" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmer."2.2.1" { inherit profileName; };
      wasmer_wasi = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmer-wasi."2.2.1" { inherit profileName; };
    };
    devDependencies = {
      cli_utils = rustPackages."unknown".cli_utils."0.1.0" { inherit profileName; };
      criterion = rustPackages."git+https://github.com/Anton-4/criterion.rs".criterion."0.3.5" { inherit profileName; };
      indoc = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".indoc."1.0.6" { profileName = "__noProfile"; };
      pretty_assertions = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pretty_assertions."1.2.1" { inherit profileName; };
      roc_test_utils = rustPackages."unknown".roc_test_utils."0.1.0" { inherit profileName; };
      serial_test = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serial_test."0.5.1" { inherit profileName; };
      strum = rustPackages."registry+https://github.com/rust-lang/crates.io-index".strum."0.24.0" { inherit profileName; };
      strum_macros = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".strum_macros."0.24.0" { profileName = "__noProfile"; };
      ${ if !(hostPlatform.parsed.cpu.name == "x86_64") || hostPlatform.parsed.cpu.name == "x86_64" then "wasmer" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmer."2.2.1" { inherit profileName; };
      wasmer_wasi = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmer-wasi."2.2.1" { inherit profileName; };
    };
  });
  
  "unknown".roc_code_markup."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "roc_code_markup";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/code_markup");
    dependencies = {
      bumpalo = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bumpalo."3.9.1" { inherit profileName; };
      itertools = rustPackages."registry+https://github.com/rust-lang/crates.io-index".itertools."0.10.3" { inherit profileName; };
      palette = rustPackages."registry+https://github.com/rust-lang/crates.io-index".palette."0.6.0" { inherit profileName; };
      roc_ast = rustPackages."unknown".roc_ast."0.1.0" { inherit profileName; };
      roc_module = rustPackages."unknown".roc_module."0.1.0" { inherit profileName; };
      roc_utils = rustPackages."unknown".roc_utils."0.1.0" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.137" { inherit profileName; };
      snafu = rustPackages."registry+https://github.com/rust-lang/crates.io-index".snafu."0.6.10" { inherit profileName; };
    };
  });
  
  "unknown".roc_collections."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "roc_collections";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/collections");
    dependencies = {
      bitvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitvec."1.0.0" { inherit profileName; };
      bumpalo = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bumpalo."3.9.1" { inherit profileName; };
      hashbrown = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.11.2" { inherit profileName; };
      im = rustPackages."registry+https://github.com/rust-lang/crates.io-index".im."15.1.0" { inherit profileName; };
      im_rc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".im-rc."15.1.0" { inherit profileName; };
      wyhash = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wyhash."0.5.0" { inherit profileName; };
    };
  });
  
  "unknown".roc_constrain."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "roc_constrain";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/constrain");
    dependencies = {
      arrayvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.7.2" { inherit profileName; };
      roc_builtins = rustPackages."unknown".roc_builtins."0.1.0" { inherit profileName; };
      roc_can = rustPackages."unknown".roc_can."0.1.0" { inherit profileName; };
      roc_collections = rustPackages."unknown".roc_collections."0.1.0" { inherit profileName; };
      roc_error_macros = rustPackages."unknown".roc_error_macros."0.1.0" { inherit profileName; };
      roc_module = rustPackages."unknown".roc_module."0.1.0" { inherit profileName; };
      roc_parse = rustPackages."unknown".roc_parse."0.1.0" { inherit profileName; };
      roc_region = rustPackages."unknown".roc_region."0.1.0" { inherit profileName; };
      roc_types = rustPackages."unknown".roc_types."0.1.0" { inherit profileName; };
    };
  });
  
  "unknown".roc_debug_flags."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "roc_debug_flags";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/debug_flags");
  });
  
  "unknown".roc_docs."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "roc_docs";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/docs");
    dependencies = {
      bumpalo = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bumpalo."3.9.1" { inherit profileName; };
      peg = rustPackages."registry+https://github.com/rust-lang/crates.io-index".peg."0.8.0" { inherit profileName; };
      pulldown_cmark = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pulldown-cmark."0.8.0" { inherit profileName; };
      roc_ast = rustPackages."unknown".roc_ast."0.1.0" { inherit profileName; };
      roc_builtins = rustPackages."unknown".roc_builtins."0.1.0" { inherit profileName; };
      roc_can = rustPackages."unknown".roc_can."0.1.0" { inherit profileName; };
      roc_code_markup = rustPackages."unknown".roc_code_markup."0.1.0" { inherit profileName; };
      roc_collections = rustPackages."unknown".roc_collections."0.1.0" { inherit profileName; };
      roc_highlight = rustPackages."unknown".roc_highlight."0.1.0" { inherit profileName; };
      roc_load = rustPackages."unknown".roc_load."0.1.0" { inherit profileName; };
      roc_module = rustPackages."unknown".roc_module."0.1.0" { inherit profileName; };
      roc_parse = rustPackages."unknown".roc_parse."0.1.0" { inherit profileName; };
      roc_region = rustPackages."unknown".roc_region."0.1.0" { inherit profileName; };
      roc_reporting = rustPackages."unknown".roc_reporting."0.1.0" { inherit profileName; };
      roc_target = rustPackages."unknown".roc_target."0.1.0" { inherit profileName; };
      roc_types = rustPackages."unknown".roc_types."0.1.0" { inherit profileName; };
      snafu = rustPackages."registry+https://github.com/rust-lang/crates.io-index".snafu."0.6.10" { inherit profileName; };
    };
    devDependencies = {
      pretty_assertions = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pretty_assertions."1.2.1" { inherit profileName; };
    };
  });
  
  "unknown".roc_docs_cli."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "roc_docs_cli";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/docs_cli");
    dependencies = {
      clap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".clap."3.1.17" { inherit profileName; };
      roc_docs = rustPackages."unknown".roc_docs."0.1.0" { inherit profileName; };
    };
  });
  
  "unknown".roc_editor."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "roc_editor";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/editor");
    features = builtins.concatLists [
      [ "default" ]
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "rodio")
      (lib.optional (rootFeatures' ? "roc_editor/with_sound") "with_sound")
    ];
    dependencies = {
      arrayvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.7.2" { inherit profileName; };
      bumpalo = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bumpalo."3.9.1" { inherit profileName; };
      bytemuck = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytemuck."1.9.1" { inherit profileName; };
      cgmath = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cgmath."0.18.0" { inherit profileName; };
      colored = rustPackages."registry+https://github.com/rust-lang/crates.io-index".colored."2.0.0" { inherit profileName; };
      confy = rustPackages."git+https://github.com/rust-cli/confy".confy."0.4.0" { inherit profileName; };
      copypasta = rustPackages."registry+https://github.com/rust-lang/crates.io-index".copypasta."0.7.1" { inherit profileName; };
      env_logger = rustPackages."registry+https://github.com/rust-lang/crates.io-index".env_logger."0.9.0" { inherit profileName; };
      fs_extra = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fs_extra."1.2.0" { inherit profileName; };
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      glyph_brush = rustPackages."registry+https://github.com/rust-lang/crates.io-index".glyph_brush."0.7.4" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.125" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.17" { inherit profileName; };
      nonempty = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nonempty."0.7.0" { inherit profileName; };
      page_size = rustPackages."registry+https://github.com/rust-lang/crates.io-index".page_size."0.4.2" { inherit profileName; };
      palette = rustPackages."registry+https://github.com/rust-lang/crates.io-index".palette."0.6.0" { inherit profileName; };
      pest = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pest."2.1.3" { inherit profileName; };
      pest_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".pest_derive."2.1.0" { profileName = "__noProfile"; };
      roc_ast = rustPackages."unknown".roc_ast."0.1.0" { inherit profileName; };
      roc_builtins = rustPackages."unknown".roc_builtins."0.1.0" { inherit profileName; };
      roc_can = rustPackages."unknown".roc_can."0.1.0" { inherit profileName; };
      roc_code_markup = rustPackages."unknown".roc_code_markup."0.1.0" { inherit profileName; };
      roc_collections = rustPackages."unknown".roc_collections."0.1.0" { inherit profileName; };
      roc_load = rustPackages."unknown".roc_load."0.1.0" { inherit profileName; };
      roc_module = rustPackages."unknown".roc_module."0.1.0" { inherit profileName; };
      roc_parse = rustPackages."unknown".roc_parse."0.1.0" { inherit profileName; };
      roc_problem = rustPackages."unknown".roc_problem."0.1.0" { inherit profileName; };
      roc_region = rustPackages."unknown".roc_region."0.1.0" { inherit profileName; };
      roc_reporting = rustPackages."unknown".roc_reporting."0.1.0" { inherit profileName; };
      roc_solve = rustPackages."unknown".roc_solve."0.1.0" { inherit profileName; };
      roc_types = rustPackages."unknown".roc_types."0.1.0" { inherit profileName; };
      roc_unify = rustPackages."unknown".roc_unify."0.1.0" { inherit profileName; };
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "rodio" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rodio."0.14.0" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.137" { inherit profileName; };
      snafu = rustPackages."registry+https://github.com/rust-lang/crates.io-index".snafu."0.6.10" { inherit profileName; };
      threadpool = rustPackages."registry+https://github.com/rust-lang/crates.io-index".threadpool."1.8.1" { inherit profileName; };
      ven_graph = rustPackages."unknown".ven_graph."2.0.5-pre" { inherit profileName; };
      wgpu = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wgpu."0.11.1" { inherit profileName; };
      wgpu_glyph = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wgpu_glyph."0.15.2" { inherit profileName; };
      winit = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winit."0.25.0" { inherit profileName; };
    };
    devDependencies = {
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; };
      tempfile = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tempfile."3.3.0" { inherit profileName; };
      uuid = rustPackages."registry+https://github.com/rust-lang/crates.io-index".uuid."0.8.2" { inherit profileName; };
    };
  });
  
  "unknown".roc_error_macros."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "roc_error_macros";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/error_macros");
  });
  
  "unknown".roc_exhaustive."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "roc_exhaustive";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/exhaustive");
    dependencies = {
      roc_collections = rustPackages."unknown".roc_collections."0.1.0" { inherit profileName; };
      roc_module = rustPackages."unknown".roc_module."0.1.0" { inherit profileName; };
      roc_region = rustPackages."unknown".roc_region."0.1.0" { inherit profileName; };
      roc_std = rustPackages."unknown".roc_std."0.1.0" { inherit profileName; };
    };
  });
  
  "unknown".roc_fmt."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "roc_fmt";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/fmt");
    dependencies = {
      bumpalo = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bumpalo."3.9.1" { inherit profileName; };
      roc_collections = rustPackages."unknown".roc_collections."0.1.0" { inherit profileName; };
      roc_module = rustPackages."unknown".roc_module."0.1.0" { inherit profileName; };
      roc_parse = rustPackages."unknown".roc_parse."0.1.0" { inherit profileName; };
      roc_region = rustPackages."unknown".roc_region."0.1.0" { inherit profileName; };
    };
    devDependencies = {
      indoc = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".indoc."1.0.6" { profileName = "__noProfile"; };
      pretty_assertions = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pretty_assertions."1.2.1" { inherit profileName; };
      roc_test_utils = rustPackages."unknown".roc_test_utils."0.1.0" { inherit profileName; };
      walkdir = rustPackages."registry+https://github.com/rust-lang/crates.io-index".walkdir."2.3.2" { inherit profileName; };
    };
  });
  
  "unknown".roc_gen_dev."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "roc_gen_dev";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/gen_dev");
    features = builtins.concatLists [
      [ "target-aarch64" ]
      [ "target-x86_64" ]
    ];
    dependencies = {
      bumpalo = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bumpalo."3.9.1" { inherit profileName; };
      object = rustPackages."registry+https://github.com/rust-lang/crates.io-index".object."0.26.2" { inherit profileName; };
      packed_struct = rustPackages."registry+https://github.com/rust-lang/crates.io-index".packed_struct."0.10.0" { inherit profileName; };
      roc_builtins = rustPackages."unknown".roc_builtins."0.1.0" { inherit profileName; };
      roc_collections = rustPackages."unknown".roc_collections."0.1.0" { inherit profileName; };
      roc_error_macros = rustPackages."unknown".roc_error_macros."0.1.0" { inherit profileName; };
      roc_module = rustPackages."unknown".roc_module."0.1.0" { inherit profileName; };
      roc_mono = rustPackages."unknown".roc_mono."0.1.0" { inherit profileName; };
      roc_problem = rustPackages."unknown".roc_problem."0.1.0" { inherit profileName; };
      roc_region = rustPackages."unknown".roc_region."0.1.0" { inherit profileName; };
      roc_solve = rustPackages."unknown".roc_solve."0.1.0" { inherit profileName; };
      roc_target = rustPackages."unknown".roc_target."0.1.0" { inherit profileName; };
      roc_types = rustPackages."unknown".roc_types."0.1.0" { inherit profileName; };
      roc_unify = rustPackages."unknown".roc_unify."0.1.0" { inherit profileName; };
      target_lexicon = rustPackages."registry+https://github.com/rust-lang/crates.io-index".target-lexicon."0.12.3" { inherit profileName; };
    };
    devDependencies = {
      bumpalo = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bumpalo."3.9.1" { inherit profileName; };
      roc_can = rustPackages."unknown".roc_can."0.1.0" { inherit profileName; };
      roc_parse = rustPackages."unknown".roc_parse."0.1.0" { inherit profileName; };
      roc_std = rustPackages."unknown".roc_std."0.1.0" { inherit profileName; };
    };
  });
  
  "unknown".roc_gen_llvm."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "roc_gen_llvm";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/gen_llvm");
    dependencies = {
      bumpalo = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bumpalo."3.9.1" { inherit profileName; };
      inkwell = rustPackages."unknown".inkwell."0.1.0" { inherit profileName; };
      morphic_lib = rustPackages."unknown".morphic_lib."0.1.0" { inherit profileName; };
      roc_alias_analysis = rustPackages."unknown".roc_alias_analysis."0.1.0" { inherit profileName; };
      roc_builtins = rustPackages."unknown".roc_builtins."0.1.0" { inherit profileName; };
      roc_collections = rustPackages."unknown".roc_collections."0.1.0" { inherit profileName; };
      roc_debug_flags = rustPackages."unknown".roc_debug_flags."0.1.0" { inherit profileName; };
      roc_error_macros = rustPackages."unknown".roc_error_macros."0.1.0" { inherit profileName; };
      roc_module = rustPackages."unknown".roc_module."0.1.0" { inherit profileName; };
      roc_mono = rustPackages."unknown".roc_mono."0.1.0" { inherit profileName; };
      roc_std = rustPackages."unknown".roc_std."0.1.0" { inherit profileName; };
      roc_target = rustPackages."unknown".roc_target."0.1.0" { inherit profileName; };
      target_lexicon = rustPackages."registry+https://github.com/rust-lang/crates.io-index".target-lexicon."0.12.3" { inherit profileName; };
    };
  });
  
  "unknown".roc_gen_wasm."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "roc_gen_wasm";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/gen_wasm");
    dependencies = {
      bumpalo = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bumpalo."3.9.1" { inherit profileName; };
      roc_builtins = rustPackages."unknown".roc_builtins."0.1.0" { inherit profileName; };
      roc_collections = rustPackages."unknown".roc_collections."0.1.0" { inherit profileName; };
      roc_error_macros = rustPackages."unknown".roc_error_macros."0.1.0" { inherit profileName; };
      roc_module = rustPackages."unknown".roc_module."0.1.0" { inherit profileName; };
      roc_mono = rustPackages."unknown".roc_mono."0.1.0" { inherit profileName; };
      roc_std = rustPackages."unknown".roc_std."0.1.0" { inherit profileName; };
      roc_target = rustPackages."unknown".roc_target."0.1.0" { inherit profileName; };
    };
  });
  
  "unknown".roc_highlight."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "roc_highlight";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/highlight");
    dependencies = {
      peg = rustPackages."registry+https://github.com/rust-lang/crates.io-index".peg."0.8.0" { inherit profileName; };
      roc_code_markup = rustPackages."unknown".roc_code_markup."0.1.0" { inherit profileName; };
    };
  });
  
  "unknown".roc_ident."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "roc_ident";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/ident");
  });
  
  "unknown".roc_linker."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "roc_linker";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/linker");
    dependencies = {
      bincode = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bincode."1.3.3" { inherit profileName; };
      bumpalo = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bumpalo."3.9.1" { inherit profileName; };
      clap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".clap."3.1.17" { inherit profileName; };
      iced_x86 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".iced-x86."1.17.0" { inherit profileName; };
      memmap2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memmap2."0.5.3" { inherit profileName; };
      object = rustPackages."registry+https://github.com/rust-lang/crates.io-index".object."0.26.2" { inherit profileName; };
      roc_build = rustPackages."unknown".roc_build."0.1.0" { inherit profileName; };
      roc_collections = rustPackages."unknown".roc_collections."0.1.0" { inherit profileName; };
      roc_mono = rustPackages."unknown".roc_mono."0.1.0" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.137" { inherit profileName; };
      target_lexicon = rustPackages."registry+https://github.com/rust-lang/crates.io-index".target-lexicon."0.12.3" { inherit profileName; };
      tempfile = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tempfile."3.3.0" { inherit profileName; };
    };
  });
  
  "unknown".roc_load."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "roc_load";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/load");
    dependencies = {
      bumpalo = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bumpalo."3.9.1" { inherit profileName; };
      roc_collections = rustPackages."unknown".roc_collections."0.1.0" { inherit profileName; };
      roc_constrain = rustPackages."unknown".roc_constrain."0.1.0" { inherit profileName; };
      roc_load_internal = rustPackages."unknown".roc_load_internal."0.1.0" { inherit profileName; };
      roc_module = rustPackages."unknown".roc_module."0.1.0" { inherit profileName; };
      roc_reporting = rustPackages."unknown".roc_reporting."0.1.0" { inherit profileName; };
      roc_target = rustPackages."unknown".roc_target."0.1.0" { inherit profileName; };
      roc_types = rustPackages."unknown".roc_types."0.1.0" { inherit profileName; };
    };
    buildDependencies = {
      bumpalo = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".bumpalo."3.9.1" { profileName = "__noProfile"; };
      roc_builtins = buildRustPackages."unknown".roc_builtins."0.1.0" { profileName = "__noProfile"; };
      roc_load_internal = buildRustPackages."unknown".roc_load_internal."0.1.0" { profileName = "__noProfile"; };
      roc_module = buildRustPackages."unknown".roc_module."0.1.0" { profileName = "__noProfile"; };
      roc_reporting = buildRustPackages."unknown".roc_reporting."0.1.0" { profileName = "__noProfile"; };
      roc_target = buildRustPackages."unknown".roc_target."0.1.0" { profileName = "__noProfile"; };
    };
  });
  
  "unknown".roc_load_internal."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "roc_load_internal";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/load_internal");
    dependencies = {
      bumpalo = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bumpalo."3.9.1" { inherit profileName; };
      crossbeam = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam."0.8.1" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.0" { inherit profileName; };
      roc_builtins = rustPackages."unknown".roc_builtins."0.1.0" { inherit profileName; };
      roc_can = rustPackages."unknown".roc_can."0.1.0" { inherit profileName; };
      roc_collections = rustPackages."unknown".roc_collections."0.1.0" { inherit profileName; };
      roc_constrain = rustPackages."unknown".roc_constrain."0.1.0" { inherit profileName; };
      roc_debug_flags = rustPackages."unknown".roc_debug_flags."0.1.0" { inherit profileName; };
      roc_error_macros = rustPackages."unknown".roc_error_macros."0.1.0" { inherit profileName; };
      roc_module = rustPackages."unknown".roc_module."0.1.0" { inherit profileName; };
      roc_mono = rustPackages."unknown".roc_mono."0.1.0" { inherit profileName; };
      roc_parse = rustPackages."unknown".roc_parse."0.1.0" { inherit profileName; };
      roc_problem = rustPackages."unknown".roc_problem."0.1.0" { inherit profileName; };
      roc_region = rustPackages."unknown".roc_region."0.1.0" { inherit profileName; };
      roc_reporting = rustPackages."unknown".roc_reporting."0.1.0" { inherit profileName; };
      roc_solve = rustPackages."unknown".roc_solve."0.1.0" { inherit profileName; };
      roc_target = rustPackages."unknown".roc_target."0.1.0" { inherit profileName; };
      roc_types = rustPackages."unknown".roc_types."0.1.0" { inherit profileName; };
      roc_unify = rustPackages."unknown".roc_unify."0.1.0" { inherit profileName; };
      ven_pretty = rustPackages."unknown".ven_pretty."0.9.1-alpha.0" { inherit profileName; };
    };
    devDependencies = {
      indoc = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".indoc."1.0.6" { profileName = "__noProfile"; };
      maplit = rustPackages."registry+https://github.com/rust-lang/crates.io-index".maplit."1.0.2" { inherit profileName; };
      pretty_assertions = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pretty_assertions."1.2.1" { inherit profileName; };
      roc_test_utils = rustPackages."unknown".roc_test_utils."0.1.0" { inherit profileName; };
    };
  });
  
  "unknown".roc_module."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "roc_module";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/module");
    dependencies = {
      bumpalo = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bumpalo."3.9.1" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      roc_collections = rustPackages."unknown".roc_collections."0.1.0" { inherit profileName; };
      roc_error_macros = rustPackages."unknown".roc_error_macros."0.1.0" { inherit profileName; };
      roc_ident = rustPackages."unknown".roc_ident."0.1.0" { inherit profileName; };
      roc_region = rustPackages."unknown".roc_region."0.1.0" { inherit profileName; };
      snafu = rustPackages."registry+https://github.com/rust-lang/crates.io-index".snafu."0.6.10" { inherit profileName; };
      static_assertions = rustPackages."registry+https://github.com/rust-lang/crates.io-index".static_assertions."1.1.0" { inherit profileName; };
    };
  });
  
  "unknown".roc_mono."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "roc_mono";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/mono");
    dependencies = {
      bumpalo = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bumpalo."3.9.1" { inherit profileName; };
      hashbrown = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.11.2" { inherit profileName; };
      roc_builtins = rustPackages."unknown".roc_builtins."0.1.0" { inherit profileName; };
      roc_can = rustPackages."unknown".roc_can."0.1.0" { inherit profileName; };
      roc_collections = rustPackages."unknown".roc_collections."0.1.0" { inherit profileName; };
      roc_debug_flags = rustPackages."unknown".roc_debug_flags."0.1.0" { inherit profileName; };
      roc_error_macros = rustPackages."unknown".roc_error_macros."0.1.0" { inherit profileName; };
      roc_exhaustive = rustPackages."unknown".roc_exhaustive."0.1.0" { inherit profileName; };
      roc_module = rustPackages."unknown".roc_module."0.1.0" { inherit profileName; };
      roc_problem = rustPackages."unknown".roc_problem."0.1.0" { inherit profileName; };
      roc_region = rustPackages."unknown".roc_region."0.1.0" { inherit profileName; };
      roc_solve = rustPackages."unknown".roc_solve."0.1.0" { inherit profileName; };
      roc_std = rustPackages."unknown".roc_std."0.1.0" { inherit profileName; };
      roc_target = rustPackages."unknown".roc_target."0.1.0" { inherit profileName; };
      roc_types = rustPackages."unknown".roc_types."0.1.0" { inherit profileName; };
      roc_unify = rustPackages."unknown".roc_unify."0.1.0" { inherit profileName; };
      static_assertions = rustPackages."registry+https://github.com/rust-lang/crates.io-index".static_assertions."1.1.0" { inherit profileName; };
      ven_pretty = rustPackages."unknown".ven_pretty."0.9.1-alpha.0" { inherit profileName; };
    };
  });
  
  "unknown".roc_parse."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "roc_parse";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/parse");
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "roc_parse/parse_debug_trace") "parse_debug_trace")
    ];
    dependencies = {
      bumpalo = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bumpalo."3.9.1" { inherit profileName; };
      encode_unicode = rustPackages."registry+https://github.com/rust-lang/crates.io-index".encode_unicode."0.3.6" { inherit profileName; };
      roc_collections = rustPackages."unknown".roc_collections."0.1.0" { inherit profileName; };
      roc_module = rustPackages."unknown".roc_module."0.1.0" { inherit profileName; };
      roc_region = rustPackages."unknown".roc_region."0.1.0" { inherit profileName; };
    };
    devDependencies = {
      criterion = rustPackages."registry+https://github.com/rust-lang/crates.io-index".criterion."0.3.5" { inherit profileName; };
      indoc = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".indoc."1.0.6" { profileName = "__noProfile"; };
      pretty_assertions = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pretty_assertions."1.2.1" { inherit profileName; };
      quickcheck = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quickcheck."1.0.3" { inherit profileName; };
      quickcheck_macros = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".quickcheck_macros."1.0.0" { profileName = "__noProfile"; };
      roc_test_utils = rustPackages."unknown".roc_test_utils."0.1.0" { inherit profileName; };
    };
  });
  
  "unknown".roc_problem."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "roc_problem";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/problem");
    dependencies = {
      roc_collections = rustPackages."unknown".roc_collections."0.1.0" { inherit profileName; };
      roc_module = rustPackages."unknown".roc_module."0.1.0" { inherit profileName; };
      roc_parse = rustPackages."unknown".roc_parse."0.1.0" { inherit profileName; };
      roc_region = rustPackages."unknown".roc_region."0.1.0" { inherit profileName; };
      roc_types = rustPackages."unknown".roc_types."0.1.0" { inherit profileName; };
    };
  });
  
  "unknown".roc_region."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "roc_region";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/region");
    dependencies = {
      static_assertions = rustPackages."registry+https://github.com/rust-lang/crates.io-index".static_assertions."1.1.0" { inherit profileName; };
    };
  });
  
  "unknown".roc_repl_cli."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "roc_repl_cli";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/repl_cli");
    features = builtins.concatLists [
      [ "target-aarch64" ]
      (lib.optional (rootFeatures' ? "roc_cli/target-all" || rootFeatures' ? "roc_cli/target-arm" || rootFeatures' ? "roc_repl_cli/target-arm") "target-arm")
      [ "target-wasm32" ]
      (lib.optional (rootFeatures' ? "roc_cli/i386-cli-run" || rootFeatures' ? "roc_cli/target-all" || rootFeatures' ? "roc_cli/target-x86" || rootFeatures' ? "roc_repl_cli/target-x86") "target-x86")
      [ "target-x86_64" ]
    ];
    dependencies = {
      bumpalo = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bumpalo."3.9.1" { inherit profileName; };
      const_format = rustPackages."registry+https://github.com/rust-lang/crates.io-index".const_format."0.2.23" { inherit profileName; };
      inkwell = rustPackages."unknown".inkwell."0.1.0" { inherit profileName; };
      libloading = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libloading."0.7.3" { inherit profileName; };
      roc_build = rustPackages."unknown".roc_build."0.1.0" { inherit profileName; };
      roc_builtins = rustPackages."unknown".roc_builtins."0.1.0" { inherit profileName; };
      roc_collections = rustPackages."unknown".roc_collections."0.1.0" { inherit profileName; };
      roc_gen_llvm = rustPackages."unknown".roc_gen_llvm."0.1.0" { inherit profileName; };
      roc_load = rustPackages."unknown".roc_load."0.1.0" { inherit profileName; };
      roc_mono = rustPackages."unknown".roc_mono."0.1.0" { inherit profileName; };
      roc_parse = rustPackages."unknown".roc_parse."0.1.0" { inherit profileName; };
      roc_repl_eval = rustPackages."unknown".roc_repl_eval."0.1.0" { inherit profileName; };
      roc_reporting = rustPackages."unknown".roc_reporting."0.1.0" { inherit profileName; };
      roc_std = rustPackages."unknown".roc_std."0.1.0" { inherit profileName; };
      roc_target = rustPackages."unknown".roc_target."0.1.0" { inherit profileName; };
      roc_types = rustPackages."unknown".roc_types."0.1.0" { inherit profileName; };
      rustyline = rustPackages."git+https://github.com/rtfeldman/rustyline".rustyline."9.1.1" { inherit profileName; };
      rustyline_derive = buildRustPackages."git+https://github.com/rtfeldman/rustyline".rustyline-derive."0.6.0" { profileName = "__noProfile"; };
      target_lexicon = rustPackages."registry+https://github.com/rust-lang/crates.io-index".target-lexicon."0.12.3" { inherit profileName; };
    };
  });
  
  "unknown".roc_repl_eval."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "roc_repl_eval";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/repl_eval");
    dependencies = {
      bumpalo = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bumpalo."3.9.1" { inherit profileName; };
      roc_builtins = rustPackages."unknown".roc_builtins."0.1.0" { inherit profileName; };
      roc_can = rustPackages."unknown".roc_can."0.1.0" { inherit profileName; };
      roc_collections = rustPackages."unknown".roc_collections."0.1.0" { inherit profileName; };
      roc_fmt = rustPackages."unknown".roc_fmt."0.1.0" { inherit profileName; };
      roc_load = rustPackages."unknown".roc_load."0.1.0" { inherit profileName; };
      roc_module = rustPackages."unknown".roc_module."0.1.0" { inherit profileName; };
      roc_mono = rustPackages."unknown".roc_mono."0.1.0" { inherit profileName; };
      roc_parse = rustPackages."unknown".roc_parse."0.1.0" { inherit profileName; };
      roc_region = rustPackages."unknown".roc_region."0.1.0" { inherit profileName; };
      roc_reporting = rustPackages."unknown".roc_reporting."0.1.0" { inherit profileName; };
      roc_std = rustPackages."unknown".roc_std."0.1.0" { inherit profileName; };
      roc_target = rustPackages."unknown".roc_target."0.1.0" { inherit profileName; };
      roc_types = rustPackages."unknown".roc_types."0.1.0" { inherit profileName; };
    };
  });
  
  "unknown".roc_repl_wasm."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "roc_repl_wasm";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/repl_wasm");
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "roc_repl_wasm/console_error_panic_hook") "console_error_panic_hook")
      (lib.optional (rootFeatures' ? "roc_repl_wasm/futures" || rootFeatures' ? "roc_repl_wasm/wasmer") "futures")
      (lib.optional (rootFeatures' ? "roc_repl_wasm/wasmer") "wasmer")
    ];
    dependencies = {
      bumpalo = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bumpalo."3.9.1" { inherit profileName; };
      ${ if rootFeatures' ? "roc_repl_wasm/console_error_panic_hook" then "console_error_panic_hook" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".console_error_panic_hook."0.1.7" { inherit profileName; };
      ${ if rootFeatures' ? "roc_repl_wasm/futures" || rootFeatures' ? "roc_repl_wasm/wasmer" then "futures" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      js_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.57" { inherit profileName; };
      roc_collections = rustPackages."unknown".roc_collections."0.1.0" { inherit profileName; };
      roc_gen_wasm = rustPackages."unknown".roc_gen_wasm."0.1.0" { inherit profileName; };
      roc_load = rustPackages."unknown".roc_load."0.1.0" { inherit profileName; };
      roc_parse = rustPackages."unknown".roc_parse."0.1.0" { inherit profileName; };
      roc_repl_eval = rustPackages."unknown".roc_repl_eval."0.1.0" { inherit profileName; };
      roc_reporting = rustPackages."unknown".roc_reporting."0.1.0" { inherit profileName; };
      roc_target = rustPackages."unknown".roc_target."0.1.0" { inherit profileName; };
      roc_types = rustPackages."unknown".roc_types."0.1.0" { inherit profileName; };
      wasm_bindgen = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.80" { inherit profileName; };
      wasm_bindgen_futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-futures."0.4.30" { inherit profileName; };
    };
    buildDependencies = {
      roc_builtins = buildRustPackages."unknown".roc_builtins."0.1.0" { profileName = "__noProfile"; };
    };
  });
  
  "unknown".roc_reporting."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "roc_reporting";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/reporting");
    dependencies = {
      bumpalo = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bumpalo."3.9.1" { inherit profileName; };
      distance = rustPackages."registry+https://github.com/rust-lang/crates.io-index".distance."0.4.0" { inherit profileName; };
      roc_can = rustPackages."unknown".roc_can."0.1.0" { inherit profileName; };
      roc_collections = rustPackages."unknown".roc_collections."0.1.0" { inherit profileName; };
      roc_exhaustive = rustPackages."unknown".roc_exhaustive."0.1.0" { inherit profileName; };
      roc_module = rustPackages."unknown".roc_module."0.1.0" { inherit profileName; };
      roc_parse = rustPackages."unknown".roc_parse."0.1.0" { inherit profileName; };
      roc_problem = rustPackages."unknown".roc_problem."0.1.0" { inherit profileName; };
      roc_region = rustPackages."unknown".roc_region."0.1.0" { inherit profileName; };
      roc_solve = rustPackages."unknown".roc_solve."0.1.0" { inherit profileName; };
      roc_types = rustPackages."unknown".roc_types."0.1.0" { inherit profileName; };
      ven_pretty = rustPackages."unknown".ven_pretty."0.9.1-alpha.0" { inherit profileName; };
    };
    devDependencies = {
      indoc = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".indoc."1.0.6" { profileName = "__noProfile"; };
      pretty_assertions = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pretty_assertions."1.2.1" { inherit profileName; };
      roc_builtins = rustPackages."unknown".roc_builtins."0.1.0" { inherit profileName; };
      roc_constrain = rustPackages."unknown".roc_constrain."0.1.0" { inherit profileName; };
      roc_load = rustPackages."unknown".roc_load."0.1.0" { inherit profileName; };
      roc_parse = rustPackages."unknown".roc_parse."0.1.0" { inherit profileName; };
      roc_problem = rustPackages."unknown".roc_problem."0.1.0" { inherit profileName; };
      roc_target = rustPackages."unknown".roc_target."0.1.0" { inherit profileName; };
      roc_test_utils = rustPackages."unknown".roc_test_utils."0.1.0" { inherit profileName; };
    };
  });
  
  "unknown".roc_solve."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "roc_solve";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/solve");
    dependencies = {
      arrayvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.7.2" { inherit profileName; };
      bumpalo = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bumpalo."3.9.1" { inherit profileName; };
      roc_can = rustPackages."unknown".roc_can."0.1.0" { inherit profileName; };
      roc_collections = rustPackages."unknown".roc_collections."0.1.0" { inherit profileName; };
      roc_debug_flags = rustPackages."unknown".roc_debug_flags."0.1.0" { inherit profileName; };
      roc_error_macros = rustPackages."unknown".roc_error_macros."0.1.0" { inherit profileName; };
      roc_exhaustive = rustPackages."unknown".roc_exhaustive."0.1.0" { inherit profileName; };
      roc_module = rustPackages."unknown".roc_module."0.1.0" { inherit profileName; };
      roc_region = rustPackages."unknown".roc_region."0.1.0" { inherit profileName; };
      roc_types = rustPackages."unknown".roc_types."0.1.0" { inherit profileName; };
      roc_unify = rustPackages."unknown".roc_unify."0.1.0" { inherit profileName; };
    };
    devDependencies = {
      bumpalo = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bumpalo."3.9.1" { inherit profileName; };
      indoc = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".indoc."1.0.6" { profileName = "__noProfile"; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      pretty_assertions = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pretty_assertions."1.2.1" { inherit profileName; };
      regex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.5.5" { inherit profileName; };
      roc_builtins = rustPackages."unknown".roc_builtins."0.1.0" { inherit profileName; };
      roc_load = rustPackages."unknown".roc_load."0.1.0" { inherit profileName; };
      roc_parse = rustPackages."unknown".roc_parse."0.1.0" { inherit profileName; };
      roc_problem = rustPackages."unknown".roc_problem."0.1.0" { inherit profileName; };
      roc_reporting = rustPackages."unknown".roc_reporting."0.1.0" { inherit profileName; };
      roc_solve = rustPackages."unknown".roc_solve."0.1.0" { inherit profileName; };
      roc_target = rustPackages."unknown".roc_target."0.1.0" { inherit profileName; };
      tempfile = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tempfile."3.3.0" { inherit profileName; };
    };
  });
  
  "unknown".roc_std."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "roc_std";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/roc_std");
    features = builtins.concatLists [
      [ "default" ]
      [ "platform" ]
    ];
    dependencies = {
      static_assertions = rustPackages."registry+https://github.com/rust-lang/crates.io-index".static_assertions."0.1.1" { inherit profileName; };
    };
  });
  
  "unknown".roc_target."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "roc_target";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/roc_target");
    dependencies = {
      target_lexicon = rustPackages."registry+https://github.com/rust-lang/crates.io-index".target-lexicon."0.12.3" { inherit profileName; };
    };
  });
  
  "unknown".roc_test_utils."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "roc_test_utils";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/test_utils");
    dependencies = {
      pretty_assertions = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pretty_assertions."1.2.1" { inherit profileName; };
      remove_dir_all = rustPackages."registry+https://github.com/rust-lang/crates.io-index".remove_dir_all."0.7.0" { inherit profileName; };
    };
  });
  
  "unknown".roc_types."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "roc_types";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/types");
    dependencies = {
      bumpalo = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bumpalo."3.9.1" { inherit profileName; };
      roc_collections = rustPackages."unknown".roc_collections."0.1.0" { inherit profileName; };
      roc_debug_flags = rustPackages."unknown".roc_debug_flags."0.1.0" { inherit profileName; };
      roc_error_macros = rustPackages."unknown".roc_error_macros."0.1.0" { inherit profileName; };
      roc_module = rustPackages."unknown".roc_module."0.1.0" { inherit profileName; };
      roc_region = rustPackages."unknown".roc_region."0.1.0" { inherit profileName; };
      static_assertions = rustPackages."registry+https://github.com/rust-lang/crates.io-index".static_assertions."1.1.0" { inherit profileName; };
      ven_ena = rustPackages."unknown".ven_ena."0.13.1" { inherit profileName; };
    };
  });
  
  "unknown".roc_unify."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "roc_unify";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/unify");
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      roc_collections = rustPackages."unknown".roc_collections."0.1.0" { inherit profileName; };
      roc_debug_flags = rustPackages."unknown".roc_debug_flags."0.1.0" { inherit profileName; };
      roc_error_macros = rustPackages."unknown".roc_error_macros."0.1.0" { inherit profileName; };
      roc_module = rustPackages."unknown".roc_module."0.1.0" { inherit profileName; };
      roc_types = rustPackages."unknown".roc_types."0.1.0" { inherit profileName; };
    };
  });
  
  "unknown".roc_utils."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "roc_utils";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/utils");
    dependencies = {
      snafu = rustPackages."registry+https://github.com/rust-lang/crates.io-index".snafu."0.6.10" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rodio."0.14.0" = overridableMkRustCrate (profileName: rec {
    name = "rodio";
    version = "0.14.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4d98f5e557b61525057e2bc142c8cd7f0e70d75dc32852309bec440e6e046bf9"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "claxon")
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "default")
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "flac")
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "hound")
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "lewton")
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "minimp3")
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "mp3")
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "vorbis")
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "wav")
    ];
    dependencies = {
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "claxon" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".claxon."0.4.3" { inherit profileName; };
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "cpal" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cpal."0.13.5" { inherit profileName; };
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "hound" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hound."3.4.0" { inherit profileName; };
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "lewton" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lewton."0.10.2" { inherit profileName; };
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "minimp3" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".minimp3."0.5.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rustc-demangle."0.1.21" = overridableMkRustCrate (profileName: rec {
    name = "rustc-demangle";
    version = "0.1.21";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7ef03e0a2b150c7a90d01faf6254c9c48a41e95fb2a8c2ac1c6f0d2b9aefc342"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rustc-hash."1.1.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc-hash";
    version = "1.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "08d43f7aa6b08d49f382cde6a7982047c3426db949b1424bc4b7ec9ae12c6ce2"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rustc_version."0.2.3" = overridableMkRustCrate (profileName: rec {
    name = "rustc_version";
    version = "0.2.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "138e3e0acb6c9fb258b19b67cb8abd63c00679d2851805ea151465464fe9030a"; };
    dependencies = {
      semver = rustPackages."registry+https://github.com/rust-lang/crates.io-index".semver."0.9.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rustc_version."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc_version";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bfa0f585226d2e68097d4f95d113b15b83a82e819ab25717ec0590d9584ef366"; };
    dependencies = {
      semver = rustPackages."registry+https://github.com/rust-lang/crates.io-index".semver."1.0.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rustix."0.34.6" = overridableMkRustCrate (profileName: rec {
    name = "rustix";
    version = "0.34.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f3e74b3f02f2b6eb33790923756784614f456de79d821d6b2670dc7d5fbea807"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "io-lifetimes" ]
      [ "std" ]
    ];
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      ${ if !(hostPlatform.parsed.kernel.name == "linux" && (hostPlatform.parsed.cpu.name == "i686" || hostPlatform.parsed.cpu.name == "x86_64" && !(hostPlatform.parsed.cpu.bits == 32) || hostPlatform.parsed.cpu.name == "armv6l" || hostPlatform.parsed.cpu.name == "armv7l" || hostPlatform.parsed.cpu.name == "aarch64" || hostPlatform.parsed.cpu.name == "powerpc64" || hostPlatform.parsed.cpu.name == "riscv64" || hostPlatform.parsed.cpu.name == "mips" || hostPlatform.parsed.cpu.name == "mips64")) then "errno" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".errno."0.2.8" { inherit profileName; };
      io_lifetimes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".io-lifetimes."0.6.1" { inherit profileName; };
      ${ if !(hostPlatform.parsed.kernel.name == "linux" && (hostPlatform.parsed.cpu.name == "i686" || hostPlatform.parsed.cpu.name == "x86_64" && !(hostPlatform.parsed.cpu.bits == 32) || hostPlatform.parsed.cpu.name == "armv6l" || hostPlatform.parsed.cpu.name == "armv7l" || hostPlatform.parsed.cpu.name == "aarch64" || hostPlatform.parsed.cpu.name == "powerpc64" || hostPlatform.parsed.cpu.name == "riscv64" || hostPlatform.parsed.cpu.name == "mips" || hostPlatform.parsed.cpu.name == "mips64")) then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.125" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "linux" && (hostPlatform.parsed.cpu.name == "i686" || hostPlatform.parsed.cpu.name == "x86_64" && !(hostPlatform.parsed.cpu.bits == 32) || hostPlatform.parsed.cpu.name == "armv6l" || hostPlatform.parsed.cpu.name == "armv7l" || hostPlatform.parsed.cpu.name == "aarch64" || hostPlatform.parsed.cpu.name == "powerpc64" || hostPlatform.parsed.cpu.name == "riscv64" || hostPlatform.parsed.cpu.name == "mips" || hostPlatform.parsed.cpu.name == "mips64") then "linux_raw_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".linux-raw-sys."0.0.46" { inherit profileName; };
      ${ if hostPlatform.isWindows && !(hostPlatform.parsed.vendor.name == "uwp") || hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rusttype."0.9.2" = overridableMkRustCrate (profileName: rec {
    name = "rusttype";
    version = "0.9.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "dc7c727aded0be18c5b80c1640eae0ac8e396abf6fa8477d96cb37d18ee5ec59"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "has-atomics" ]
      [ "std" ]
    ];
    dependencies = {
      ab_glyph_rasterizer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ab_glyph_rasterizer."0.1.5" { inherit profileName; };
      owned_ttf_parser = rustPackages."registry+https://github.com/rust-lang/crates.io-index".owned_ttf_parser."0.6.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rustversion."1.0.6" = overridableMkRustCrate (profileName: rec {
    name = "rustversion";
    version = "1.0.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f2cc38e8fa666e2de3c4aba7edeb5ffc5246c1c2ed0e3d17e560aeeba736b23f"; };
  });
  
  "git+https://github.com/rtfeldman/rustyline".rustyline."9.1.1" = overridableMkRustCrate (profileName: rec {
    name = "rustyline";
    version = "9.1.1";
    registry = "git+https://github.com/rtfeldman/rustyline";
    src = fetchCrateGit {
      url = https://github.com/rtfeldman/rustyline;
      name = "rustyline";
      version = "9.1.1";
      rev = "e74333c0d618896b88175bf06645108f996fe6d0";};
    features = builtins.concatLists [
      [ "default" ]
      [ "dirs-next" ]
      [ "with-dirs" ]
    ];
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      ${ if hostPlatform.isWindows then "clipboard_win" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".clipboard-win."4.4.1" { inherit profileName; };
      dirs_next = rustPackages."registry+https://github.com/rust-lang/crates.io-index".dirs-next."2.0.0" { inherit profileName; };
      fd_lock = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fd-lock."3.0.5" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.125" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.17" { inherit profileName; };
      memchr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.5.0" { inherit profileName; };
      ${ if hostPlatform.isUnix then "nix" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nix."0.23.1" { inherit profileName; };
      radix_trie = rustPackages."registry+https://github.com/rust-lang/crates.io-index".radix_trie."0.2.1" { inherit profileName; };
      ${ if hostPlatform.isWindows then "scopeguard" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".scopeguard."1.1.0" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.8.0" { inherit profileName; };
      unicode_segmentation = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-segmentation."1.9.0" { inherit profileName; };
      unicode_width = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-width."0.1.9" { inherit profileName; };
      ${ if hostPlatform.isUnix then "utf8parse" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".utf8parse."0.2.0" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "git+https://github.com/rtfeldman/rustyline".rustyline-derive."0.6.0" = overridableMkRustCrate (profileName: rec {
    name = "rustyline-derive";
    version = "0.6.0";
    registry = "git+https://github.com/rtfeldman/rustyline";
    src = fetchCrateGit {
      url = https://github.com/rtfeldman/rustyline;
      name = "rustyline-derive";
      version = "0.6.0";
      rev = "e74333c0d618896b88175bf06645108f996fe6d0";};
    dependencies = {
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.18" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.92" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ryu."1.0.9" = overridableMkRustCrate (profileName: rec {
    name = "ryu";
    version = "1.0.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "73b4b750c782965c211b42f022f59af1fbceabdd026623714f104152f1ec149f"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".same-file."1.0.6" = overridableMkRustCrate (profileName: rec {
    name = "same-file";
    version = "1.0.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "93fc1dc3aaa9bfed95e02e6eadabb4baf7e3078b0bd1b4d7b6b0b68378900502"; };
    dependencies = {
      ${ if hostPlatform.isWindows then "winapi_util" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi-util."0.1.5" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".scoped-tls."1.0.0" = overridableMkRustCrate (profileName: rec {
    name = "scoped-tls";
    version = "1.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ea6a9290e3c9cf0f18145ef7ffa62d68ee0bf5fcd651017e586dc7fd5da448c2"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".scopeguard."1.1.0" = overridableMkRustCrate (profileName: rec {
    name = "scopeguard";
    version = "1.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d29ab0c6d3fc0ee92fe66e2d99f700eab17a8d57d1c1d3b748380fb20baa78cd"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "use_std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".seahash."4.1.0" = overridableMkRustCrate (profileName: rec {
    name = "seahash";
    version = "4.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1c107b6f4780854c8b126e228ea8869f4d7b71260f962fefb57b996b8959ba6b"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".semver."0.9.0" = overridableMkRustCrate (profileName: rec {
    name = "semver";
    version = "0.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1d7eb9ef2c18661902cc47e535f9bc51b78acd254da71d375c2f6720d9a40403"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      semver_parser = rustPackages."registry+https://github.com/rust-lang/crates.io-index".semver-parser."0.7.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".semver."0.11.0" = overridableMkRustCrate (profileName: rec {
    name = "semver";
    version = "0.11.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f301af10236f6df4160f7c3f04eec6dbc70ace82d23326abad5edee88801c6b6"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      semver_parser = rustPackages."registry+https://github.com/rust-lang/crates.io-index".semver-parser."0.10.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".semver."1.0.9" = overridableMkRustCrate (profileName: rec {
    name = "semver";
    version = "1.0.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8cb243bdfdb5936c8dc3c45762a19d12ab4550cdc753bc247637d4ec35a040fd"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".semver-parser."0.7.0" = overridableMkRustCrate (profileName: rec {
    name = "semver-parser";
    version = "0.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "388a1df253eca08550bef6c72392cfe7c30914bf41df5269b68cbd6ff8f570a3"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".semver-parser."0.10.2" = overridableMkRustCrate (profileName: rec {
    name = "semver-parser";
    version = "0.10.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "00b0bef5b7f9e0df16536d3961cfb6e84331c065b4066afb39768d0e319411f7"; };
    dependencies = {
      pest = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pest."2.1.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".serde."1.0.137" = overridableMkRustCrate (profileName: rec {
    name = "serde";
    version = "1.0.137";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "61ea8d54c77f8315140a05f4c7237403bf38b72704d031543aa1d16abbf517d1"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "derive" ]
      [ "rc" ]
      [ "serde_derive" ]
      [ "std" ]
    ];
    dependencies = {
      serde_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_derive."1.0.137" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".serde-xml-rs."0.5.1" = overridableMkRustCrate (profileName: rec {
    name = "serde-xml-rs";
    version = "0.5.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "65162e9059be2f6a3421ebbb4fef3e74b7d9e7c60c50a0e292c6239f19f1edfa"; };
    dependencies = {
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.17" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.137" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.31" { inherit profileName; };
      xml = rustPackages."registry+https://github.com/rust-lang/crates.io-index".xml-rs."0.8.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".serde_bytes."0.11.6" = overridableMkRustCrate (profileName: rec {
    name = "serde_bytes";
    version = "0.11.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "212e73464ebcde48d723aa02eb270ba62eff38a9b732df31f33f1b4e145f3a54"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.137" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".serde_cbor."0.11.2" = overridableMkRustCrate (profileName: rec {
    name = "serde_cbor";
    version = "0.11.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2bef2ebfde456fb76bbcf9f59315333decc4fda0b2b44b420243c11e0f5ec1f5"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      half = rustPackages."registry+https://github.com/rust-lang/crates.io-index".half."1.8.2" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.137" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".serde_derive."1.0.137" = overridableMkRustCrate (profileName: rec {
    name = "serde_derive";
    version = "1.0.137";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1f26faba0c3959972377d3b2d306ee9f71faee9714294e41bb777f83f88578be"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.38" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.18" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.92" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.81" = overridableMkRustCrate (profileName: rec {
    name = "serde_json";
    version = "1.0.81";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9b7ce2b32a1aed03c558dc61a5cd328f15aff2dbc17daad8fb8af04d2100e15c"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      itoa = rustPackages."registry+https://github.com/rust-lang/crates.io-index".itoa."1.0.1" { inherit profileName; };
      ryu = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ryu."1.0.9" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.137" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".serde_yaml."0.8.24" = overridableMkRustCrate (profileName: rec {
    name = "serde_yaml";
    version = "0.8.24";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "707d15895415db6628332b737c838b88c598522e4dc70647e59b72312924aebc"; };
    dependencies = {
      indexmap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."1.8.1" { inherit profileName; };
      ryu = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ryu."1.0.9" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.137" { inherit profileName; };
      yaml_rust = rustPackages."registry+https://github.com/rust-lang/crates.io-index".yaml-rust."0.4.5" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".serial_test."0.5.1" = overridableMkRustCrate (profileName: rec {
    name = "serial_test";
    version = "0.5.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e0bccbcf40c8938196944a3da0e133e031a33f4d6b72db3bda3cc556e361905d"; };
    dependencies = {
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
      serial_test_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".serial_test_derive."0.5.1" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".serial_test_derive."0.5.1" = overridableMkRustCrate (profileName: rec {
    name = "serial_test_derive";
    version = "0.5.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b2acd6defeddb41eb60bb468f8825d0cfd0c2a76bc03bfd235b6a1dc4f6a1ad5"; };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.38" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.18" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.92" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".sha-1."0.8.2" = overridableMkRustCrate (profileName: rec {
    name = "sha-1";
    version = "0.8.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f7d94d0bede923b3cea61f3f1ff57ff8cdfd77b400fb8f9998949e0cf04163df"; };
    dependencies = {
      block_buffer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".block-buffer."0.7.3" { inherit profileName; };
      digest = rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.8.1" { inherit profileName; };
      fake_simd = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fake-simd."0.1.2" { inherit profileName; };
      opaque_debug = rustPackages."registry+https://github.com/rust-lang/crates.io-index".opaque-debug."0.2.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".sha1."0.6.1" = overridableMkRustCrate (profileName: rec {
    name = "sha1";
    version = "0.6.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c1da05c97445caa12d05e848c4a4fcbbea29e748ac28f7e80e9b010392063770"; };
    dependencies = {
      sha1_smol = rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha1_smol."1.0.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".sha1_smol."1.0.0" = overridableMkRustCrate (profileName: rec {
    name = "sha1_smol";
    version = "1.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ae1a47186c03a32177042e55dbc5fd5aee900b8e0069a8d70fba96a9375cd012"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".sha2."0.9.9" = overridableMkRustCrate (profileName: rec {
    name = "sha2";
    version = "0.9.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4d58a1e1bf39749807d89cf2d98ac2dfa0ff1cb3faa38fbb64dd88ac8013d800"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      block_buffer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".block-buffer."0.9.0" { inherit profileName; };
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "aarch64" || hostPlatform.parsed.cpu.name == "x86_64" || hostPlatform.parsed.cpu.name == "i686" then "cpufeatures" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cpufeatures."0.2.2" { inherit profileName; };
      digest = rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.9.0" { inherit profileName; };
      opaque_debug = rustPackages."registry+https://github.com/rust-lang/crates.io-index".opaque-debug."0.3.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".shlex."1.1.0" = overridableMkRustCrate (profileName: rec {
    name = "shlex";
    version = "1.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "43b2853a4d09f215c24cc5489c992ce46052d359b5109343cbafbf26bc62f8a3"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "default")
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "std")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".siphasher."0.3.10" = overridableMkRustCrate (profileName: rec {
    name = "siphasher";
    version = "0.3.10";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7bd3e3206899af3f8b12af284fafc038cc1dc2b41d1b89dd17297221c5d225de"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".sized-chunks."0.6.5" = overridableMkRustCrate (profileName: rec {
    name = "sized-chunks";
    version = "0.6.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "16d69225bde7a69b235da73377861095455d298f2b970996eec25ddbb42b3d1e"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      bitmaps = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitmaps."2.1.0" { inherit profileName; };
      typenum = rustPackages."registry+https://github.com/rust-lang/crates.io-index".typenum."1.15.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".slab."0.4.6" = overridableMkRustCrate (profileName: rec {
    name = "slab";
    version = "0.4.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "eb703cfe953bccee95685111adeedb76fabe4e97549a58d16f03ea7b9367bb32"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".slice-deque."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "slice-deque";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "31ef6ee280cdefba6d2d0b4b78a84a1c1a3f3a4cec98c2d4231c8bc225de0f25"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "default")
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "use_std")
    ];
    dependencies = {
      ${ if (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") && (hostPlatform.isUnix || hostPlatform.parsed.kernel.name == "dragonfly") then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.125" { inherit profileName; };
      ${ if (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") && (hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios") then "mach" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".mach."0.3.2" { inherit profileName; };
      ${ if (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") && hostPlatform.parsed.kernel.name == "windows" then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".slotmap."1.0.6" = overridableMkRustCrate (profileName: rec {
    name = "slotmap";
    version = "1.0.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e1e08e261d0e8f5c43123b7adf3e4ca1690d655377ac93a03b2c9d3e98de1342"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    buildDependencies = {
      version_check = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.4" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".smallvec."1.8.0" = overridableMkRustCrate (profileName: rec {
    name = "smallvec";
    version = "1.8.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f2dd574626839106c320a323308629dcb1acfc96e32a8cba364ddc61ac23ee83"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".smithay-client-toolkit."0.12.3" = overridableMkRustCrate (profileName: rec {
    name = "smithay-client-toolkit";
    version = "0.12.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4750c76fd5d3ac95fa3ed80fe667d6a3d8590a960e5b575b98eea93339a80b80"; };
    features = builtins.concatLists [
      [ "andrew" ]
      [ "calloop" ]
      [ "default" ]
      [ "frames" ]
    ];
    dependencies = {
      andrew = rustPackages."registry+https://github.com/rust-lang/crates.io-index".andrew."0.3.1" { inherit profileName; };
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      calloop = rustPackages."registry+https://github.com/rust-lang/crates.io-index".calloop."0.6.5" { inherit profileName; };
      dlib = rustPackages."registry+https://github.com/rust-lang/crates.io-index".dlib."0.4.2" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.17" { inherit profileName; };
      memmap2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memmap2."0.1.0" { inherit profileName; };
      nix = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nix."0.18.0" { inherit profileName; };
      wayland_client = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-client."0.28.6" { inherit profileName; };
      wayland_cursor = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-cursor."0.28.6" { inherit profileName; };
      wayland_protocols = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-protocols."0.28.6" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".smithay-client-toolkit."0.15.4" = overridableMkRustCrate (profileName: rec {
    name = "smithay-client-toolkit";
    version = "0.15.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8a28f16a97fa0e8ce563b2774d1e732dd5d4025d2772c5dba0a41a0f90a29da3"; };
    features = builtins.concatLists [
      [ "dlopen" ]
    ];
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      dlib = rustPackages."registry+https://github.com/rust-lang/crates.io-index".dlib."0.5.0" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.17" { inherit profileName; };
      memmap2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memmap2."0.3.1" { inherit profileName; };
      nix = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nix."0.22.3" { inherit profileName; };
      wayland_client = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-client."0.29.4" { inherit profileName; };
      wayland_cursor = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-cursor."0.29.4" { inherit profileName; };
      wayland_protocols = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-protocols."0.29.4" { inherit profileName; };
    };
    buildDependencies = {
      pkg_config = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".pkg-config."0.3.25" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".smithay-clipboard."0.6.5" = overridableMkRustCrate (profileName: rec {
    name = "smithay-clipboard";
    version = "0.6.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "610b551bd25378bfd2b8e7a0fcbd83d427e8f2f6a40c47ae0f70688e9949dd55"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "dlopen" ]
    ];
    dependencies = {
      sctk = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smithay-client-toolkit."0.15.4" { inherit profileName; };
      wayland_client = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-client."0.29.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".snafu."0.6.10" = overridableMkRustCrate (profileName: rec {
    name = "snafu";
    version = "0.6.10";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "eab12d3c261b2308b0d80c26fffb58d17eba81a4be97890101f416b478c79ca7"; };
    features = builtins.concatLists [
      [ "backtrace" ]
      [ "backtraces" ]
      [ "default" ]
      [ "guide" ]
      [ "std" ]
    ];
    dependencies = {
      backtrace = rustPackages."registry+https://github.com/rust-lang/crates.io-index".backtrace."0.3.65" { inherit profileName; };
      doc_comment = rustPackages."registry+https://github.com/rust-lang/crates.io-index".doc-comment."0.3.3" { inherit profileName; };
      snafu_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".snafu-derive."0.6.10" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".snafu-derive."0.6.10" = overridableMkRustCrate (profileName: rec {
    name = "snafu-derive";
    version = "0.6.10";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1508efa03c362e23817f96cde18abed596a25219a8b2c66e8db33c03543d315b"; };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.38" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.18" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.92" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".spirv."0.2.0+1.5.4" = overridableMkRustCrate (profileName: rec {
    name = "spirv";
    version = "0.2.0+1.5.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "246bfa38fe3db3f1dfc8ca5a2cdeb7348c78be2112740cc0ec8ef18b6d94f830"; };
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.15" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".stable_deref_trait."1.2.0" = overridableMkRustCrate (profileName: rec {
    name = "stable_deref_trait";
    version = "1.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a8f112729512f8e442d81f95a8a7ddf2b7c6b8a1a6f509a95864142b30cab2d3"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".standback."0.2.17" = overridableMkRustCrate (profileName: rec {
    name = "standback";
    version = "0.2.17";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e113fb6f3de07a243d434a56ec6f186dfd51cb08448239fe7bcae73f87ff28ff"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    buildDependencies = {
      version_check = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.4" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".static_assertions."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "static_assertions";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f406d6ee68db6796e11ffd7b4d171864c58b7451e79ef9460ea33c287a1f89a7"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".static_assertions."1.1.0" = overridableMkRustCrate (profileName: rec {
    name = "static_assertions";
    version = "1.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a2eb9349b6444b326872e140eb1cf5e7c522154d69e7a0ffb0fb81c06b37543f"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".stdweb."0.1.3" = overridableMkRustCrate (profileName: rec {
    name = "stdweb";
    version = "0.1.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ef5430c8e36b713e13b48a9f709cc21e046723fe44ce34587b73a830203b533e"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".stdweb."0.4.20" = overridableMkRustCrate (profileName: rec {
    name = "stdweb";
    version = "0.4.20";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d022496b16281348b52d0e30ae99e01a73d737b2f45d38fed4edf79f9325a1d5"; };
    dependencies = {
      discard = rustPackages."registry+https://github.com/rust-lang/crates.io-index".discard."1.0.4" { inherit profileName; };
      stdweb_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".stdweb-derive."0.5.3" { profileName = "__noProfile"; };
      stdweb_internal_macros = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".stdweb-internal-macros."0.2.9" { profileName = "__noProfile"; };
      stdweb_internal_runtime = rustPackages."registry+https://github.com/rust-lang/crates.io-index".stdweb-internal-runtime."0.1.5" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" && hostPlatform.parsed.vendor.name == "unknown" && hostPlatform.parsed.kernel.name == "unknown" then "wasm_bindgen" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.80" { inherit profileName; };
    };
    buildDependencies = {
      rustc_version = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc_version."0.2.3" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".stdweb-derive."0.5.3" = overridableMkRustCrate (profileName: rec {
    name = "stdweb-derive";
    version = "0.5.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c87a60a40fccc84bef0652345bbbbbe20a605bf5d0ce81719fc476f5c03b50ef"; };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.38" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.18" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.137" { inherit profileName; };
      serde_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_derive."1.0.137" { profileName = "__noProfile"; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.92" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".stdweb-internal-macros."0.2.9" = overridableMkRustCrate (profileName: rec {
    name = "stdweb-internal-macros";
    version = "0.2.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "58fa5ff6ad0d98d1ffa8cb115892b6e69d67799f6763e162a1c9db421dc22e11"; };
    dependencies = {
      base_x = rustPackages."registry+https://github.com/rust-lang/crates.io-index".base-x."0.2.10" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.38" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.18" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.137" { inherit profileName; };
      serde_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_derive."1.0.137" { profileName = "__noProfile"; };
      serde_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.81" { inherit profileName; };
      sha1 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha1."0.6.1" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.92" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".stdweb-internal-runtime."0.1.5" = overridableMkRustCrate (profileName: rec {
    name = "stdweb-internal-runtime";
    version = "0.1.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "213701ba3370744dcd1a12960caa4843b3d68b4d1c0a5d575e0d65b2ee9d16c0"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".str-buf."1.0.5" = overridableMkRustCrate (profileName: rec {
    name = "str-buf";
    version = "1.0.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d44a3643b4ff9caf57abcee9c2c621d6c03d9135e0d8b589bd9afb5992cb176a"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".strip-ansi-escapes."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "strip-ansi-escapes";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "011cbb39cf7c1f62871aea3cc46e5817b0937b49e9447370c93cacbe93a766d8"; };
    dependencies = {
      vte = rustPackages."registry+https://github.com/rust-lang/crates.io-index".vte."0.10.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".strsim."0.9.3" = overridableMkRustCrate (profileName: rec {
    name = "strsim";
    version = "0.9.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6446ced80d6c486436db5c078dde11a9f73d42b57fb273121e160b84f63d894c"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".strsim."0.10.0" = overridableMkRustCrate (profileName: rec {
    name = "strsim";
    version = "0.10.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "73473c0e59e6d5812c5dfe2a064a6444949f089e20eec9a2e5506596494e4623"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".strum."0.24.0" = overridableMkRustCrate (profileName: rec {
    name = "strum";
    version = "0.24.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e96acfc1b70604b8b2f1ffa4c57e59176c7dbb05d556c71ecd2f5498a1dee7f8"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".strum_macros."0.24.0" = overridableMkRustCrate (profileName: rec {
    name = "strum_macros";
    version = "0.24.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6878079b17446e4d3eba6192bb0a2950d5b14f0ed8424b852310e5a94345d0ef"; };
    dependencies = {
      heck = rustPackages."registry+https://github.com/rust-lang/crates.io-index".heck."0.4.0" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.38" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.18" { inherit profileName; };
      rustversion = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".rustversion."1.0.6" { profileName = "__noProfile"; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.92" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".syn."1.0.92" = overridableMkRustCrate (profileName: rec {
    name = "syn";
    version = "1.0.92";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7ff7c592601f11445996a06f8ad0c27f094a58857c2f89e97974ab9235b92c52"; };
    features = builtins.concatLists [
      [ "clone-impls" ]
      [ "default" ]
      [ "derive" ]
      [ "extra-traits" ]
      [ "fold" ]
      [ "full" ]
      [ "parsing" ]
      [ "printing" ]
      [ "proc-macro" ]
      [ "quote" ]
      [ "visit" ]
      [ "visit-mut" ]
    ];
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.38" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.18" { inherit profileName; };
      unicode_xid = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-xid."0.2.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tap."1.0.1" = overridableMkRustCrate (profileName: rec {
    name = "tap";
    version = "1.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "55937e1799185b12863d447f42597ed69d9928686b8d88a1df17376a097d8369"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".target-lexicon."0.12.3" = overridableMkRustCrate (profileName: rec {
    name = "target-lexicon";
    version = "0.12.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d7fa7e55043acb85fca6b3c01485a2eeb6b69c5d21002e273c79e465f43b7ac1"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tempfile."3.3.0" = overridableMkRustCrate (profileName: rec {
    name = "tempfile";
    version = "3.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5cdb1ef4eaeeaddc8fbd371e5017057064af0911902ef36b39801f67cc6d79e4"; };
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      fastrand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fastrand."1.7.0" { inherit profileName; };
      ${ if hostPlatform.isUnix || hostPlatform.parsed.kernel.name == "wasi" then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.125" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "redox" then "syscall" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".redox_syscall."0.2.13" { inherit profileName; };
      remove_dir_all = rustPackages."registry+https://github.com/rust-lang/crates.io-index".remove_dir_all."0.5.3" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".termcolor."1.1.3" = overridableMkRustCrate (profileName: rec {
    name = "termcolor";
    version = "1.1.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bab24d30b911b2376f3a13cc2cd443142f0c81dda04c118693e35b3835757755"; };
    dependencies = {
      ${ if hostPlatform.isWindows then "winapi_util" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi-util."0.1.5" { inherit profileName; };
    };
  });
  
  "unknown".test_gen."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "test_gen";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/test_gen");
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "test_gen/default") "default")
      (lib.optional (rootFeatures' ? "test_gen/gen-dev") "gen-dev")
      (lib.optional (rootFeatures' ? "test_gen/default" || rootFeatures' ? "test_gen/gen-llvm") "gen-llvm")
      (lib.optional (rootFeatures' ? "test_gen/gen-wasm") "gen-wasm")
      (lib.optional (rootFeatures' ? "test_gen/wasm-cli-run") "wasm-cli-run")
    ];
    devDependencies = {
      bumpalo = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bumpalo."3.9.1" { inherit profileName; };
      either = rustPackages."registry+https://github.com/rust-lang/crates.io-index".either."1.6.1" { inherit profileName; };
      indoc = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".indoc."1.0.6" { profileName = "__noProfile"; };
      inkwell = rustPackages."unknown".inkwell."0.1.0" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.125" { inherit profileName; };
      libloading = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libloading."0.7.3" { inherit profileName; };
      roc_build = rustPackages."unknown".roc_build."0.1.0" { inherit profileName; };
      roc_builtins = rustPackages."unknown".roc_builtins."0.1.0" { inherit profileName; };
      roc_can = rustPackages."unknown".roc_can."0.1.0" { inherit profileName; };
      roc_collections = rustPackages."unknown".roc_collections."0.1.0" { inherit profileName; };
      roc_constrain = rustPackages."unknown".roc_constrain."0.1.0" { inherit profileName; };
      roc_gen_dev = rustPackages."unknown".roc_gen_dev."0.1.0" { inherit profileName; };
      roc_gen_llvm = rustPackages."unknown".roc_gen_llvm."0.1.0" { inherit profileName; };
      roc_gen_wasm = rustPackages."unknown".roc_gen_wasm."0.1.0" { inherit profileName; };
      roc_load = rustPackages."unknown".roc_load."0.1.0" { inherit profileName; };
      roc_module = rustPackages."unknown".roc_module."0.1.0" { inherit profileName; };
      roc_mono = rustPackages."unknown".roc_mono."0.1.0" { inherit profileName; };
      roc_parse = rustPackages."unknown".roc_parse."0.1.0" { inherit profileName; };
      roc_problem = rustPackages."unknown".roc_problem."0.1.0" { inherit profileName; };
      roc_region = rustPackages."unknown".roc_region."0.1.0" { inherit profileName; };
      roc_reporting = rustPackages."unknown".roc_reporting."0.1.0" { inherit profileName; };
      roc_solve = rustPackages."unknown".roc_solve."0.1.0" { inherit profileName; };
      roc_std = rustPackages."unknown".roc_std."0.1.0" { inherit profileName; };
      roc_target = rustPackages."unknown".roc_target."0.1.0" { inherit profileName; };
      roc_types = rustPackages."unknown".roc_types."0.1.0" { inherit profileName; };
      roc_unify = rustPackages."unknown".roc_unify."0.1.0" { inherit profileName; };
      target_lexicon = rustPackages."registry+https://github.com/rust-lang/crates.io-index".target-lexicon."0.12.3" { inherit profileName; };
      tempfile = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tempfile."3.3.0" { inherit profileName; };
      ${ if !(hostPlatform.parsed.cpu.name == "x86_64") || hostPlatform.parsed.cpu.name == "x86_64" then "wasmer" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmer."2.2.1" { inherit profileName; };
      wasmer_wasi = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmer-wasi."2.2.1" { inherit profileName; };
    };
    buildDependencies = {
      roc_builtins = buildRustPackages."unknown".roc_builtins."0.1.0" { profileName = "__noProfile"; };
    };
  });
  
  "unknown".test_mono."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "test_mono";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/test_mono");
    devDependencies = {
      bumpalo = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bumpalo."3.9.1" { inherit profileName; };
      indoc = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".indoc."1.0.6" { profileName = "__noProfile"; };
      roc_builtins = rustPackages."unknown".roc_builtins."0.1.0" { inherit profileName; };
      roc_can = rustPackages."unknown".roc_can."0.1.0" { inherit profileName; };
      roc_collections = rustPackages."unknown".roc_collections."0.1.0" { inherit profileName; };
      roc_load = rustPackages."unknown".roc_load."0.1.0" { inherit profileName; };
      roc_module = rustPackages."unknown".roc_module."0.1.0" { inherit profileName; };
      roc_mono = rustPackages."unknown".roc_mono."0.1.0" { inherit profileName; };
      roc_reporting = rustPackages."unknown".roc_reporting."0.1.0" { inherit profileName; };
      roc_target = rustPackages."unknown".roc_target."0.1.0" { inherit profileName; };
      test_mono_macros = buildRustPackages."unknown".test_mono_macros."0.1.0" { profileName = "__noProfile"; };
    };
  });
  
  "unknown".test_mono_macros."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "test_mono_macros";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/test_mono_macros");
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.38" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.18" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.92" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".textwrap."0.11.0" = overridableMkRustCrate (profileName: rec {
    name = "textwrap";
    version = "0.11.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d326610f408c7a4eb6f51c37c330e496b08506c9457c9d34287ecc38809fb060"; };
    dependencies = {
      unicode_width = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-width."0.1.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".textwrap."0.15.0" = overridableMkRustCrate (profileName: rec {
    name = "textwrap";
    version = "0.15.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b1141d4d61095b28419e22cb0bbf02755f5e54e0526f97f1e3d1d160e60885fb"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.31" = overridableMkRustCrate (profileName: rec {
    name = "thiserror";
    version = "1.0.31";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bd829fe32373d27f76265620b5309d0340cb8550f523c1dda251d6298069069a"; };
    dependencies = {
      thiserror_impl = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror-impl."1.0.31" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".thiserror-impl."1.0.31" = overridableMkRustCrate (profileName: rec {
    name = "thiserror-impl";
    version = "1.0.31";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0396bc89e626244658bef819e22d0cc459e795a5ebe878e6ec336d1674a8d79a"; };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.38" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.18" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.92" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".threadpool."1.8.1" = overridableMkRustCrate (profileName: rec {
    name = "threadpool";
    version = "1.8.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d050e60b33d41c19108b32cea32164033a9013fe3b46cbd4457559bfbf77afaa"; };
    dependencies = {
      num_cpus = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num_cpus."1.13.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".time."0.2.27" = overridableMkRustCrate (profileName: rec {
    name = "time";
    version = "0.2.27";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4752a97f8eebd6854ff91f1c1824cd6160626ac4bd44287f7f4ea2035a02a242"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "deprecated" ]
      [ "libc" ]
      [ "std" ]
      [ "stdweb" ]
      [ "winapi" ]
    ];
    dependencies = {
      const_fn = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".const_fn."0.4.9" { profileName = "__noProfile"; };
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.125" { inherit profileName; };
      standback = rustPackages."registry+https://github.com/rust-lang/crates.io-index".standback."0.2.17" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "stdweb" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".stdweb."0.4.20" { inherit profileName; };
      time_macros = rustPackages."registry+https://github.com/rust-lang/crates.io-index".time-macros."0.1.1" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
    buildDependencies = {
      version_check = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.4" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".time-macros."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "time-macros";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "957e9c6e26f12cb6d0dd7fc776bb67a706312e7299aed74c8dd5b17ebb27e2f1"; };
    dependencies = {
      proc_macro_hack = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro-hack."0.5.19" { profileName = "__noProfile"; };
      time_macros_impl = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".time-macros-impl."0.1.2" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".time-macros-impl."0.1.2" = overridableMkRustCrate (profileName: rec {
    name = "time-macros-impl";
    version = "0.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fd3c141a1b43194f3f56a1411225df8646c55781d5f26db825b3d98507eb482f"; };
    dependencies = {
      proc_macro_hack = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro-hack."0.5.19" { profileName = "__noProfile"; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.38" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.18" { inherit profileName; };
      standback = rustPackages."registry+https://github.com/rust-lang/crates.io-index".standback."0.2.17" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.92" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tinytemplate."1.2.1" = overridableMkRustCrate (profileName: rec {
    name = "tinytemplate";
    version = "1.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "be4d6b5f19ff7664e8c98d03e2139cb510db9b0a60b55f8e8709b689d939b6bc"; };
    dependencies = {
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.137" { inherit profileName; };
      serde_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.81" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tinyvec."1.6.0" = overridableMkRustCrate (profileName: rec {
    name = "tinyvec";
    version = "1.6.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "87cc5ceb3875bb20c2890005a4e226a4651264a5c75edb2421b52861a0a0cb50"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "alloc")
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "default")
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "tinyvec_macros")
    ];
    dependencies = {
      ${ if rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound" then "tinyvec_macros" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tinyvec_macros."0.1.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tinyvec_macros."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "tinyvec_macros";
    version = "0.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "cda74da7e1a664f795bb1f8a87ec406fb89a02522cf6e50620d016add6dbbf5c"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".toml."0.5.9" = overridableMkRustCrate (profileName: rec {
    name = "toml";
    version = "0.5.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8d82e1a7758622a465f8cee077614c73484dac5b836c02ff6a40d5d1010324d7"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.137" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.34" = overridableMkRustCrate (profileName: rec {
    name = "tracing";
    version = "0.1.34";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5d0ecdcb44a79f0fe9844f0c4f33a342cbcbb5117de8001e6ba0dc2351327d09"; };
    features = builtins.concatLists [
      [ "attributes" ]
      [ "default" ]
      [ "log" ]
      [ "std" ]
      [ "tracing-attributes" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.17" { inherit profileName; };
      pin_project_lite = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.9" { inherit profileName; };
      tracing_attributes = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-attributes."0.1.21" { profileName = "__noProfile"; };
      tracing_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-core."0.1.26" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tracing-attributes."0.1.21" = overridableMkRustCrate (profileName: rec {
    name = "tracing-attributes";
    version = "0.1.21";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "cc6b8ad3567499f98a1db7a752b07a7c8c7c7c34c332ec00effb2b0027974b7c"; };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.38" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.18" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.92" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tracing-core."0.1.26" = overridableMkRustCrate (profileName: rec {
    name = "tracing-core";
    version = "0.1.26";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f54c8ca710e81886d498c2fd3331b56c93aa248d49de2222ad2742247c60072f"; };
    features = builtins.concatLists [
      [ "lazy_static" ]
      [ "std" ]
    ];
    dependencies = {
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ttf-parser."0.6.2" = overridableMkRustCrate (profileName: rec {
    name = "ttf-parser";
    version = "0.6.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3e5d7cd7ab3e47dda6e56542f4bbf3824c15234958c6e1bd6aaa347e93499fdc"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ttf-parser."0.15.0" = overridableMkRustCrate (profileName: rec {
    name = "ttf-parser";
    version = "0.15.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c74c96594835e10fa545e2a51e8709f30b173a092bfd6036ef2cec53376244f3"; };
    features = builtins.concatLists [
      [ "apple-layout" ]
      [ "glyph-names" ]
      [ "opentype-layout" ]
      [ "std" ]
      [ "variable-fonts" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".twox-hash."1.6.3" = overridableMkRustCrate (profileName: rec {
    name = "twox-hash";
    version = "1.6.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "97fee6b57c6a41524a810daee9286c02d7752c4253064d0b05472833a438f675"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "rand" ]
      [ "std" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; };
      static_assertions = rustPackages."registry+https://github.com/rust-lang/crates.io-index".static_assertions."1.1.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".typed-arena."2.0.1" = overridableMkRustCrate (profileName: rec {
    name = "typed-arena";
    version = "2.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0685c84d5d54d1c26f7d3eb96cd41550adb97baed141a761cf335d3d33bcd0ae"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".typenum."1.15.0" = overridableMkRustCrate (profileName: rec {
    name = "typenum";
    version = "1.15.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "dcf81ac59edc17cc8697ff311e8f5ef2d99fcbd9817b34cec66f90b6c3dfd987"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ucd-trie."0.1.3" = overridableMkRustCrate (profileName: rec {
    name = "ucd-trie";
    version = "0.1.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "56dee185309b50d1f11bfedef0fe6d036842e3fb77413abef29f8f8d1c5d4c1c"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".unicase."2.6.0" = overridableMkRustCrate (profileName: rec {
    name = "unicase";
    version = "2.6.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "50f37be617794602aabbeee0be4f259dc1778fabe05e2d67ee8f79326d5cb4f6"; };
    buildDependencies = {
      version_check = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.4" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".unicode-segmentation."1.9.0" = overridableMkRustCrate (profileName: rec {
    name = "unicode-segmentation";
    version = "1.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7e8820f5d777f6224dc4be3632222971ac30164d4a258d595640799554ebfd99"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".unicode-width."0.1.9" = overridableMkRustCrate (profileName: rec {
    name = "unicode-width";
    version = "0.1.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3ed742d4ea2bd1176e236172c8429aaf54486e7ac098db29ffe6529e0ce50973"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".unicode-xid."0.2.3" = overridableMkRustCrate (profileName: rec {
    name = "unicode-xid";
    version = "0.2.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "957e51f3646910546462e67d5f7599b9e4fb8acdd304b087a6494730f9eebf04"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".utf8parse."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "utf8parse";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "936e4b492acfd135421d8dca4b1aa80a7bfc26e702ef3af710e0752684df5372"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".uuid."0.8.2" = overridableMkRustCrate (profileName: rec {
    name = "uuid";
    version = "0.8.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bc5cf98d8186244414c848017f0e2676b3fcb46807f6668a97dfe67359a3c4b7"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "getrandom" ]
      [ "std" ]
      [ "v4" ]
    ];
    dependencies = {
      getrandom = rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.2.6" { inherit profileName; };
    };
  });
  
  "unknown".ven_ena."0.13.1" = overridableMkRustCrate (profileName: rec {
    name = "ven_ena";
    version = "0.13.1";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/vendor/ena");
    dependencies = {
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.17" { inherit profileName; };
    };
  });
  
  "unknown".ven_graph."2.0.5-pre" = overridableMkRustCrate (profileName: rec {
    name = "ven_graph";
    version = "2.0.5-pre";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/vendor/pathfinding");
    dependencies = {
      roc_collections = rustPackages."unknown".roc_collections."0.1.0" { inherit profileName; };
    };
  });
  
  "unknown".ven_pretty."0.9.1-alpha.0" = overridableMkRustCrate (profileName: rec {
    name = "ven_pretty";
    version = "0.9.1-alpha.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/vendor/pretty");
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "ven_pretty/termcolor") "termcolor")
    ];
    dependencies = {
      arrayvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.7.2" { inherit profileName; };
      ${ if rootFeatures' ? "ven_pretty/termcolor" then "termcolor" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".termcolor."1.1.3" { inherit profileName; };
      typed_arena = rustPackages."registry+https://github.com/rust-lang/crates.io-index".typed-arena."2.0.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.4" = overridableMkRustCrate (profileName: rec {
    name = "version_check";
    version = "0.9.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "49874b5167b65d7193b8aba1567f5c7d93d001cafc34600cee003eda787e483f"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".vte."0.10.1" = overridableMkRustCrate (profileName: rec {
    name = "vte";
    version = "0.10.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6cbce692ab4ca2f1f3047fcf732430249c0e971bfdd2b234cf2c47ad93af5983"; };
    features = builtins.concatLists [
      [ "arrayvec" ]
      [ "default" ]
      [ "no_std" ]
    ];
    dependencies = {
      arrayvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.5.2" { inherit profileName; };
      utf8parse = rustPackages."registry+https://github.com/rust-lang/crates.io-index".utf8parse."0.2.0" { inherit profileName; };
      vte_generate_state_changes = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".vte_generate_state_changes."0.1.1" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".vte_generate_state_changes."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "vte_generate_state_changes";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d257817081c7dffcdbab24b9e62d2def62e2ff7d00b1c20062551e6cccc145ff"; };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.38" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.18" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".walkdir."2.3.2" = overridableMkRustCrate (profileName: rec {
    name = "walkdir";
    version = "2.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "808cf2735cd4b6866113f648b791c6adc5714537bc222d9347bb203386ffda56"; };
    dependencies = {
      same_file = rustPackages."registry+https://github.com/rust-lang/crates.io-index".same-file."1.0.6" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi_util" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi-util."0.1.5" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasi."0.10.2+wasi-snapshot-preview1" = overridableMkRustCrate (profileName: rec {
    name = "wasi";
    version = "0.10.2+wasi-snapshot-preview1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fd6fbd9a79829dd1ad0cc20627bf1ed606756a7f77edff7b66b7064f9cb327c6"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "unknown".wasi_libc_sys."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "wasi_libc_sys";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/wasi-libc-sys");
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.80" = overridableMkRustCrate (profileName: rec {
    name = "wasm-bindgen";
    version = "0.2.80";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "27370197c907c55e3f1a9fbe26f44e937fe6451368324e009cba39e139dc08ad"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "spans" ]
      [ "std" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      wasm_bindgen_macro = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-macro."0.2.80" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-backend."0.2.80" = overridableMkRustCrate (profileName: rec {
    name = "wasm-bindgen-backend";
    version = "0.2.80";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "53e04185bfa3a779273da532f5025e33398409573f348985af9a1cbf3774d3f4"; };
    features = builtins.concatLists [
      [ "spans" ]
    ];
    dependencies = {
      bumpalo = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bumpalo."3.9.1" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.17" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.38" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.18" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.92" { inherit profileName; };
      wasm_bindgen_shared = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-shared."0.2.80" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-futures."0.4.30" = overridableMkRustCrate (profileName: rec {
    name = "wasm-bindgen-futures";
    version = "0.4.30";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6f741de44b75e14c35df886aff5f1eb73aa114fa5d4d00dcd37b5e01259bf3b2"; };
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      js_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.57" { inherit profileName; };
      wasm_bindgen = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.80" { inherit profileName; };
      ${ if builtins.elem "atomics" hostPlatformFeatures then "web_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.57" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-macro."0.2.80" = overridableMkRustCrate (profileName: rec {
    name = "wasm-bindgen-macro";
    version = "0.2.80";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "17cae7ff784d7e83a2fe7611cfe766ecf034111b49deb850a3dc7699c08251f5"; };
    features = builtins.concatLists [
      [ "spans" ]
    ];
    dependencies = {
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.18" { inherit profileName; };
      wasm_bindgen_macro_support = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-macro-support."0.2.80" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-macro-support."0.2.80" = overridableMkRustCrate (profileName: rec {
    name = "wasm-bindgen-macro-support";
    version = "0.2.80";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "99ec0dc7a4756fffc231aab1b9f2f578d23cd391390ab27f952ae0c9b3ece20b"; };
    features = builtins.concatLists [
      [ "spans" ]
    ];
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.38" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.18" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.92" { inherit profileName; };
      wasm_bindgen_backend = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-backend."0.2.80" { inherit profileName; };
      wasm_bindgen_shared = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-shared."0.2.80" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-shared."0.2.80" = overridableMkRustCrate (profileName: rec {
    name = "wasm-bindgen-shared";
    version = "0.2.80";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d554b7f530dee5964d9a9468d95c1f8b8acae4f282807e7d27d4b03099a46744"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasmer."2.2.1" = overridableMkRustCrate (profileName: rec {
    name = "wasmer";
    version = "2.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f727a39e7161f7438ddb8eafe571b67c576a8c2fb459f666d9053b5bba4afdea"; };
    features = builtins.concatLists [
      [ "compiler" ]
      [ "cranelift" ]
      [ "default-compiler" ]
      [ "default-cranelift" ]
      [ "default-engine" ]
      [ "default-universal" ]
      [ "engine" ]
      [ "singlepass" ]
      [ "sys" ]
      [ "sys-default" ]
      [ "universal" ]
      [ "wasmer-compiler-cranelift" ]
      [ "wasmer-compiler-singlepass" ]
      [ "wasmer-engine-dylib" ]
      [ "wasmer-engine-universal" ]
      [ "wat" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      indexmap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."1.8.1" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "js_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.57" { inherit profileName; };
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "loupe" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".loupe."0.1.3" { inherit profileName; };
      more_asserts = rustPackages."registry+https://github.com/rust-lang/crates.io-index".more-asserts."0.2.2" { inherit profileName; };
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "target_lexicon" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".target-lexicon."0.12.3" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.31" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "wasm_bindgen" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.80" { inherit profileName; };
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "wasmer_compiler" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmer-compiler."2.2.1" { inherit profileName; };
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "wasmer_compiler_cranelift" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmer-compiler-cranelift."2.2.1" { inherit profileName; };
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "wasmer_compiler_singlepass" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmer-compiler-singlepass."2.2.1" { inherit profileName; };
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") || hostPlatform.parsed.cpu.name == "wasm32" then "wasmer_derive" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmer-derive."2.2.1" { profileName = "__noProfile"; };
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "wasmer_engine" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmer-engine."2.2.1" { inherit profileName; };
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "wasmer_engine_dylib" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmer-engine-dylib."2.2.1" { inherit profileName; };
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "wasmer_engine_universal" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmer-engine-universal."2.2.1" { inherit profileName; };
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") || hostPlatform.parsed.cpu.name == "wasm32" then "wasmer_types" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmer-types."2.2.1" { inherit profileName; };
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "wasmer_vm" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmer-vm."2.2.1" { inherit profileName; };
      wat = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wat."1.0.42" { inherit profileName; };
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") && hostPlatform.parsed.kernel.name == "windows" then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasmer-compiler."2.2.1" = overridableMkRustCrate (profileName: rec {
    name = "wasmer-compiler";
    version = "2.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4e9951599222eb12bd13d4d91bcded0a880e4c22c2dfdabdf5dc7e5e803b7bf3"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "enable-rkyv" ]
      [ "enable-serde" ]
      [ "rkyv" ]
      [ "serde" ]
      [ "serde_bytes" ]
      [ "std" ]
      [ "translator" ]
      [ "wasmparser" ]
    ];
    dependencies = {
      enumset = rustPackages."registry+https://github.com/rust-lang/crates.io-index".enumset."1.0.11" { inherit profileName; };
      loupe = rustPackages."registry+https://github.com/rust-lang/crates.io-index".loupe."0.1.3" { inherit profileName; };
      rkyv = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rkyv."0.7.38" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.137" { inherit profileName; };
      serde_bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_bytes."0.11.6" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.8.0" { inherit profileName; };
      target_lexicon = rustPackages."registry+https://github.com/rust-lang/crates.io-index".target-lexicon."0.12.3" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.31" { inherit profileName; };
      wasmer_types = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmer-types."2.2.1" { inherit profileName; };
      wasmer_vm = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmer-vm."2.2.1" { inherit profileName; };
      wasmparser = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmparser."0.78.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasmer-compiler-cranelift."2.2.1" = overridableMkRustCrate (profileName: rec {
    name = "wasmer-compiler-cranelift";
    version = "2.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "44c83273bce44e668f3a2b9ccb7f1193db918b1d6806f64acc5ff71f6ece5f20"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "gimli" ]
      [ "std" ]
      [ "unwind" ]
    ];
    dependencies = {
      cranelift_codegen = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cranelift-codegen."0.76.0" { inherit profileName; };
      cranelift_entity = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cranelift-entity."0.76.0" { inherit profileName; };
      cranelift_frontend = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cranelift-frontend."0.76.0" { inherit profileName; };
      gimli = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gimli."0.25.0" { inherit profileName; };
      loupe = rustPackages."registry+https://github.com/rust-lang/crates.io-index".loupe."0.1.3" { inherit profileName; };
      more_asserts = rustPackages."registry+https://github.com/rust-lang/crates.io-index".more-asserts."0.2.2" { inherit profileName; };
      rayon = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rayon."1.5.2" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.8.0" { inherit profileName; };
      target_lexicon = rustPackages."registry+https://github.com/rust-lang/crates.io-index".target-lexicon."0.12.3" { inherit profileName; };
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.34" { inherit profileName; };
      wasmer_compiler = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmer-compiler."2.2.1" { inherit profileName; };
      wasmer_types = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmer-types."2.2.1" { inherit profileName; };
      wasmer_vm = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmer-vm."2.2.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasmer-compiler-singlepass."2.2.1" = overridableMkRustCrate (profileName: rec {
    name = "wasmer-compiler-singlepass";
    version = "2.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5432e993840cdb8e6875ddc8c9eea64e7a129579b4706bd91b8eb474d9c4a860"; };
    features = builtins.concatLists [
      [ "avx" ]
      [ "default" ]
      [ "rayon" ]
      [ "std" ]
    ];
    dependencies = {
      byteorder = rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.4.3" { inherit profileName; };
      dynasm = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".dynasm."1.2.3" { profileName = "__noProfile"; };
      dynasmrt = rustPackages."registry+https://github.com/rust-lang/crates.io-index".dynasmrt."1.2.3" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      loupe = rustPackages."registry+https://github.com/rust-lang/crates.io-index".loupe."0.1.3" { inherit profileName; };
      more_asserts = rustPackages."registry+https://github.com/rust-lang/crates.io-index".more-asserts."0.2.2" { inherit profileName; };
      rayon = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rayon."1.5.2" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.8.0" { inherit profileName; };
      wasmer_compiler = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmer-compiler."2.2.1" { inherit profileName; };
      wasmer_types = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmer-types."2.2.1" { inherit profileName; };
      wasmer_vm = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmer-vm."2.2.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasmer-derive."2.2.1" = overridableMkRustCrate (profileName: rec {
    name = "wasmer-derive";
    version = "2.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "458dbd9718a837e6dbc52003aef84487d79eedef5fa28c7d28b6784be98ac08e"; };
    dependencies = {
      proc_macro_error = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro-error."1.0.4" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.38" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.18" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.92" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasmer-engine."2.2.1" = overridableMkRustCrate (profileName: rec {
    name = "wasmer-engine";
    version = "2.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6ed603a6d037ebbb14014d7f739ae996a78455a4b86c41cfa4e81c590a1253b9"; };
    dependencies = {
      backtrace = rustPackages."registry+https://github.com/rust-lang/crates.io-index".backtrace."0.3.65" { inherit profileName; };
      enumset = rustPackages."registry+https://github.com/rust-lang/crates.io-index".enumset."1.0.11" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      loupe = rustPackages."registry+https://github.com/rust-lang/crates.io-index".loupe."0.1.3" { inherit profileName; };
      memmap2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memmap2."0.5.3" { inherit profileName; };
      more_asserts = rustPackages."registry+https://github.com/rust-lang/crates.io-index".more-asserts."0.2.2" { inherit profileName; };
      rustc_demangle = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-demangle."0.1.21" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.137" { inherit profileName; };
      serde_bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_bytes."0.11.6" { inherit profileName; };
      target_lexicon = rustPackages."registry+https://github.com/rust-lang/crates.io-index".target-lexicon."0.12.3" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.31" { inherit profileName; };
      wasmer_compiler = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmer-compiler."2.2.1" { inherit profileName; };
      wasmer_types = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmer-types."2.2.1" { inherit profileName; };
      wasmer_vm = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmer-vm."2.2.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasmer-engine-dylib."2.2.1" = overridableMkRustCrate (profileName: rec {
    name = "wasmer-engine-dylib";
    version = "2.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ccd7fdc60e252a795c849b3f78a81a134783051407e7e279c10b7019139ef8dc"; };
    features = builtins.concatLists [
      [ "compiler" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      enum_iterator = rustPackages."registry+https://github.com/rust-lang/crates.io-index".enum-iterator."0.7.0" { inherit profileName; };
      enumset = rustPackages."registry+https://github.com/rust-lang/crates.io-index".enumset."1.0.11" { inherit profileName; };
      leb128 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".leb128."0.2.5" { inherit profileName; };
      libloading = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libloading."0.7.3" { inherit profileName; };
      loupe = rustPackages."registry+https://github.com/rust-lang/crates.io-index".loupe."0.1.3" { inherit profileName; };
      object = rustPackages."registry+https://github.com/rust-lang/crates.io-index".object."0.28.3" { inherit profileName; };
      rkyv = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rkyv."0.7.38" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.137" { inherit profileName; };
      tempfile = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tempfile."3.3.0" { inherit profileName; };
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.34" { inherit profileName; };
      wasmer_compiler = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmer-compiler."2.2.1" { inherit profileName; };
      wasmer_engine = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmer-engine."2.2.1" { inherit profileName; };
      wasmer_object = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmer-object."2.2.1" { inherit profileName; };
      wasmer_types = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmer-types."2.2.1" { inherit profileName; };
      wasmer_vm = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmer-vm."2.2.1" { inherit profileName; };
      which = rustPackages."registry+https://github.com/rust-lang/crates.io-index".which."4.2.5" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasmer-engine-universal."2.2.1" = overridableMkRustCrate (profileName: rec {
    name = "wasmer-engine-universal";
    version = "2.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "dcff0cd2c01a8de6009fd863b14ea883132a468a24f2d2ee59dc34453d3a31b5"; };
    features = builtins.concatLists [
      [ "compiler" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      enum_iterator = rustPackages."registry+https://github.com/rust-lang/crates.io-index".enum-iterator."0.7.0" { inherit profileName; };
      enumset = rustPackages."registry+https://github.com/rust-lang/crates.io-index".enumset."1.0.11" { inherit profileName; };
      leb128 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".leb128."0.2.5" { inherit profileName; };
      loupe = rustPackages."registry+https://github.com/rust-lang/crates.io-index".loupe."0.1.3" { inherit profileName; };
      region = rustPackages."registry+https://github.com/rust-lang/crates.io-index".region."3.0.0" { inherit profileName; };
      rkyv = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rkyv."0.7.38" { inherit profileName; };
      wasmer_compiler = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmer-compiler."2.2.1" { inherit profileName; };
      wasmer_engine = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmer-engine."2.2.1" { inherit profileName; };
      wasmer_types = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmer-types."2.2.1" { inherit profileName; };
      wasmer_vm = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmer-vm."2.2.1" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "windows" then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasmer-object."2.2.1" = overridableMkRustCrate (profileName: rec {
    name = "wasmer-object";
    version = "2.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "24ce18ac2877050e59580d27ee1a88f3192d7a31e77fbba0852abc7888d6e0b5"; };
    dependencies = {
      object = rustPackages."registry+https://github.com/rust-lang/crates.io-index".object."0.28.3" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.31" { inherit profileName; };
      wasmer_compiler = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmer-compiler."2.2.1" { inherit profileName; };
      wasmer_types = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmer-types."2.2.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasmer-types."2.2.1" = overridableMkRustCrate (profileName: rec {
    name = "wasmer-types";
    version = "2.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "659fa3dd6c76f62630deff4ac8c7657b07f0b1e4d7e0f8243a552b9d9b448e24"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "enable-rkyv" ]
      [ "enable-serde" ]
      [ "rkyv" ]
      [ "serde" ]
      [ "std" ]
    ];
    dependencies = {
      indexmap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."1.8.1" { inherit profileName; };
      loupe = rustPackages."registry+https://github.com/rust-lang/crates.io-index".loupe."0.1.3" { inherit profileName; };
      rkyv = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rkyv."0.7.38" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.137" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.31" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasmer-vfs."2.2.1" = overridableMkRustCrate (profileName: rec {
    name = "wasmer-vfs";
    version = "2.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f02fc47308cf5cf2cc039ec61c098773320b3d3c099434f20580bd143beee63b"; };
    features = builtins.concatLists [
      [ "host-fs" ]
      [ "libc" ]
    ];
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.125" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.31" { inherit profileName; };
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.34" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasmer-vm."2.2.1" = overridableMkRustCrate (profileName: rec {
    name = "wasmer-vm";
    version = "2.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "afdc46158517c2769f9938bc222a7d41b3bb330824196279d8aa2d667cd40641"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "enable-rkyv" ]
      [ "rkyv" ]
    ];
    dependencies = {
      backtrace = rustPackages."registry+https://github.com/rust-lang/crates.io-index".backtrace."0.3.65" { inherit profileName; };
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      enum_iterator = rustPackages."registry+https://github.com/rust-lang/crates.io-index".enum-iterator."0.7.0" { inherit profileName; };
      indexmap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."1.8.1" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.125" { inherit profileName; };
      loupe = rustPackages."registry+https://github.com/rust-lang/crates.io-index".loupe."0.1.3" { inherit profileName; };
      memoffset = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memoffset."0.6.5" { inherit profileName; };
      more_asserts = rustPackages."registry+https://github.com/rust-lang/crates.io-index".more-asserts."0.2.2" { inherit profileName; };
      region = rustPackages."registry+https://github.com/rust-lang/crates.io-index".region."3.0.0" { inherit profileName; };
      rkyv = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rkyv."0.7.38" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.137" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.31" { inherit profileName; };
      wasmer_types = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmer-types."2.2.1" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "windows" then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
    buildDependencies = {
      cc = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.73" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasmer-wasi."2.2.1" = overridableMkRustCrate (profileName: rec {
    name = "wasmer-wasi";
    version = "2.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3087d48fe015928118ae23f66f05b533e75fbea5dfcd64c75a74b7b5f941cc65"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "host-fs" ]
      [ "logging" ]
      [ "sys" ]
      [ "sys-default" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      generational_arena = rustPackages."registry+https://github.com/rust-lang/crates.io-index".generational-arena."0.2.8" { inherit profileName; };
      getrandom = rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.2.6" { inherit profileName; };
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.125" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.31" { inherit profileName; };
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.34" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "wasm_bindgen" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.80" { inherit profileName; };
      wasmer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmer."2.2.1" { inherit profileName; };
      wasmer_vfs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmer-vfs."2.2.1" { inherit profileName; };
      wasmer_wasi_types = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmer-wasi-types."2.2.1" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasmer-wasi-types."2.2.1" = overridableMkRustCrate (profileName: rec {
    name = "wasmer-wasi-types";
    version = "2.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "69adbd8d0d89cd19fb8b1e0252c76e3f72dbc65c944f0db7a9c28c4157fbcd3a"; };
    dependencies = {
      byteorder = rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.4.3" { inherit profileName; };
      time = rustPackages."registry+https://github.com/rust-lang/crates.io-index".time."0.2.27" { inherit profileName; };
      wasmer_types = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmer-types."2.2.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasmparser."0.78.2" = overridableMkRustCrate (profileName: rec {
    name = "wasmparser";
    version = "0.78.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "52144d4c78e5cf8b055ceab8e5fa22814ce4315d6002ad32cfd914f37c12fd65"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wast."40.0.0" = overridableMkRustCrate (profileName: rec {
    name = "wast";
    version = "40.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9bb4f48a8b083dbc50e291e430afb8f524092bb00428957bcc63f49f856c64ac"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "wasm-module" ]
    ];
    dependencies = {
      leb128 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".leb128."0.2.5" { inherit profileName; };
      memchr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.5.0" { inherit profileName; };
      unicode_width = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-width."0.1.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wat."1.0.42" = overridableMkRustCrate (profileName: rec {
    name = "wat";
    version = "1.0.42";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0401b6395ce0db91629a75b29597ccb66ea29950af9fc859f1bb3a736609c76e"; };
    dependencies = {
      wast = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wast."40.0.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wayland-client."0.28.6" = overridableMkRustCrate (profileName: rec {
    name = "wayland-client";
    version = "0.28.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e3ab332350e502f159382201394a78e3cc12d0f04db863429260164ea40e0355"; };
    features = builtins.concatLists [
      [ "dlopen" ]
      [ "scoped-tls" ]
      [ "use_system_lib" ]
    ];
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      downcast_rs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".downcast-rs."1.2.0" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.125" { inherit profileName; };
      nix = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nix."0.20.0" { inherit profileName; };
      scoped_tls = rustPackages."registry+https://github.com/rust-lang/crates.io-index".scoped-tls."1.0.0" { inherit profileName; };
      wayland_commons = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-commons."0.28.6" { inherit profileName; };
      wayland_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-sys."0.28.6" { inherit profileName; };
    };
    buildDependencies = {
      wayland_scanner = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-scanner."0.28.6" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wayland-client."0.29.4" = overridableMkRustCrate (profileName: rec {
    name = "wayland-client";
    version = "0.29.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "91223460e73257f697d9e23d401279123d36039a3f7a449e983f123292d4458f"; };
    features = builtins.concatLists [
      [ "dlopen" ]
      [ "scoped-tls" ]
      [ "use_system_lib" ]
    ];
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      downcast_rs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".downcast-rs."1.2.0" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.125" { inherit profileName; };
      nix = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nix."0.22.3" { inherit profileName; };
      scoped_tls = rustPackages."registry+https://github.com/rust-lang/crates.io-index".scoped-tls."1.0.0" { inherit profileName; };
      wayland_commons = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-commons."0.29.4" { inherit profileName; };
      wayland_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-sys."0.29.4" { inherit profileName; };
    };
    buildDependencies = {
      wayland_scanner = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-scanner."0.29.4" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wayland-commons."0.28.6" = overridableMkRustCrate (profileName: rec {
    name = "wayland-commons";
    version = "0.28.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a21817947c7011bbd0a27e11b17b337bfd022e8544b071a2641232047966fbda"; };
    dependencies = {
      nix = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nix."0.20.0" { inherit profileName; };
      once_cell = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.10.0" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.8.0" { inherit profileName; };
      wayland_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-sys."0.28.6" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wayland-commons."0.29.4" = overridableMkRustCrate (profileName: rec {
    name = "wayland-commons";
    version = "0.29.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "94f6e5e340d7c13490eca867898c4cec5af56c27a5ffe5c80c6fc4708e22d33e"; };
    dependencies = {
      nix = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nix."0.22.3" { inherit profileName; };
      once_cell = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.10.0" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.8.0" { inherit profileName; };
      wayland_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-sys."0.29.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wayland-cursor."0.28.6" = overridableMkRustCrate (profileName: rec {
    name = "wayland-cursor";
    version = "0.28.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "be610084edd1586d45e7bdd275fe345c7c1873598caa464c4fb835dee70fa65a"; };
    dependencies = {
      nix = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nix."0.20.0" { inherit profileName; };
      wayland_client = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-client."0.28.6" { inherit profileName; };
      xcursor = rustPackages."registry+https://github.com/rust-lang/crates.io-index".xcursor."0.3.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wayland-cursor."0.29.4" = overridableMkRustCrate (profileName: rec {
    name = "wayland-cursor";
    version = "0.29.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c52758f13d5e7861fc83d942d3d99bf270c83269575e52ac29e5b73cb956a6bd"; };
    dependencies = {
      nix = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nix."0.22.3" { inherit profileName; };
      wayland_client = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-client."0.29.4" { inherit profileName; };
      xcursor = rustPackages."registry+https://github.com/rust-lang/crates.io-index".xcursor."0.3.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wayland-protocols."0.28.6" = overridableMkRustCrate (profileName: rec {
    name = "wayland-protocols";
    version = "0.28.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "286620ea4d803bacf61fa087a4242ee316693099ee5a140796aaba02b29f861f"; };
    features = builtins.concatLists [
      [ "client" ]
      [ "unstable_protocols" ]
      [ "wayland-client" ]
    ];
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      wayland_client = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-client."0.28.6" { inherit profileName; };
      wayland_commons = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-commons."0.28.6" { inherit profileName; };
    };
    buildDependencies = {
      wayland_scanner = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-scanner."0.28.6" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wayland-protocols."0.29.4" = overridableMkRustCrate (profileName: rec {
    name = "wayland-protocols";
    version = "0.29.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "60147ae23303402e41fe034f74fb2c35ad0780ee88a1c40ac09a3be1e7465741"; };
    features = builtins.concatLists [
      [ "client" ]
      [ "unstable_protocols" ]
      [ "wayland-client" ]
    ];
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      wayland_client = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-client."0.29.4" { inherit profileName; };
      wayland_commons = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-commons."0.29.4" { inherit profileName; };
    };
    buildDependencies = {
      wayland_scanner = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-scanner."0.29.4" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wayland-scanner."0.28.6" = overridableMkRustCrate (profileName: rec {
    name = "wayland-scanner";
    version = "0.28.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ce923eb2deb61de332d1f356ec7b6bf37094dc5573952e1c8936db03b54c03f1"; };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.38" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.18" { inherit profileName; };
      xml = rustPackages."registry+https://github.com/rust-lang/crates.io-index".xml-rs."0.8.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wayland-scanner."0.29.4" = overridableMkRustCrate (profileName: rec {
    name = "wayland-scanner";
    version = "0.29.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "39a1ed3143f7a143187156a2ab52742e89dac33245ba505c17224df48939f9e0"; };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.38" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.18" { inherit profileName; };
      xml = rustPackages."registry+https://github.com/rust-lang/crates.io-index".xml-rs."0.8.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wayland-sys."0.28.6" = overridableMkRustCrate (profileName: rec {
    name = "wayland-sys";
    version = "0.28.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d841fca9aed7febf9bed2e9796c49bf58d4152ceda8ac949ebe00868d8f0feb8"; };
    features = builtins.concatLists [
      [ "client" ]
      [ "dlib" ]
      [ "dlopen" ]
      [ "lazy_static" ]
    ];
    dependencies = {
      dlib = rustPackages."registry+https://github.com/rust-lang/crates.io-index".dlib."0.5.0" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
    };
    buildDependencies = {
      pkg_config = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".pkg-config."0.3.25" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wayland-sys."0.29.4" = overridableMkRustCrate (profileName: rec {
    name = "wayland-sys";
    version = "0.29.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d9341df79a8975679188e37dab3889bfa57c44ac2cb6da166f519a81cbe452d4"; };
    features = builtins.concatLists [
      [ "client" ]
      [ "dlib" ]
      [ "dlopen" ]
      [ "lazy_static" ]
    ];
    dependencies = {
      dlib = rustPackages."registry+https://github.com/rust-lang/crates.io-index".dlib."0.5.0" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
    };
    buildDependencies = {
      pkg_config = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".pkg-config."0.3.25" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.57" = overridableMkRustCrate (profileName: rec {
    name = "web-sys";
    version = "0.3.57";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7b17e741662c70c8bd24ac5c5b18de314a2c26c32bf8346ee1e6f53de919c283"; };
    features = builtins.concatLists [
      [ "AngleInstancedArrays" ]
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "AudioBuffer")
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "AudioBufferSourceNode")
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "AudioContext")
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "AudioContextOptions")
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "AudioContextState")
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "AudioDestinationNode")
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "AudioNode")
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "AudioScheduledSourceNode")
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "BaseAudioContext")
      [ "CanvasRenderingContext2d" ]
      [ "Document" ]
      [ "DomRect" ]
      [ "DomRectReadOnly" ]
      [ "Element" ]
      [ "Event" ]
      [ "EventTarget" ]
      [ "ExtBlendMinmax" ]
      [ "ExtColorBufferFloat" ]
      [ "ExtColorBufferHalfFloat" ]
      [ "ExtDisjointTimerQuery" ]
      [ "ExtFragDepth" ]
      [ "ExtSRgb" ]
      [ "ExtShaderTextureLod" ]
      [ "ExtTextureFilterAnisotropic" ]
      [ "Gpu" ]
      [ "GpuAdapter" ]
      [ "GpuAddressMode" ]
      [ "GpuBindGroup" ]
      [ "GpuBindGroupDescriptor" ]
      [ "GpuBindGroupEntry" ]
      [ "GpuBindGroupLayout" ]
      [ "GpuBindGroupLayoutDescriptor" ]
      [ "GpuBindGroupLayoutEntry" ]
      [ "GpuBlendComponent" ]
      [ "GpuBlendFactor" ]
      [ "GpuBlendOperation" ]
      [ "GpuBlendState" ]
      [ "GpuBuffer" ]
      [ "GpuBufferBinding" ]
      [ "GpuBufferBindingLayout" ]
      [ "GpuBufferBindingType" ]
      [ "GpuBufferDescriptor" ]
      [ "GpuBufferUsage" ]
      [ "GpuCanvasConfiguration" ]
      [ "GpuCanvasContext" ]
      [ "GpuColorDict" ]
      [ "GpuColorTargetState" ]
      [ "GpuColorWrite" ]
      [ "GpuCommandBuffer" ]
      [ "GpuCommandBufferDescriptor" ]
      [ "GpuCommandEncoder" ]
      [ "GpuCommandEncoderDescriptor" ]
      [ "GpuCompareFunction" ]
      [ "GpuCompilationInfo" ]
      [ "GpuCompilationMessage" ]
      [ "GpuCompilationMessageType" ]
      [ "GpuComputePassDescriptor" ]
      [ "GpuComputePassEncoder" ]
      [ "GpuComputePipeline" ]
      [ "GpuComputePipelineDescriptor" ]
      [ "GpuCullMode" ]
      [ "GpuDepthStencilState" ]
      [ "GpuDevice" ]
      [ "GpuDeviceDescriptor" ]
      [ "GpuDeviceLostInfo" ]
      [ "GpuDeviceLostReason" ]
      [ "GpuErrorFilter" ]
      [ "GpuExtent3dDict" ]
      [ "GpuFeatureName" ]
      [ "GpuFilterMode" ]
      [ "GpuFragmentState" ]
      [ "GpuFrontFace" ]
      [ "GpuImageCopyBuffer" ]
      [ "GpuImageCopyTexture" ]
      [ "GpuImageDataLayout" ]
      [ "GpuIndexFormat" ]
      [ "GpuLoadOp" ]
      [ "GpuMapMode" ]
      [ "GpuMultisampleState" ]
      [ "GpuObjectDescriptorBase" ]
      [ "GpuOrigin2dDict" ]
      [ "GpuOrigin3dDict" ]
      [ "GpuOutOfMemoryError" ]
      [ "GpuPipelineDescriptorBase" ]
      [ "GpuPipelineLayout" ]
      [ "GpuPipelineLayoutDescriptor" ]
      [ "GpuPipelineStatisticName" ]
      [ "GpuPowerPreference" ]
      [ "GpuPrimitiveState" ]
      [ "GpuPrimitiveTopology" ]
      [ "GpuProgrammableStage" ]
      [ "GpuQuerySet" ]
      [ "GpuQuerySetDescriptor" ]
      [ "GpuQueryType" ]
      [ "GpuQueue" ]
      [ "GpuRenderBundle" ]
      [ "GpuRenderBundleDescriptor" ]
      [ "GpuRenderBundleEncoder" ]
      [ "GpuRenderBundleEncoderDescriptor" ]
      [ "GpuRenderPassColorAttachment" ]
      [ "GpuRenderPassDepthStencilAttachment" ]
      [ "GpuRenderPassDescriptor" ]
      [ "GpuRenderPassEncoder" ]
      [ "GpuRenderPipeline" ]
      [ "GpuRenderPipelineDescriptor" ]
      [ "GpuRequestAdapterOptions" ]
      [ "GpuSampler" ]
      [ "GpuSamplerBindingLayout" ]
      [ "GpuSamplerBindingType" ]
      [ "GpuSamplerDescriptor" ]
      [ "GpuShaderModule" ]
      [ "GpuShaderModuleDescriptor" ]
      [ "GpuShaderStage" ]
      [ "GpuStencilFaceState" ]
      [ "GpuStencilOperation" ]
      [ "GpuStorageTextureAccess" ]
      [ "GpuStorageTextureBindingLayout" ]
      [ "GpuStoreOp" ]
      [ "GpuSupportedFeatures" ]
      [ "GpuSupportedLimits" ]
      [ "GpuTexture" ]
      [ "GpuTextureAspect" ]
      [ "GpuTextureBindingLayout" ]
      [ "GpuTextureDescriptor" ]
      [ "GpuTextureDimension" ]
      [ "GpuTextureFormat" ]
      [ "GpuTextureSampleType" ]
      [ "GpuTextureUsage" ]
      [ "GpuTextureView" ]
      [ "GpuTextureViewDescriptor" ]
      [ "GpuTextureViewDimension" ]
      [ "GpuUncapturedErrorEvent" ]
      [ "GpuUncapturedErrorEventInit" ]
      [ "GpuValidationError" ]
      [ "GpuVertexAttribute" ]
      [ "GpuVertexBufferLayout" ]
      [ "GpuVertexFormat" ]
      [ "GpuVertexState" ]
      [ "GpuVertexStepMode" ]
      [ "HtmlCanvasElement" ]
      [ "HtmlElement" ]
      [ "HtmlImageElement" ]
      [ "ImageBitmap" ]
      [ "MessageEvent" ]
      [ "Navigator" ]
      [ "Node" ]
      [ "NodeList" ]
      [ "OesElementIndexUint" ]
      [ "OesStandardDerivatives" ]
      [ "OesTextureFloat" ]
      [ "OesTextureFloatLinear" ]
      [ "OesTextureHalfFloat" ]
      [ "OesTextureHalfFloatLinear" ]
      [ "OesVertexArrayObject" ]
      [ "OffscreenCanvas" ]
      [ "Performance" ]
      [ "PerformanceTiming" ]
      [ "WebGl2RenderingContext" ]
      [ "WebGlActiveInfo" ]
      [ "WebGlBuffer" ]
      [ "WebGlFramebuffer" ]
      [ "WebGlProgram" ]
      [ "WebGlQuery" ]
      [ "WebGlRenderbuffer" ]
      [ "WebGlRenderingContext" ]
      [ "WebGlSampler" ]
      [ "WebGlShader" ]
      [ "WebGlSync" ]
      [ "WebGlTexture" ]
      [ "WebGlTransformFeedback" ]
      [ "WebGlUniformLocation" ]
      [ "WebGlVertexArrayObject" ]
      [ "WebglColorBufferFloat" ]
      [ "WebglCompressedTextureAstc" ]
      [ "WebglCompressedTextureEtc" ]
      [ "WebglCompressedTextureEtc1" ]
      [ "WebglCompressedTexturePvrtc" ]
      [ "WebglCompressedTextureS3tc" ]
      [ "WebglCompressedTextureS3tcSrgb" ]
      [ "WebglDebugRendererInfo" ]
      [ "WebglDebugShaders" ]
      [ "WebglDepthTexture" ]
      [ "WebglDrawBuffers" ]
      [ "WebglLoseContext" ]
      [ "Window" ]
      [ "Worker" ]
    ];
    dependencies = {
      js_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.57" { inherit profileName; };
      wasm_bindgen = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.80" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wgpu."0.11.1" = overridableMkRustCrate (profileName: rec {
    name = "wgpu";
    version = "0.11.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "eae7181fe6ba5f4b632a9079cc9e922a64555156c87def72c063f94b180c7d68"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      arrayvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.7.2" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "js_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.57" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.17" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
      raw_window_handle = rustPackages."registry+https://github.com/rust-lang/crates.io-index".raw-window-handle."0.3.4" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.8.0" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "wasm_bindgen" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.80" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "wasm_bindgen_futures" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-futures."0.4.30" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "web_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.57" { inherit profileName; };
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "wgc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wgpu-core."0.11.3" { inherit profileName; };
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "hal" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wgpu-hal."0.11.5" { inherit profileName; };
      wgt = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wgpu-types."0.11.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wgpu-core."0.11.3" = overridableMkRustCrate (profileName: rec {
    name = "wgpu-core";
    version = "0.11.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "35600627b6c718ad0e23ed75fb6140bfe32cdf21c8f539ce3c9ab8180e2cb38e"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "raw-window-handle" ]
    ];
    dependencies = {
      arrayvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.7.2" { inherit profileName; };
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      copyless = rustPackages."registry+https://github.com/rust-lang/crates.io-index".copyless."0.1.5" { inherit profileName; };
      fxhash = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fxhash."0.2.1" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.17" { inherit profileName; };
      naga = rustPackages."registry+https://github.com/rust-lang/crates.io-index".naga."0.7.3" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
      profiling = rustPackages."registry+https://github.com/rust-lang/crates.io-index".profiling."1.0.5" { inherit profileName; };
      raw_window_handle = rustPackages."registry+https://github.com/rust-lang/crates.io-index".raw-window-handle."0.3.4" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.8.0" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.31" { inherit profileName; };
      hal = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wgpu-hal."0.11.5" { inherit profileName; };
      wgt = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wgpu-types."0.11.0" { inherit profileName; };
    };
    buildDependencies = {
      cfg_aliases = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg_aliases."0.1.1" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wgpu-hal."0.11.5" = overridableMkRustCrate (profileName: rec {
    name = "wgpu-hal";
    version = "0.11.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "af28b29ef0b44cd22dd9895d4349b9d5a687df42f58da234871198637eabe328"; };
    features = builtins.concatLists [
      [ "ash" ]
      [ "bit-set" ]
      [ "block" ]
      [ "default" ]
      [ "dx12" ]
      [ "egl" ]
      [ "foreign-types" ]
      [ "gles" ]
      [ "glow" ]
      [ "gpu-alloc" ]
      [ "gpu-descriptor" ]
      [ "inplace_it" ]
      [ "libloading" ]
      [ "metal" ]
      [ "native" ]
      [ "range-alloc" ]
      [ "renderdoc" ]
      [ "renderdoc-sys" ]
      [ "vulkan" ]
    ];
    dependencies = {
      arrayvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.7.2" { inherit profileName; };
      ash = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ash."0.33.3+1.2.191" { inherit profileName; };
      bit_set = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bit-set."0.5.2" { inherit profileName; };
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      block = rustPackages."registry+https://github.com/rust-lang/crates.io-index".block."0.1.6" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios" then "core_graphics_types" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-graphics-types."0.1.1" { inherit profileName; };
      ${ if hostPlatform.isWindows then "native" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".d3d12."0.4.1" { inherit profileName; };
      foreign_types = rustPackages."registry+https://github.com/rust-lang/crates.io-index".foreign-types."0.3.2" { inherit profileName; };
      fxhash = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fxhash."0.2.1" { inherit profileName; };
      glow = rustPackages."registry+https://github.com/rust-lang/crates.io-index".glow."0.11.2" { inherit profileName; };
      gpu_alloc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gpu-alloc."0.5.3" { inherit profileName; };
      gpu_descriptor = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gpu-descriptor."0.2.2" { inherit profileName; };
      inplace_it = rustPackages."registry+https://github.com/rust-lang/crates.io-index".inplace_it."0.3.3" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "js_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.57" { inherit profileName; };
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "egl" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".khronos-egl."4.1.0" { inherit profileName; };
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "libloading" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libloading."0.7.3" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.17" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios" then "mtl" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".metal."0.23.1" { inherit profileName; };
      naga = rustPackages."registry+https://github.com/rust-lang/crates.io-index".naga."0.7.3" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios" then "objc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc."0.2.7" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
      profiling = rustPackages."registry+https://github.com/rust-lang/crates.io-index".profiling."1.0.5" { inherit profileName; };
      range_alloc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".range-alloc."0.1.2" { inherit profileName; };
      raw_window_handle = rustPackages."registry+https://github.com/rust-lang/crates.io-index".raw-window-handle."0.3.4" { inherit profileName; };
      renderdoc_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".renderdoc-sys."0.7.1" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.31" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "wasm_bindgen" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.80" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "web_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.57" { inherit profileName; };
      wgt = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wgpu-types."0.11.0" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wgpu-types."0.11.0" = overridableMkRustCrate (profileName: rec {
    name = "wgpu-types";
    version = "0.11.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e15e44ba88ec415466e18e91881319e7c9e96cb905dc623305168aea65b85ccc"; };
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wgpu_glyph."0.15.2" = overridableMkRustCrate (profileName: rec {
    name = "wgpu_glyph";
    version = "0.15.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3f5774759a6288a2bf29dd56d04ef79e73c1bc2b1c289fdf25e502a2a7dc3eda"; };
    dependencies = {
      bytemuck = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytemuck."1.9.1" { inherit profileName; };
      glyph_brush = rustPackages."registry+https://github.com/rust-lang/crates.io-index".glyph_brush."0.7.4" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.17" { inherit profileName; };
      wgpu = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wgpu."0.11.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".which."4.2.5" = overridableMkRustCrate (profileName: rec {
    name = "which";
    version = "4.2.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5c4fb54e6113b6a8772ee41c3404fb0301ac79604489467e0a9ce1f3e97c24ae"; };
    dependencies = {
      either = rustPackages."registry+https://github.com/rust-lang/crates.io-index".either."1.6.1" { inherit profileName; };
      ${ if hostPlatform.isWindows then "lazy_static" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.125" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" = overridableMkRustCrate (profileName: rec {
    name = "winapi";
    version = "0.3.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "audioclient")
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "audiosessiontypes")
      [ "basetsd" ]
      [ "cfg" ]
      [ "combaseapi" ]
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "coml2api")
      [ "commctrl" ]
      [ "consoleapi" ]
      [ "d3d12" ]
      [ "d3d12sdklayers" ]
      [ "d3d12shader" ]
      [ "d3dcommon" ]
      [ "d3dcompiler" ]
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "debug")
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "devpkey")
      [ "dwmapi" ]
      [ "dxgi1_2" ]
      [ "dxgi1_3" ]
      [ "dxgi1_4" ]
      [ "dxgi1_6" ]
      [ "dxgidebug" ]
      [ "dxgiformat" ]
      [ "errhandlingapi" ]
      [ "evntrace" ]
      [ "fileapi" ]
      [ "handleapi" ]
      [ "hidusage" ]
      [ "imm" ]
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "impl-debug")
      [ "impl-default" ]
      [ "in6addr" ]
      [ "inaddr" ]
      [ "ioapiset" ]
      [ "knownfolders" ]
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "ksmedia")
      [ "libloaderapi" ]
      [ "memoryapi" ]
      [ "minwinbase" ]
      [ "minwindef" ]
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "mmdeviceapi")
      [ "mstcpip" ]
      [ "mswsock" ]
      [ "namedpipeapi" ]
      [ "ntdef" ]
      [ "ntsecapi" ]
      [ "ntstatus" ]
      [ "objbase" ]
      [ "ole2" ]
      [ "processenv" ]
      [ "processthreadsapi" ]
      (lib.optional (rootFeatures' ? "roc_editor/rodio" || rootFeatures' ? "roc_editor/with_sound") "profileapi")
      [ "shellapi" ]
      [ "shellscalingapi" ]
      [ "shlobj" ]
      [ "shobjidl_core" ]
      [ "std" ]
      [ "stringapiset" ]
      [ "synchapi" ]
      [ "sysinfoapi" ]
      [ "timezoneapi" ]
      [ "unknwnbase" ]
      [ "winbase" ]
      [ "wincon" ]
      [ "windef" ]
      [ "windowsx" ]
      [ "winerror" ]
      [ "wingdi" ]
      [ "winioctl" ]
      [ "winnt" ]
      [ "winsock2" ]
      [ "winuser" ]
      [ "ws2def" ]
      [ "ws2ipdef" ]
      [ "ws2tcpip" ]
    ];
    dependencies = {
      ${ if hostPlatform.config == "i686-pc-windows-gnu" then "winapi_i686_pc_windows_gnu" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi-i686-pc-windows-gnu."0.4.0" { inherit profileName; };
      ${ if hostPlatform.config == "x86_64-pc-windows-gnu" then "winapi_x86_64_pc_windows_gnu" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi-x86_64-pc-windows-gnu."0.4.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".winapi-i686-pc-windows-gnu."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "winapi-i686-pc-windows-gnu";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".winapi-util."0.1.5" = overridableMkRustCrate (profileName: rec {
    name = "winapi-util";
    version = "0.1.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "70ec6ce85bb158151cae5e5c87f95a8e97d2c0c4b001223f33a334e3ce5de178"; };
    dependencies = {
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".winapi-x86_64-pc-windows-gnu."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "winapi-x86_64-pc-windows-gnu";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.30.0" = overridableMkRustCrate (profileName: rec {
    name = "windows-sys";
    version = "0.30.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "030b7ff91626e57a05ca64a07c481973cbb2db774e4852c9c7ca342408c6a99a"; };
    features = builtins.concatLists [
      [ "Win32" ]
      [ "Win32_Foundation" ]
      [ "Win32_Storage" ]
      [ "Win32_Storage_FileSystem" ]
      [ "Win32_System" ]
      [ "Win32_System_IO" ]
      [ "default" ]
    ];
    dependencies = {
      ${ if hostPlatform.config == "aarch64-pc-windows-msvc" || hostPlatform.config == "aarch64-uwp-windows-msvc" then "windows_aarch64_msvc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_msvc."0.30.0" { inherit profileName; };
      ${ if hostPlatform.config == "i686-pc-windows-gnu" || hostPlatform.config == "i686-uwp-windows-gnu" then "windows_i686_gnu" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_i686_gnu."0.30.0" { inherit profileName; };
      ${ if hostPlatform.config == "i686-pc-windows-msvc" || hostPlatform.config == "i686-uwp-windows-msvc" then "windows_i686_msvc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_i686_msvc."0.30.0" { inherit profileName; };
      ${ if hostPlatform.config == "x86_64-pc-windows-gnu" || hostPlatform.config == "x86_64-uwp-windows-gnu" then "windows_x86_64_gnu" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnu."0.30.0" { inherit profileName; };
      ${ if hostPlatform.config == "x86_64-pc-windows-msvc" || hostPlatform.config == "x86_64-uwp-windows-msvc" then "windows_x86_64_msvc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_msvc."0.30.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.36.1" = overridableMkRustCrate (profileName: rec {
    name = "windows-sys";
    version = "0.36.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ea04155a16a59f9eab786fe12a4a450e75cdb175f9e0d80da1e17db09f55b8d2"; };
    features = builtins.concatLists [
      [ "Win32" ]
      [ "Win32_Foundation" ]
      [ "Win32_System" ]
      [ "Win32_System_LibraryLoader" ]
      [ "Win32_System_SystemServices" ]
      [ "Win32_System_WindowsProgramming" ]
      [ "default" ]
    ];
    dependencies = {
      ${ if hostPlatform.config == "aarch64-pc-windows-msvc" || hostPlatform.config == "aarch64-uwp-windows-msvc" then "windows_aarch64_msvc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_msvc."0.36.1" { inherit profileName; };
      ${ if hostPlatform.config == "i686-pc-windows-gnu" || hostPlatform.config == "i686-uwp-windows-gnu" then "windows_i686_gnu" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_i686_gnu."0.36.1" { inherit profileName; };
      ${ if hostPlatform.config == "i686-pc-windows-msvc" || hostPlatform.config == "i686-uwp-windows-msvc" then "windows_i686_msvc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_i686_msvc."0.36.1" { inherit profileName; };
      ${ if hostPlatform.config == "x86_64-pc-windows-gnu" || hostPlatform.config == "x86_64-uwp-windows-gnu" then "windows_x86_64_gnu" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnu."0.36.1" { inherit profileName; };
      ${ if hostPlatform.config == "x86_64-pc-windows-msvc" || hostPlatform.config == "x86_64-uwp-windows-msvc" then "windows_x86_64_msvc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_msvc."0.36.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_msvc."0.30.0" = overridableMkRustCrate (profileName: rec {
    name = "windows_aarch64_msvc";
    version = "0.30.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "29277a4435d642f775f63c7d1faeb927adba532886ce0287bd985bffb16b6bca"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_msvc."0.36.1" = overridableMkRustCrate (profileName: rec {
    name = "windows_aarch64_msvc";
    version = "0.36.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9bb8c3fd39ade2d67e9874ac4f3db21f0d710bee00fe7cab16949ec184eeaa47"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_i686_gnu."0.30.0" = overridableMkRustCrate (profileName: rec {
    name = "windows_i686_gnu";
    version = "0.30.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1145e1989da93956c68d1864f32fb97c8f561a8f89a5125f6a2b7ea75524e4b8"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_i686_gnu."0.36.1" = overridableMkRustCrate (profileName: rec {
    name = "windows_i686_gnu";
    version = "0.36.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "180e6ccf01daf4c426b846dfc66db1fc518f074baa793aa7d9b9aaeffad6a3b6"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_i686_msvc."0.30.0" = overridableMkRustCrate (profileName: rec {
    name = "windows_i686_msvc";
    version = "0.30.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d4a09e3a0d4753b73019db171c1339cd4362c8c44baf1bcea336235e955954a6"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_i686_msvc."0.36.1" = overridableMkRustCrate (profileName: rec {
    name = "windows_i686_msvc";
    version = "0.36.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e2e7917148b2812d1eeafaeb22a97e4813dfa60a3f8f78ebe204bcc88f12f024"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnu."0.30.0" = overridableMkRustCrate (profileName: rec {
    name = "windows_x86_64_gnu";
    version = "0.30.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8ca64fcb0220d58db4c119e050e7af03c69e6f4f415ef69ec1773d9aab422d5a"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnu."0.36.1" = overridableMkRustCrate (profileName: rec {
    name = "windows_x86_64_gnu";
    version = "0.36.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4dcd171b8776c41b97521e5da127a2d86ad280114807d0b2ab1e462bc764d9e1"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_msvc."0.30.0" = overridableMkRustCrate (profileName: rec {
    name = "windows_x86_64_msvc";
    version = "0.30.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "08cabc9f0066848fef4bc6a1c1668e6efce38b661d2aeec75d18d8617eebb5f1"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_msvc."0.36.1" = overridableMkRustCrate (profileName: rec {
    name = "windows_x86_64_msvc";
    version = "0.36.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c811ca4a8c853ef420abd8592ba53ddbbac90410fab6903b3e79972a631f7680"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".winit."0.25.0" = overridableMkRustCrate (profileName: rec {
    name = "winit";
    version = "0.25.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "79610794594d5e86be473ef7763f604f2159cbac8c94debd00df8fb41e86c2f8"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "mio" ]
      [ "mio-misc" ]
      [ "parking_lot" ]
      [ "percent-encoding" ]
      [ "sctk" ]
      [ "wayland" ]
      [ "wayland-client" ]
      [ "x11" ]
      [ "x11-dl" ]
    ];
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "darwin" then "cocoa" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cocoa."0.24.0" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "darwin" then "core_foundation" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation."0.9.3" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "darwin" then "core_graphics" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-graphics."0.22.3" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "darwin" then "core_video_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-video-sys."0.1.4" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "darwin" then "dispatch" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".dispatch."0.2.0" { inherit profileName; };
      instant = rustPackages."registry+https://github.com/rust-lang/crates.io-index".instant."0.1.12" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.125" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.17" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "openbsd" || hostPlatform.parsed.kernel.name == "netbsd" then "mio" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".mio."0.7.14" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "openbsd" || hostPlatform.parsed.kernel.name == "netbsd" then "mio_misc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".mio-misc."1.2.2" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "android" then "ndk" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk."0.3.0" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "android" then "ndk_glue" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk-glue."0.3.0" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "android" then "ndk_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk-sys."0.2.2" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "ios" || hostPlatform.parsed.kernel.name == "darwin" then "objc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc."0.2.7" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "openbsd" || hostPlatform.parsed.kernel.name == "netbsd" || hostPlatform.parsed.kernel.name == "windows" then "parking_lot" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "openbsd" || hostPlatform.parsed.kernel.name == "netbsd" then "percent_encoding" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.1.0" { inherit profileName; };
      raw_window_handle = rustPackages."registry+https://github.com/rust-lang/crates.io-index".raw-window-handle."0.3.4" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "darwin" then "scopeguard" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".scopeguard."1.1.0" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "openbsd" || hostPlatform.parsed.kernel.name == "netbsd" then "sctk" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smithay-client-toolkit."0.12.3" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "openbsd" || hostPlatform.parsed.kernel.name == "netbsd" then "wayland_client" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-client."0.28.6" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "windows" then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "openbsd" || hostPlatform.parsed.kernel.name == "netbsd" then "x11_dl" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".x11-dl."2.19.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wyhash."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "wyhash";
    version = "0.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "baf6e163c25e3fac820b4b453185ea2dea3b6a3e0a721d4d23d75bd33734c295"; };
    dependencies = {
      rand_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wyz."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "wyz";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "129e027ad65ce1453680623c3fb5163cbf7107bfe1aa32257e7d0e63f9ced188"; };
    dependencies = {
      tap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tap."1.0.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wyz."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "wyz";
    version = "0.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "30b31594f29d27036c383b53b59ed3476874d518f0efb151b27a4c275141390e"; };
    dependencies = {
      tap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tap."1.0.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".x11-clipboard."0.5.3" = overridableMkRustCrate (profileName: rec {
    name = "x11-clipboard";
    version = "0.5.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "473068b7b80ac86a18328824f1054e5e007898c47b5bbc281bd7abe32bc3653c"; };
    dependencies = {
      xcb = rustPackages."registry+https://github.com/rust-lang/crates.io-index".xcb."0.10.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".x11-dl."2.19.1" = overridableMkRustCrate (profileName: rec {
    name = "x11-dl";
    version = "2.19.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ea26926b4ce81a6f5d9d0f3a0bc401e5a37c6ae14a1bfaa8ff6099ca80038c59"; };
    dependencies = {
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.125" { inherit profileName; };
    };
    buildDependencies = {
      pkg_config = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".pkg-config."0.3.25" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".xcb."0.10.1" = overridableMkRustCrate (profileName: rec {
    name = "xcb";
    version = "0.10.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "771e2b996df720cd1c6dd9ff90f62d91698fd3610cc078388d0564bdd6622a9c"; };
    features = builtins.concatLists [
      [ "render" ]
      [ "shape" ]
      [ "thread" ]
      [ "xfixes" ]
    ];
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.125" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.17" { inherit profileName; };
    };
    buildDependencies = {
      libc = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.125" { profileName = "__noProfile"; };
      quick_xml = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".quick-xml."0.22.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".xcursor."0.3.4" = overridableMkRustCrate (profileName: rec {
    name = "xcursor";
    version = "0.3.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "463705a63313cd4301184381c5e8042f0a7e9b4bb63653f216311d4ae74690b7"; };
    dependencies = {
      nom = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nom."7.1.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".xdg."2.4.1" = overridableMkRustCrate (profileName: rec {
    name = "xdg";
    version = "2.4.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0c4583db5cbd4c4c0303df2d15af80f0539db703fa1c68802d4cbbd2dd0f88f6"; };
    dependencies = {
      dirs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".dirs."4.0.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".xi-unicode."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "xi-unicode";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a67300977d3dc3f8034dae89778f502b6ba20b269527b3223ba59c0cf393bb8a"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".xml-rs."0.8.4" = overridableMkRustCrate (profileName: rec {
    name = "xml-rs";
    version = "0.8.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d2d7d3948613f75c98fd9328cfdcc45acc4d360655289d0a7d4ec931392200a3"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".yaml-rust."0.4.5" = overridableMkRustCrate (profileName: rec {
    name = "yaml-rust";
    version = "0.4.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "56c1936c4cc7a1c9ab21a1ebb602eb942ba868cbd44a99cb7cdc5892335e1c85"; };
    dependencies = {
      linked_hash_map = rustPackages."registry+https://github.com/rust-lang/crates.io-index".linked-hash-map."0.5.4" { inherit profileName; };
    };
  });
  
}
